
tutorial_soft.elf:     file format elf32-littlenios2
tutorial_soft.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000057fc memsz 0x000057fc flags r-x
    LOAD off    0x0000681c vaddr 0x0002581c paddr 0x00025afc align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00006ddc vaddr 0x00025ddc paddr 0x00025ddc align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053b4  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000224  000255f8  000255f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0002581c  00025afc  0000681c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00025ddc  00025ddc  00006ddc  2**2
                  ALLOC, SMALL_DATA
  6 .MEMOIRE_ONCHIP 00000000  00025efc  00025efc  00006afc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006afc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000828  00000000  00000000  00006b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b435  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004012  00000000  00000000  0001277d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000049ae  00000000  00000000  0001678f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f58  00000000  00000000  0001b140  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002447  00000000  00000000  0001c098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006677  00000000  00000000  0001e4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00024b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00024b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00027502  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00027505  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002750f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00027510  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00027511  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00027515  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00027519  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0002751d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00027528  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00027533  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0002753e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  00027546  2**0
                  CONTENTS, READONLY
 29 .jdi          00005615  00000000  00000000  00027565  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000500cf  00000000  00000000  0002cb7a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
000255f8 l    d  .rodata	00000000 .rodata
0002581c l    d  .rwdata	00000000 .rwdata
00025ddc l    d  .bss	00000000 .bss
00025efc l    d  .MEMOIRE_ONCHIP	00000000 .MEMOIRE_ONCHIP
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tutorial_soft_bsp//obj/HAL/src/crt0.o
0002027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00020280 l     F .text	00000034 initial_message
00000000 l    df *ABS*	00000000 hex.c
0002568c l     O .rodata	00000058 chars
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00023010 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
000235bc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0002581c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00023f34 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0002408c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000241c0 l     F .text	00000034 alt_dev_reg
000258fc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000244bc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000245b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000246dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024708 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024abc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024bfc l     F .text	0000003c alt_get_errno
00024c38 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00025df8 g     O .bss	00000004 alt_instruction_exception_handler
00024020 g     F .text	0000006c alt_main
00022e84 g     F .text	00000080 _puts_r
00025dfc g     O .bss	00000100 alt_irq
00025afc g       *ABS*	00000000 __flash_rwdata_start
00022e38 g     F .text	0000004c printf
000213cc g     F .text	00000440 .hidden __divsf3
00023cc8 g     F .text	00000060 memmove
000220ec g     F .text	00000070 .hidden __fixsfsi
00022b2c g     F .text	000000dc .hidden __gtdf2
00025058 g     F .text	00000024 altera_nios2_gen2_irq_init
00023c20 g     F .text	000000a8 __sfvwrite_small_str
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00025ddc g     O .bss	00000004 errno
00020d18 g     F .text	000001ec floor
00025de4 g     O .bss	00000004 alt_argv
0002dad0 g       *ABS*	00000000 _gp
00021c08 g     F .text	000004e4 .hidden __subsf3
00025950 g     O .rwdata	00000180 alt_fd_list
0002507c g     F .text	00000090 alt_find_dev
00024b80 g     F .text	0000007c alt_io_redirect
00022f04 g     F .text	00000014 puts
00025348 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002433c g     F .text	000000ec altera_avalon_jtag_uart_read
00022dfc g     F .text	0000003c _printf_r
00023e78 g     F .text	00000064 .hidden __udivsi3
000252b8 g     F .text	00000090 alt_icache_flush
00025ae8 g     O .rwdata	00000004 alt_max_fd
00022c88 g     F .text	00000110 .hidden __extendsfdf2
00022280 g     F .text	000008ac .hidden __adddf3
00025ad0 g     O .rwdata	00000004 _global_impure_ptr
00025efc g       *ABS*	00000000 __bss_end
000249cc g     F .text	000000f0 alt_iic_isr_register
00024f50 g     F .text	00000108 alt_tick
00024980 g     F .text	0000004c alt_ic_irq_enabled
00024eb4 g     F .text	0000009c alt_alarm_stop
00025dec g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00025928 g     O .rwdata	00000028 alt_dev_null
000246bc g     F .text	00000020 alt_dcache_flush_all
00022c08 g     F .text	00000080 .hidden __fixdfsi
00025afc g       *ABS*	00000000 __ram_rwdata_end
00025ae0 g     O .rwdata	00000008 alt_dev_list
000240c8 g     F .text	000000f8 write
0002581c g       *ABS*	00000000 __ram_rodata_end
00023edc g     F .text	00000058 .hidden __umodsi3
00025efc g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0003e000 g       *ABS*	00000000 __alt_stack_pointer
00024534 g     F .text	0000007c alt_avalon_timer_sc_init
00022d98 g     F .text	00000064 .hidden __clzsi2
00024428 g     F .text	00000094 altera_avalon_jtag_uart_write
00023628 g     F .text	00000524 ___vfprintf_internal_r
00022f18 g     F .text	00000064 _sprintf_r
00025434 g     F .text	00000190 __call_exitprocs
00020244 g     F .text	0000003c _start
00025df0 g     O .bss	00000004 _alt_tick_rate
00025df4 g     O .bss	00000004 _alt_nticks
0002422c g     F .text	00000050 alt_sys_init
0002215c g     F .text	00000124 .hidden __floatsisf
0002581c g       *ABS*	00000000 __ram_rwdata_start
000255f8 g       *ABS*	00000000 __ram_rodata_start
0002427c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025214 g     F .text	000000a4 alt_get_fd
00025404 g     F .text	00000030 memcmp
00025efc g       *ABS*	00000000 __alt_stack_base
00020898 g     F .text	00000270 char27seg
0002510c g     F .text	00000108 alt_find_file
00024744 g     F .text	000000a4 alt_dev_llist_insert
0002307c g     F .text	00000524 ___svfprintf_internal_r
00023b68 g     F .text	000000b8 __sfvwrite_small_dev
00025ddc g       *ABS*	00000000 __bss_start
000202b4 g     F .text	000005e4 main
00025de8 g     O .bss	00000004 alt_envp
000242dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00025aec g     O .rwdata	00000004 alt_errno
00020b08 g     F .text	00000210 hex_display
00023d80 g     F .text	00000084 .hidden __divsi3
0002180c g     F .text	000003fc .hidden __mulsf3
000255f8 g       *ABS*	00000000 __flash_rodata_start
000241f4 g     F .text	00000038 alt_irq_init
00024e50 g     F .text	00000064 alt_release_fd
00022f7c g     F .text	00000078 sprintf
000256e4 g     O .rodata	00000100 .hidden __clz_tab
00023d28 g     F .text	00000058 _write_r
00020000 g       *ABS*	00000000 __alt_mem_MEMOIRE_ONCHIP
00025ad4 g     O .rwdata	00000004 _impure_ptr
00025de0 g     O .bss	00000004 alt_argc
00020020 g       .exceptions	00000000 alt_irq_entry
00025ad8 g     O .rwdata	00000008 alt_fs_list
000235a0 g     F .text	0000001c __vfprintf_internal_unused
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002481c g     F .text	00000050 alt_ic_isr_register
00025afc g       *ABS*	00000000 _edata
00025efc g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
000248f4 g     F .text	0000008c alt_ic_irq_disable
000253e4 g     F .text	00000020 exit
00023e04 g     F .text	00000074 .hidden __modsi3
0003e000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000255c4 g     F .text	00000034 _exit
00022ff4 g     F .text	0000001c strlen
00024cfc g     F .text	00000154 open
00022b2c g     F .text	000000dc .hidden __gedf2
000247e8 g     F .text	00000034 alt_icache_flush_all
00025af0 g     O .rwdata	00000004 alt_priority_mask
0002486c g     F .text	00000088 alt_ic_irq_enable
00023b4c g     F .text	0000001c __vfprintf_internal
00025af4 g     O .rwdata	00000008 alt_alarm_list
000245ec g     F .text	000000d0 close
00020f04 g     F .text	000004c8 .hidden __addsf3
00023f9c g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	10977f04 	addi	r2,r2,24060
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	10977f04 	addi	r2,r2,24060
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a0ca17 	ldw	r2,-31960(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a0ca17 	ldw	r2,-31960(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20244:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20248:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
   2024c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20250:	d6b6b414 	ori	gp,gp,56016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20258:	10977714 	ori	r2,r2,24028

    movhi r3, %hi(__bss_end)
   2025c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20260:	18d7bf14 	ori	r3,r3,24316

    beq r2, r3, 1f
   20264:	10c00326 	beq	r2,r3,20274 <_start+0x30>

0:
    stw zero, (r2)
   20268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20270:	10fffd36 	bltu	r2,r3,20268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20274:	0023f9c0 	call	23f9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20278:	00240200 	call	24020 <alt_main>

0002027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2027c:	003fff06 	br	2027c <alt_after_alt_main>

00020280 <initial_message>:

#include <stdio.h>
#include <unistd.h>
#include <math.h>

static void initial_message(){ printf("\n\n***CE PROGRAMME UTILISE DES MACROS***\n"); }
   20280:	defffe04 	addi	sp,sp,-8
   20284:	dfc00115 	stw	ra,4(sp)
   20288:	df000015 	stw	fp,0(sp)
   2028c:	d839883a 	mov	fp,sp
   20290:	010000b4 	movhi	r4,2
   20294:	21157e04 	addi	r4,r4,22008
   20298:	0022f040 	call	22f04 <puts>
   2029c:	0001883a 	nop
   202a0:	e037883a 	mov	sp,fp
   202a4:	dfc00117 	ldw	ra,4(sp)
   202a8:	df000017 	ldw	fp,0(sp)
   202ac:	dec00204 	addi	sp,sp,8
   202b0:	f800283a 	ret

000202b4 <main>:

/* MAIN FUNCTION */
int main(void) {
   202b4:	defff304 	addi	sp,sp,-52
   202b8:	dfc00c15 	stw	ra,48(sp)
   202bc:	df000b15 	stw	fp,44(sp)
   202c0:	dc000a15 	stw	r16,40(sp)
   202c4:	df000b04 	addi	fp,sp,44

	int HEX_bits = 0x0; // initial pattern for HEX displays
   202c8:	e03ff615 	stw	zero,-40(fp)
	int LED_bits = 0x0; // initial pattern for LED lights
   202cc:	e03ff715 	stw	zero,-36(fp)
	int SW_value; //, KEY_value;
	int press, delay_count = 0;
   202d0:	e03ff515 	stw	zero,-44(fp)
	float res = 0.0;
   202d4:	e03ff815 	stw	zero,-32(fp)
	int round_res = 0;
   202d8:	e03ff915 	stw	zero,-28(fp)

	int Op1 = 0, Op2 = 0;
   202dc:	e03ffa15 	stw	zero,-24(fp)
   202e0:	e03ffb15 	stw	zero,-20(fp)
	int Op = 0xFF;
   202e4:	00803fc4 	movi	r2,255
   202e8:	e0bffc15 	stw	r2,-16(fp)

	char hexval[4];

	initial_message();
   202ec:	00202800 	call	20280 <initial_message>

	while (1)
	{
		// Read the value
		SW_value = SW_IORD_DATA;
   202f0:	00800134 	movhi	r2,4
   202f4:	10841404 	addi	r2,r2,4176
   202f8:	10800037 	ldwio	r2,0(r2)
   202fc:	e0bffd15 	stw	r2,-12(fp)
		Op1 = SW_value & 0x01F;
   20300:	e0bffd17 	ldw	r2,-12(fp)
   20304:	108007cc 	andi	r2,r2,31
   20308:	e0bffa15 	stw	r2,-24(fp)
		Op2 = (SW_value & 0x3e0) >> 5;
   2030c:	e0bffd17 	ldw	r2,-12(fp)
   20310:	1080f80c 	andi	r2,r2,992
   20314:	1005d17a 	srai	r2,r2,5
   20318:	e0bffb15 	stw	r2,-20(fp)

		Op = BP_IORD_DATA & 0x03;
   2031c:	00800134 	movhi	r2,4
   20320:	10841004 	addi	r2,r2,4160
   20324:	10800037 	ldwio	r2,0(r2)
   20328:	108000cc 	andi	r2,r2,3
   2032c:	e0bffc15 	stw	r2,-16(fp)
		BP_IOWR_EDGE(Op); // Clear the edge register
   20330:	00800134 	movhi	r2,4
   20334:	10841304 	addi	r2,r2,4172
   20338:	e0fffc17 	ldw	r3,-16(fp)
   2033c:	10c00035 	stwio	r3,0(r2)

		printf("DBG-INF <Input> Op1 %d, Op2 %d, Op %d \n", Op1, Op2, Op);
   20340:	e1fffc17 	ldw	r7,-16(fp)
   20344:	e1bffb17 	ldw	r6,-20(fp)
   20348:	e17ffa17 	ldw	r5,-24(fp)
   2034c:	010000b4 	movhi	r4,2
   20350:	21158804 	addi	r4,r4,22048
   20354:	0022e380 	call	22e38 <printf>

		switch (Op)
   20358:	e0bffc17 	ldw	r2,-16(fp)
   2035c:	10c00060 	cmpeqi	r3,r2,1
   20360:	1800561e 	bne	r3,zero,204bc <main+0x208>
   20364:	10c00088 	cmpgei	r3,r2,2
   20368:	1800021e 	bne	r3,zero,20374 <main+0xc0>
   2036c:	10000626 	beq	r2,zero,20388 <main+0xd4>
   20370:	00013906 	br	20858 <main+0x5a4>
   20374:	10c000a0 	cmpeqi	r3,r2,2
   20378:	18009d1e 	bne	r3,zero,205f0 <main+0x33c>
   2037c:	108000e0 	cmpeqi	r2,r2,3
   20380:	1000e81e 	bne	r2,zero,20724 <main+0x470>
   20384:	00013406 	br	20858 <main+0x5a4>
		{
		case 0 :
		{
			res = (float)((float)Op1 + (float)Op2);
   20388:	e13ffa17 	ldw	r4,-24(fp)
   2038c:	002215c0 	call	2215c <__floatsisf>
   20390:	1021883a 	mov	r16,r2
   20394:	e13ffb17 	ldw	r4,-20(fp)
   20398:	002215c0 	call	2215c <__floatsisf>
   2039c:	1007883a 	mov	r3,r2
   203a0:	180b883a 	mov	r5,r3
   203a4:	8009883a 	mov	r4,r16
   203a8:	0020f040 	call	20f04 <__addsf3>
   203ac:	1007883a 	mov	r3,r2
   203b0:	e0fff815 	stw	r3,-32(fp)
			printf("DBG-INF <Loop> res %d \n", (int)(res * 100));
   203b4:	0150b234 	movhi	r5,17096
   203b8:	e13ff817 	ldw	r4,-32(fp)
   203bc:	002180c0 	call	2180c <__mulsf3>
   203c0:	1007883a 	mov	r3,r2
   203c4:	1805883a 	mov	r2,r3
   203c8:	1009883a 	mov	r4,r2
   203cc:	00220ec0 	call	220ec <__fixsfsi>
   203d0:	100b883a 	mov	r5,r2
   203d4:	010000b4 	movhi	r4,2
   203d8:	21159204 	addi	r4,r4,22088
   203dc:	0022e380 	call	22e38 <printf>

			round_res = (int)floor(res);
   203e0:	e13ff817 	ldw	r4,-32(fp)
   203e4:	0022c880 	call	22c88 <__extendsfdf2>
   203e8:	100b883a 	mov	r5,r2
   203ec:	180d883a 	mov	r6,r3
   203f0:	2809883a 	mov	r4,r5
   203f4:	300b883a 	mov	r5,r6
   203f8:	0020d180 	call	20d18 <floor>
   203fc:	100b883a 	mov	r5,r2
   20400:	180d883a 	mov	r6,r3
   20404:	2809883a 	mov	r4,r5
   20408:	300b883a 	mov	r5,r6
   2040c:	0022c080 	call	22c08 <__fixdfsi>
   20410:	e0bff915 	stw	r2,-28(fp)
			res = res - (float)round_res;
   20414:	e13ff917 	ldw	r4,-28(fp)
   20418:	002215c0 	call	2215c <__floatsisf>
   2041c:	1007883a 	mov	r3,r2
   20420:	180b883a 	mov	r5,r3
   20424:	e13ff817 	ldw	r4,-32(fp)
   20428:	0021c080 	call	21c08 <__subsf3>
   2042c:	1007883a 	mov	r3,r2
   20430:	e0fff815 	stw	r3,-32(fp)

			LEDR_IOWR_DATA(res * 1024);
   20434:	01512034 	movhi	r5,17536
   20438:	e13ff817 	ldw	r4,-32(fp)
   2043c:	002180c0 	call	2180c <__mulsf3>
   20440:	1007883a 	mov	r3,r2
   20444:	1805883a 	mov	r2,r3
   20448:	1009883a 	mov	r4,r2
   2044c:	00220ec0 	call	220ec <__fixsfsi>
   20450:	1007883a 	mov	r3,r2
   20454:	00800134 	movhi	r2,4
   20458:	10840c04 	addi	r2,r2,4144
   2045c:	10c00035 	stwio	r3,0(r2)
			printf("DBG-INF <Loop> remains %d \n", (int)(res * 1024));
   20460:	01512034 	movhi	r5,17536
   20464:	e13ff817 	ldw	r4,-32(fp)
   20468:	002180c0 	call	2180c <__mulsf3>
   2046c:	1007883a 	mov	r3,r2
   20470:	1805883a 	mov	r2,r3
   20474:	1009883a 	mov	r4,r2
   20478:	00220ec0 	call	220ec <__fixsfsi>
   2047c:	100b883a 	mov	r5,r2
   20480:	010000b4 	movhi	r4,2
   20484:	21159804 	addi	r4,r4,22112
   20488:	0022e380 	call	22e38 <printf>

			sprintf(&hexval, "%04d", round_res);
   2048c:	e0bffe04 	addi	r2,fp,-8
   20490:	e1bff917 	ldw	r6,-28(fp)
   20494:	014000b4 	movhi	r5,2
   20498:	29559f04 	addi	r5,r5,22140
   2049c:	1009883a 	mov	r4,r2
   204a0:	0022f7c0 	call	22f7c <sprintf>
			hex_display(hexval, 4, 0);
   204a4:	e0bffe04 	addi	r2,fp,-8
   204a8:	000d883a 	mov	r6,zero
   204ac:	01400104 	movi	r5,4
   204b0:	1009883a 	mov	r4,r2
   204b4:	0020b080 	call	20b08 <hex_display>

			break;
   204b8:	0000ed06 	br	20870 <main+0x5bc>
		}
		case 1 :
		{
			res = (float)((float)Op1 - (float)Op2);
   204bc:	e13ffa17 	ldw	r4,-24(fp)
   204c0:	002215c0 	call	2215c <__floatsisf>
   204c4:	1021883a 	mov	r16,r2
   204c8:	e13ffb17 	ldw	r4,-20(fp)
   204cc:	002215c0 	call	2215c <__floatsisf>
   204d0:	1007883a 	mov	r3,r2
   204d4:	180b883a 	mov	r5,r3
   204d8:	8009883a 	mov	r4,r16
   204dc:	0021c080 	call	21c08 <__subsf3>
   204e0:	1007883a 	mov	r3,r2
   204e4:	e0fff815 	stw	r3,-32(fp)
			printf("DBG-INF <Loop> res %d \n", (int)(res * 100));
   204e8:	0150b234 	movhi	r5,17096
   204ec:	e13ff817 	ldw	r4,-32(fp)
   204f0:	002180c0 	call	2180c <__mulsf3>
   204f4:	1007883a 	mov	r3,r2
   204f8:	1805883a 	mov	r2,r3
   204fc:	1009883a 	mov	r4,r2
   20500:	00220ec0 	call	220ec <__fixsfsi>
   20504:	100b883a 	mov	r5,r2
   20508:	010000b4 	movhi	r4,2
   2050c:	21159204 	addi	r4,r4,22088
   20510:	0022e380 	call	22e38 <printf>

			round_res = (int)floor(res);
   20514:	e13ff817 	ldw	r4,-32(fp)
   20518:	0022c880 	call	22c88 <__extendsfdf2>
   2051c:	100b883a 	mov	r5,r2
   20520:	180d883a 	mov	r6,r3
   20524:	2809883a 	mov	r4,r5
   20528:	300b883a 	mov	r5,r6
   2052c:	0020d180 	call	20d18 <floor>
   20530:	100b883a 	mov	r5,r2
   20534:	180d883a 	mov	r6,r3
   20538:	2809883a 	mov	r4,r5
   2053c:	300b883a 	mov	r5,r6
   20540:	0022c080 	call	22c08 <__fixdfsi>
   20544:	e0bff915 	stw	r2,-28(fp)
			res = res - (float)round_res;
   20548:	e13ff917 	ldw	r4,-28(fp)
   2054c:	002215c0 	call	2215c <__floatsisf>
   20550:	1007883a 	mov	r3,r2
   20554:	180b883a 	mov	r5,r3
   20558:	e13ff817 	ldw	r4,-32(fp)
   2055c:	0021c080 	call	21c08 <__subsf3>
   20560:	1007883a 	mov	r3,r2
   20564:	e0fff815 	stw	r3,-32(fp)

			sprintf(&hexval, "%04d", round_res);
   20568:	e0bffe04 	addi	r2,fp,-8
   2056c:	e1bff917 	ldw	r6,-28(fp)
   20570:	014000b4 	movhi	r5,2
   20574:	29559f04 	addi	r5,r5,22140
   20578:	1009883a 	mov	r4,r2
   2057c:	0022f7c0 	call	22f7c <sprintf>
			hex_display(hexval, 4, 0);
   20580:	e0bffe04 	addi	r2,fp,-8
   20584:	000d883a 	mov	r6,zero
   20588:	01400104 	movi	r5,4
   2058c:	1009883a 	mov	r4,r2
   20590:	0020b080 	call	20b08 <hex_display>

			LEDR_IOWR_DATA(res * 1024);
   20594:	01512034 	movhi	r5,17536
   20598:	e13ff817 	ldw	r4,-32(fp)
   2059c:	002180c0 	call	2180c <__mulsf3>
   205a0:	1007883a 	mov	r3,r2
   205a4:	1805883a 	mov	r2,r3
   205a8:	1009883a 	mov	r4,r2
   205ac:	00220ec0 	call	220ec <__fixsfsi>
   205b0:	1007883a 	mov	r3,r2
   205b4:	00800134 	movhi	r2,4
   205b8:	10840c04 	addi	r2,r2,4144
   205bc:	10c00035 	stwio	r3,0(r2)
			printf("DBG-INF <Loop> remains %d \n", (int)(res * 1024));
   205c0:	01512034 	movhi	r5,17536
   205c4:	e13ff817 	ldw	r4,-32(fp)
   205c8:	002180c0 	call	2180c <__mulsf3>
   205cc:	1007883a 	mov	r3,r2
   205d0:	1805883a 	mov	r2,r3
   205d4:	1009883a 	mov	r4,r2
   205d8:	00220ec0 	call	220ec <__fixsfsi>
   205dc:	100b883a 	mov	r5,r2
   205e0:	010000b4 	movhi	r4,2
   205e4:	21159804 	addi	r4,r4,22112
   205e8:	0022e380 	call	22e38 <printf>

			break;
   205ec:	0000a006 	br	20870 <main+0x5bc>
		}
		case 2 :
		{
			res = (float)((float)Op1 * (float)Op2);
   205f0:	e13ffa17 	ldw	r4,-24(fp)
   205f4:	002215c0 	call	2215c <__floatsisf>
   205f8:	1021883a 	mov	r16,r2
   205fc:	e13ffb17 	ldw	r4,-20(fp)
   20600:	002215c0 	call	2215c <__floatsisf>
   20604:	1007883a 	mov	r3,r2
   20608:	180b883a 	mov	r5,r3
   2060c:	8009883a 	mov	r4,r16
   20610:	002180c0 	call	2180c <__mulsf3>
   20614:	1007883a 	mov	r3,r2
   20618:	e0fff815 	stw	r3,-32(fp)
			printf("DBG-INF <Loop> res %d \n", (int)(res * 100));
   2061c:	0150b234 	movhi	r5,17096
   20620:	e13ff817 	ldw	r4,-32(fp)
   20624:	002180c0 	call	2180c <__mulsf3>
   20628:	1007883a 	mov	r3,r2
   2062c:	1805883a 	mov	r2,r3
   20630:	1009883a 	mov	r4,r2
   20634:	00220ec0 	call	220ec <__fixsfsi>
   20638:	100b883a 	mov	r5,r2
   2063c:	010000b4 	movhi	r4,2
   20640:	21159204 	addi	r4,r4,22088
   20644:	0022e380 	call	22e38 <printf>

			round_res = (int)floor(res);
   20648:	e13ff817 	ldw	r4,-32(fp)
   2064c:	0022c880 	call	22c88 <__extendsfdf2>
   20650:	100b883a 	mov	r5,r2
   20654:	180d883a 	mov	r6,r3
   20658:	2809883a 	mov	r4,r5
   2065c:	300b883a 	mov	r5,r6
   20660:	0020d180 	call	20d18 <floor>
   20664:	100b883a 	mov	r5,r2
   20668:	180d883a 	mov	r6,r3
   2066c:	2809883a 	mov	r4,r5
   20670:	300b883a 	mov	r5,r6
   20674:	0022c080 	call	22c08 <__fixdfsi>
   20678:	e0bff915 	stw	r2,-28(fp)
			res = res - (float)round_res;
   2067c:	e13ff917 	ldw	r4,-28(fp)
   20680:	002215c0 	call	2215c <__floatsisf>
   20684:	1007883a 	mov	r3,r2
   20688:	180b883a 	mov	r5,r3
   2068c:	e13ff817 	ldw	r4,-32(fp)
   20690:	0021c080 	call	21c08 <__subsf3>
   20694:	1007883a 	mov	r3,r2
   20698:	e0fff815 	stw	r3,-32(fp)

			sprintf(&hexval, "%04d", round_res);
   2069c:	e0bffe04 	addi	r2,fp,-8
   206a0:	e1bff917 	ldw	r6,-28(fp)
   206a4:	014000b4 	movhi	r5,2
   206a8:	29559f04 	addi	r5,r5,22140
   206ac:	1009883a 	mov	r4,r2
   206b0:	0022f7c0 	call	22f7c <sprintf>
			hex_display(hexval, 4, 0);
   206b4:	e0bffe04 	addi	r2,fp,-8
   206b8:	000d883a 	mov	r6,zero
   206bc:	01400104 	movi	r5,4
   206c0:	1009883a 	mov	r4,r2
   206c4:	0020b080 	call	20b08 <hex_display>

			LEDR_IOWR_DATA(res * 1024);
   206c8:	01512034 	movhi	r5,17536
   206cc:	e13ff817 	ldw	r4,-32(fp)
   206d0:	002180c0 	call	2180c <__mulsf3>
   206d4:	1007883a 	mov	r3,r2
   206d8:	1805883a 	mov	r2,r3
   206dc:	1009883a 	mov	r4,r2
   206e0:	00220ec0 	call	220ec <__fixsfsi>
   206e4:	1007883a 	mov	r3,r2
   206e8:	00800134 	movhi	r2,4
   206ec:	10840c04 	addi	r2,r2,4144
   206f0:	10c00035 	stwio	r3,0(r2)
			printf("DBG-INF <Loop> remains %d \n", (int)(res * 1024));
   206f4:	01512034 	movhi	r5,17536
   206f8:	e13ff817 	ldw	r4,-32(fp)
   206fc:	002180c0 	call	2180c <__mulsf3>
   20700:	1007883a 	mov	r3,r2
   20704:	1805883a 	mov	r2,r3
   20708:	1009883a 	mov	r4,r2
   2070c:	00220ec0 	call	220ec <__fixsfsi>
   20710:	100b883a 	mov	r5,r2
   20714:	010000b4 	movhi	r4,2
   20718:	21159804 	addi	r4,r4,22112
   2071c:	0022e380 	call	22e38 <printf>

			break;
   20720:	00005306 	br	20870 <main+0x5bc>
		}
		case 3 :
		{
			res = (float)((float)Op1 / (float)Op2);
   20724:	e13ffa17 	ldw	r4,-24(fp)
   20728:	002215c0 	call	2215c <__floatsisf>
   2072c:	1021883a 	mov	r16,r2
   20730:	e13ffb17 	ldw	r4,-20(fp)
   20734:	002215c0 	call	2215c <__floatsisf>
   20738:	1007883a 	mov	r3,r2
   2073c:	180b883a 	mov	r5,r3
   20740:	8009883a 	mov	r4,r16
   20744:	00213cc0 	call	213cc <__divsf3>
   20748:	1007883a 	mov	r3,r2
   2074c:	e0fff815 	stw	r3,-32(fp)
			printf("DBG-INF <Loop> res %d \n", (int)(res * 100));
   20750:	0150b234 	movhi	r5,17096
   20754:	e13ff817 	ldw	r4,-32(fp)
   20758:	002180c0 	call	2180c <__mulsf3>
   2075c:	1007883a 	mov	r3,r2
   20760:	1805883a 	mov	r2,r3
   20764:	1009883a 	mov	r4,r2
   20768:	00220ec0 	call	220ec <__fixsfsi>
   2076c:	100b883a 	mov	r5,r2
   20770:	010000b4 	movhi	r4,2
   20774:	21159204 	addi	r4,r4,22088
   20778:	0022e380 	call	22e38 <printf>

			round_res = (int)floor(res);
   2077c:	e13ff817 	ldw	r4,-32(fp)
   20780:	0022c880 	call	22c88 <__extendsfdf2>
   20784:	100b883a 	mov	r5,r2
   20788:	180d883a 	mov	r6,r3
   2078c:	2809883a 	mov	r4,r5
   20790:	300b883a 	mov	r5,r6
   20794:	0020d180 	call	20d18 <floor>
   20798:	100b883a 	mov	r5,r2
   2079c:	180d883a 	mov	r6,r3
   207a0:	2809883a 	mov	r4,r5
   207a4:	300b883a 	mov	r5,r6
   207a8:	0022c080 	call	22c08 <__fixdfsi>
   207ac:	e0bff915 	stw	r2,-28(fp)
			res = res - (float)round_res;
   207b0:	e13ff917 	ldw	r4,-28(fp)
   207b4:	002215c0 	call	2215c <__floatsisf>
   207b8:	1007883a 	mov	r3,r2
   207bc:	180b883a 	mov	r5,r3
   207c0:	e13ff817 	ldw	r4,-32(fp)
   207c4:	0021c080 	call	21c08 <__subsf3>
   207c8:	1007883a 	mov	r3,r2
   207cc:	e0fff815 	stw	r3,-32(fp)

			sprintf(&hexval, "%04d", round_res);
   207d0:	e0bffe04 	addi	r2,fp,-8
   207d4:	e1bff917 	ldw	r6,-28(fp)
   207d8:	014000b4 	movhi	r5,2
   207dc:	29559f04 	addi	r5,r5,22140
   207e0:	1009883a 	mov	r4,r2
   207e4:	0022f7c0 	call	22f7c <sprintf>
			hex_display(hexval, 4, 0);
   207e8:	e0bffe04 	addi	r2,fp,-8
   207ec:	000d883a 	mov	r6,zero
   207f0:	01400104 	movi	r5,4
   207f4:	1009883a 	mov	r4,r2
   207f8:	0020b080 	call	20b08 <hex_display>

			LEDR_IOWR_DATA(res * 1024);
   207fc:	01512034 	movhi	r5,17536
   20800:	e13ff817 	ldw	r4,-32(fp)
   20804:	002180c0 	call	2180c <__mulsf3>
   20808:	1007883a 	mov	r3,r2
   2080c:	1805883a 	mov	r2,r3
   20810:	1009883a 	mov	r4,r2
   20814:	00220ec0 	call	220ec <__fixsfsi>
   20818:	1007883a 	mov	r3,r2
   2081c:	00800134 	movhi	r2,4
   20820:	10840c04 	addi	r2,r2,4144
   20824:	10c00035 	stwio	r3,0(r2)
			printf("DBG-INF <Loop> remains %d \n", (int)(res * 1024));
   20828:	01512034 	movhi	r5,17536
   2082c:	e13ff817 	ldw	r4,-32(fp)
   20830:	002180c0 	call	2180c <__mulsf3>
   20834:	1007883a 	mov	r3,r2
   20838:	1805883a 	mov	r2,r3
   2083c:	1009883a 	mov	r4,r2
   20840:	00220ec0 	call	220ec <__fixsfsi>
   20844:	100b883a 	mov	r5,r2
   20848:	010000b4 	movhi	r4,2
   2084c:	21159804 	addi	r4,r4,22112
   20850:	0022e380 	call	22e38 <printf>

			break;
   20854:	00000606 	br	20870 <main+0x5bc>
		}
		default:
		{
			hex_display("----", 4, 0);
   20858:	000d883a 	mov	r6,zero
   2085c:	01400104 	movi	r5,4
   20860:	010000b4 	movhi	r4,2
   20864:	2115a104 	addi	r4,r4,22148
   20868:	0020b080 	call	20b08 <hex_display>
			break;
   2086c:	0001883a 	nop
		}
		}

		// Delay
		for (delay_count = 200000; delay_count != 0; --delay_count);
   20870:	008000f4 	movhi	r2,3
   20874:	10835004 	addi	r2,r2,3392
   20878:	e0bff515 	stw	r2,-44(fp)
   2087c:	00000306 	br	2088c <main+0x5d8>
   20880:	e0bff517 	ldw	r2,-44(fp)
   20884:	10bfffc4 	addi	r2,r2,-1
   20888:	e0bff515 	stw	r2,-44(fp)
   2088c:	e0bff517 	ldw	r2,-44(fp)
   20890:	103ffb1e 	bne	r2,zero,20880 <main+0x5cc>
		}
   20894:	003e9606 	br	202f0 <main+0x3c>

00020898 <char27seg>:
							0b01111111  // 21 	.    x									!! Unwired on the board !!
};

// Local function to convert from one base to the other !
int char27seg(char in, int * val)
{
   20898:	defffd04 	addi	sp,sp,-12
   2089c:	df000215 	stw	fp,8(sp)
   208a0:	df000204 	addi	fp,sp,8
   208a4:	2005883a 	mov	r2,r4
   208a8:	e17fff15 	stw	r5,-4(fp)
   208ac:	e0bffe05 	stb	r2,-8(fp)
	*val = 0; // Clear the value
   208b0:	e0bfff17 	ldw	r2,-4(fp)
   208b4:	10000015 	stw	zero,0(r2)

	switch (in)
   208b8:	e0bffe07 	ldb	r2,-8(fp)
   208bc:	10bff4c4 	addi	r2,r2,-45
   208c0:	10c01268 	cmpgeui	r3,r2,73
   208c4:	1800891e 	bne	r3,zero,20aec <char27seg+0x254>
   208c8:	100690ba 	slli	r3,r2,2
   208cc:	008000b4 	movhi	r2,2
   208d0:	10823804 	addi	r2,r2,2272
   208d4:	1885883a 	add	r2,r3,r2
   208d8:	10800017 	ldw	r2,0(r2)
   208dc:	1000683a 	jmp	r2
   208e0:	00020abc 	xorhi	zero,zero,2090
   208e4:	00020abc 	xorhi	zero,zero,2090
   208e8:	00020aec 	andhi	zero,zero,2091
   208ec:	00020a04 	movi	zero,2088
   208f0:	00020a04 	movi	zero,2088
   208f4:	00020a04 	movi	zero,2088
   208f8:	00020a04 	movi	zero,2088
   208fc:	00020a04 	movi	zero,2088
   20900:	00020a04 	movi	zero,2088
   20904:	00020a04 	movi	zero,2088
   20908:	00020a04 	movi	zero,2088
   2090c:	00020a04 	movi	zero,2088
   20910:	00020a04 	movi	zero,2088
   20914:	00020aec 	andhi	zero,zero,2091
   20918:	00020aec 	andhi	zero,zero,2091
   2091c:	00020aec 	andhi	zero,zero,2091
   20920:	00020aec 	andhi	zero,zero,2091
   20924:	00020aec 	andhi	zero,zero,2091
   20928:	00020aec 	andhi	zero,zero,2091
   2092c:	00020aec 	andhi	zero,zero,2091
   20930:	00020aec 	andhi	zero,zero,2091
   20934:	00020aec 	andhi	zero,zero,2091
   20938:	00020aec 	andhi	zero,zero,2091
   2093c:	00020aec 	andhi	zero,zero,2091
   20940:	00020aec 	andhi	zero,zero,2091
   20944:	00020aec 	andhi	zero,zero,2091
   20948:	00020aec 	andhi	zero,zero,2091
   2094c:	00020aec 	andhi	zero,zero,2091
   20950:	00020aec 	andhi	zero,zero,2091
   20954:	00020aec 	andhi	zero,zero,2091
   20958:	00020aec 	andhi	zero,zero,2091
   2095c:	00020aec 	andhi	zero,zero,2091
   20960:	00020aec 	andhi	zero,zero,2091
   20964:	00020aec 	andhi	zero,zero,2091
   20968:	00020aec 	andhi	zero,zero,2091
   2096c:	00020aec 	andhi	zero,zero,2091
   20970:	00020aec 	andhi	zero,zero,2091
   20974:	00020aec 	andhi	zero,zero,2091
   20978:	00020aec 	andhi	zero,zero,2091
   2097c:	00020aec 	andhi	zero,zero,2091
   20980:	00020aec 	andhi	zero,zero,2091
   20984:	00020aec 	andhi	zero,zero,2091
   20988:	00020aec 	andhi	zero,zero,2091
   2098c:	00020aec 	andhi	zero,zero,2091
   20990:	00020aec 	andhi	zero,zero,2091
   20994:	00020aec 	andhi	zero,zero,2091
   20998:	00020aec 	andhi	zero,zero,2091
   2099c:	00020aec 	andhi	zero,zero,2091
   209a0:	00020aec 	andhi	zero,zero,2091
   209a4:	00020aec 	andhi	zero,zero,2091
   209a8:	00020aec 	andhi	zero,zero,2091
   209ac:	00020aec 	andhi	zero,zero,2091
   209b0:	00020a34 	movhi	zero,2088
   209b4:	00020a34 	movhi	zero,2088
   209b8:	00020a34 	movhi	zero,2088
   209bc:	00020a34 	movhi	zero,2088
   209c0:	00020a34 	movhi	zero,2088
   209c4:	00020a34 	movhi	zero,2088
   209c8:	00020aec 	andhi	zero,zero,2091
   209cc:	00020a64 	muli	zero,zero,2089
   209d0:	00020a64 	muli	zero,zero,2089
   209d4:	00020aec 	andhi	zero,zero,2091
   209d8:	00020aec 	andhi	zero,zero,2091
   209dc:	00020aec 	andhi	zero,zero,2091
   209e0:	00020aec 	andhi	zero,zero,2091
   209e4:	00020aec 	andhi	zero,zero,2091
   209e8:	00020a94 	movui	zero,2090
   209ec:	00020aec 	andhi	zero,zero,2091
   209f0:	00020aec 	andhi	zero,zero,2091
   209f4:	00020aec 	andhi	zero,zero,2091
   209f8:	00020aec 	andhi	zero,zero,2091
   209fc:	00020aec 	andhi	zero,zero,2091
   20a00:	00020aa8 	cmpgeui	zero,zero,2090
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		*val = chars[(in - 0x30) + 0];
   20a04:	e0bffe07 	ldb	r2,-8(fp)
   20a08:	10fff404 	addi	r3,r2,-48
   20a0c:	008000b4 	movhi	r2,2
   20a10:	1095a304 	addi	r2,r2,22156
   20a14:	18c7883a 	add	r3,r3,r3
   20a18:	18c7883a 	add	r3,r3,r3
   20a1c:	10c5883a 	add	r2,r2,r3
   20a20:	10c00017 	ldw	r3,0(r2)
   20a24:	e0bfff17 	ldw	r2,-4(fp)
   20a28:	10c00015 	stw	r3,0(r2)
		return 0;
   20a2c:	0005883a 	mov	r2,zero
   20a30:	00003106 	br	20af8 <char27seg+0x260>
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
		*val = chars[(in - 0x61) + 10];
   20a34:	e0bffe07 	ldb	r2,-8(fp)
   20a38:	10ffea44 	addi	r3,r2,-87
   20a3c:	008000b4 	movhi	r2,2
   20a40:	1095a304 	addi	r2,r2,22156
   20a44:	18c7883a 	add	r3,r3,r3
   20a48:	18c7883a 	add	r3,r3,r3
   20a4c:	10c5883a 	add	r2,r2,r3
   20a50:	10c00017 	ldw	r3,0(r2)
   20a54:	e0bfff17 	ldw	r2,-4(fp)
   20a58:	10c00015 	stw	r3,0(r2)
		return 0;
   20a5c:	0005883a 	mov	r2,zero
   20a60:	00002506 	br	20af8 <char27seg+0x260>
		break;

	// Handling another group of letters
	case 'h':
	case 'i':
		*val = chars[(in - 0x68) + 16];
   20a64:	e0bffe07 	ldb	r2,-8(fp)
   20a68:	10ffea04 	addi	r3,r2,-88
   20a6c:	008000b4 	movhi	r2,2
   20a70:	1095a304 	addi	r2,r2,22156
   20a74:	18c7883a 	add	r3,r3,r3
   20a78:	18c7883a 	add	r3,r3,r3
   20a7c:	10c5883a 	add	r2,r2,r3
   20a80:	10c00017 	ldw	r3,0(r2)
   20a84:	e0bfff17 	ldw	r2,-4(fp)
   20a88:	10c00015 	stw	r3,0(r2)
		return 0;
   20a8c:	0005883a 	mov	r2,zero
   20a90:	00001906 	br	20af8 <char27seg+0x260>
		break;

	// Last chars...
	case 'o':
		*val = chars[18];
   20a94:	00c028c4 	movi	r3,163
   20a98:	e0bfff17 	ldw	r2,-4(fp)
   20a9c:	10c00015 	stw	r3,0(r2)
		return 0;
   20aa0:	0005883a 	mov	r2,zero
   20aa4:	00001406 	br	20af8 <char27seg+0x260>
		break;

	case 'u':
		*val = chars[19];
   20aa8:	00c038c4 	movi	r3,227
   20aac:	e0bfff17 	ldw	r2,-4(fp)
   20ab0:	10c00015 	stw	r3,0(r2)
		return 0;
   20ab4:	0005883a 	mov	r2,zero
   20ab8:	00000f06 	br	20af8 <char27seg+0x260>
		break;

	// Handling two special chars
	case '-':
	case '.':
		*val = chars[(in - 0x2D) + 20];
   20abc:	e0bffe07 	ldb	r2,-8(fp)
   20ac0:	10fff9c4 	addi	r3,r2,-25
   20ac4:	008000b4 	movhi	r2,2
   20ac8:	1095a304 	addi	r2,r2,22156
   20acc:	18c7883a 	add	r3,r3,r3
   20ad0:	18c7883a 	add	r3,r3,r3
   20ad4:	10c5883a 	add	r2,r2,r3
   20ad8:	10c00017 	ldw	r3,0(r2)
   20adc:	e0bfff17 	ldw	r2,-4(fp)
   20ae0:	10c00015 	stw	r3,0(r2)
		return 0;
   20ae4:	0005883a 	mov	r2,zero
   20ae8:	00000306 	br	20af8 <char27seg+0x260>
		break;

	default:
		*val = 0b00000000; // ALL
   20aec:	e0bfff17 	ldw	r2,-4(fp)
   20af0:	10000015 	stw	zero,0(r2)
		return -1;
   20af4:	00bfffc4 	movi	r2,-1
	}

	return -1;
}
   20af8:	e037883a 	mov	sp,fp
   20afc:	df000017 	ldw	fp,0(sp)
   20b00:	dec00104 	addi	sp,sp,4
   20b04:	f800283a 	ret

00020b08 <hex_display>:

int hex_display(char* values, int len, int first)
{
   20b08:	defff304 	addi	sp,sp,-52
   20b0c:	dfc00c15 	stw	ra,48(sp)
   20b10:	df000b15 	stw	fp,44(sp)
   20b14:	df000b04 	addi	fp,sp,44
   20b18:	e13ffd15 	stw	r4,-12(fp)
   20b1c:	e17ffe15 	stw	r5,-8(fp)
   20b20:	e1bfff15 	stw	r6,-4(fp)
	// First, ensure the operation is possible
	if ((first + len) > HEX_NB)
   20b24:	e0ffff17 	ldw	r3,-4(fp)
   20b28:	e0bffe17 	ldw	r2,-8(fp)
   20b2c:	1885883a 	add	r2,r3,r2
   20b30:	10800150 	cmplti	r2,r2,5
   20b34:	1000021e 	bne	r2,zero,20b40 <hex_display+0x38>
		return -1;
   20b38:	00bfffc4 	movi	r2,-1
   20b3c:	00007106 	br	20d04 <hex_display+0x1fc>
	if (len > 4)
   20b40:	e0bffe17 	ldw	r2,-8(fp)
   20b44:	10800150 	cmplti	r2,r2,5
   20b48:	1000021e 	bne	r2,zero,20b54 <hex_display+0x4c>
		return -1;
   20b4c:	00bfffc4 	movi	r2,-1
   20b50:	00006c06 	br	20d04 <hex_display+0x1fc>
	if ((first > 3) | (first < 0))
   20b54:	e0bfff17 	ldw	r2,-4(fp)
   20b58:	10800108 	cmpgei	r2,r2,4
   20b5c:	1007883a 	mov	r3,r2
   20b60:	e0bfff17 	ldw	r2,-4(fp)
   20b64:	1004d7fa 	srli	r2,r2,31
   20b68:	1884b03a 	or	r2,r3,r2
   20b6c:	10803fcc 	andi	r2,r2,255
   20b70:	10000226 	beq	r2,zero,20b7c <hex_display+0x74>
		return -1;
   20b74:	00bfffc4 	movi	r2,-1
   20b78:	00006206 	br	20d04 <hex_display+0x1fc>

	// Copy the data
	char buf[] = {'\0', '\0', '\0', '\0'};
   20b7c:	e03ffb05 	stb	zero,-20(fp)
   20b80:	e03ffb45 	stb	zero,-19(fp)
   20b84:	e03ffb85 	stb	zero,-18(fp)
   20b88:	e03ffbc5 	stb	zero,-17(fp)
	for (int k = first; k < first + len; k++)
   20b8c:	e0bfff17 	ldw	r2,-4(fp)
   20b90:	e0bff515 	stw	r2,-44(fp)
   20b94:	00000e06 	br	20bd0 <hex_display+0xc8>
		buf[k] = values[k - first];
   20b98:	e0fff517 	ldw	r3,-44(fp)
   20b9c:	e0bfff17 	ldw	r2,-4(fp)
   20ba0:	1885c83a 	sub	r2,r3,r2
   20ba4:	1007883a 	mov	r3,r2
   20ba8:	e0bffd17 	ldw	r2,-12(fp)
   20bac:	10c5883a 	add	r2,r2,r3
   20bb0:	10c00003 	ldbu	r3,0(r2)
   20bb4:	e13ffb04 	addi	r4,fp,-20
   20bb8:	e0bff517 	ldw	r2,-44(fp)
   20bbc:	2085883a 	add	r2,r4,r2
   20bc0:	10c00005 	stb	r3,0(r2)
	if ((first > 3) | (first < 0))
		return -1;

	// Copy the data
	char buf[] = {'\0', '\0', '\0', '\0'};
	for (int k = first; k < first + len; k++)
   20bc4:	e0bff517 	ldw	r2,-44(fp)
   20bc8:	10800044 	addi	r2,r2,1
   20bcc:	e0bff515 	stw	r2,-44(fp)
   20bd0:	e0ffff17 	ldw	r3,-4(fp)
   20bd4:	e0bffe17 	ldw	r2,-8(fp)
   20bd8:	1885883a 	add	r2,r3,r2
   20bdc:	e0fff517 	ldw	r3,-44(fp)
   20be0:	18bfed16 	blt	r3,r2,20b98 <hex_display+0x90>
		buf[k] = values[k - first];

	int bits = 0;
   20be4:	e03ff615 	stw	zero,-40(fp)
	int mask = 0;
   20be8:	e03ff715 	stw	zero,-36(fp)
	int tmp = 0;
   20bec:	e03ffc15 	stw	zero,-16(fp)
	int err = 0;
   20bf0:	e03ff815 	stw	zero,-32(fp)
	int actual = HEX_IORD_DATA;
   20bf4:	00800134 	movhi	r2,4
   20bf8:	10840804 	addi	r2,r2,4128
   20bfc:	10800037 	ldwio	r2,0(r2)
   20c00:	e0bffa15 	stw	r2,-24(fp)

	for (int k = 0; k < HEX_NB; k++)
   20c04:	e03ff915 	stw	zero,-28(fp)
   20c08:	00002706 	br	20ca8 <hex_display+0x1a0>
	{
		// Get the associated char (and return if a char is not handled !)
		if (char27seg(buf[k], &tmp) < 0)
   20c0c:	e0fffb04 	addi	r3,fp,-20
   20c10:	e0bff917 	ldw	r2,-28(fp)
   20c14:	1885883a 	add	r2,r3,r2
   20c18:	10800003 	ldbu	r2,0(r2)
   20c1c:	10803fcc 	andi	r2,r2,255
   20c20:	1080201c 	xori	r2,r2,128
   20c24:	10bfe004 	addi	r2,r2,-128
   20c28:	e0fffc04 	addi	r3,fp,-16
   20c2c:	180b883a 	mov	r5,r3
   20c30:	1009883a 	mov	r4,r2
   20c34:	00208980 	call	20898 <char27seg>
   20c38:	1000030e 	bge	r2,zero,20c48 <hex_display+0x140>
			err += 1;
   20c3c:	e0bff817 	ldw	r2,-32(fp)
   20c40:	10800044 	addi	r2,r2,1
   20c44:	e0bff815 	stw	r2,-32(fp)

		// Clear the bits to write and write
		bits = bits << 8;
   20c48:	e0bff617 	ldw	r2,-40(fp)
   20c4c:	1004923a 	slli	r2,r2,8
   20c50:	e0bff615 	stw	r2,-40(fp)
		mask = mask << 8;
   20c54:	e0bff717 	ldw	r2,-36(fp)
   20c58:	1004923a 	slli	r2,r2,8
   20c5c:	e0bff715 	stw	r2,-36(fp)

		bits |= tmp;
   20c60:	e0bffc17 	ldw	r2,-16(fp)
   20c64:	e0fff617 	ldw	r3,-40(fp)
   20c68:	1884b03a 	or	r2,r3,r2
   20c6c:	e0bff615 	stw	r2,-40(fp)

		if (buf[k] == 0x00)
   20c70:	e0fffb04 	addi	r3,fp,-20
   20c74:	e0bff917 	ldw	r2,-28(fp)
   20c78:	1885883a 	add	r2,r3,r2
   20c7c:	10800003 	ldbu	r2,0(r2)
   20c80:	10803fcc 	andi	r2,r2,255
   20c84:	1080201c 	xori	r2,r2,128
   20c88:	10bfe004 	addi	r2,r2,-128
   20c8c:	1000031e 	bne	r2,zero,20c9c <hex_display+0x194>
			mask |= 0xFF;
   20c90:	e0bff717 	ldw	r2,-36(fp)
   20c94:	10803fd4 	ori	r2,r2,255
   20c98:	e0bff715 	stw	r2,-36(fp)
	int mask = 0;
	int tmp = 0;
	int err = 0;
	int actual = HEX_IORD_DATA;

	for (int k = 0; k < HEX_NB; k++)
   20c9c:	e0bff917 	ldw	r2,-28(fp)
   20ca0:	10800044 	addi	r2,r2,1
   20ca4:	e0bff915 	stw	r2,-28(fp)
   20ca8:	e0bff917 	ldw	r2,-28(fp)
   20cac:	10800110 	cmplti	r2,r2,4
   20cb0:	103fd61e 	bne	r2,zero,20c0c <hex_display+0x104>
		if (buf[k] == 0x00)
			mask |= 0xFF;
	}

	// Clearing the needed bits (mask contain 0 where char are)
	actual &= mask;
   20cb4:	e0fffa17 	ldw	r3,-24(fp)
   20cb8:	e0bff717 	ldw	r2,-36(fp)
   20cbc:	1884703a 	and	r2,r3,r2
   20cc0:	e0bffa15 	stw	r2,-24(fp)

	// Inverting the mask and getting the masked bits (mask contain 1 where char are)
	mask = ~mask;
   20cc4:	e0bff717 	ldw	r2,-36(fp)
   20cc8:	0084303a 	nor	r2,zero,r2
   20ccc:	e0bff715 	stw	r2,-36(fp)
	bits &= mask;
   20cd0:	e0fff617 	ldw	r3,-40(fp)
   20cd4:	e0bff717 	ldw	r2,-36(fp)
   20cd8:	1884703a 	and	r2,r3,r2
   20cdc:	e0bff615 	stw	r2,-40(fp)

	// Finally, getting the final bit stream
	bits = actual | bits;
   20ce0:	e0fff617 	ldw	r3,-40(fp)
   20ce4:	e0bffa17 	ldw	r2,-24(fp)
   20ce8:	1884b03a 	or	r2,r3,r2
   20cec:	e0bff615 	stw	r2,-40(fp)

	// Writing the new value
	HEX_IOWR_DATA(bits);
   20cf0:	00800134 	movhi	r2,4
   20cf4:	10840804 	addi	r2,r2,4128
   20cf8:	e0fff617 	ldw	r3,-40(fp)
   20cfc:	10c00035 	stwio	r3,0(r2)

	return err;
   20d00:	e0bff817 	ldw	r2,-32(fp)
}
   20d04:	e037883a 	mov	sp,fp
   20d08:	dfc00117 	ldw	ra,4(sp)
   20d0c:	df000017 	ldw	fp,0(sp)
   20d10:	dec00204 	addi	sp,sp,8
   20d14:	f800283a 	ret

00020d18 <floor>:
   20d18:	2811d53a 	srai	r8,r5,20
   20d1c:	defffa04 	addi	sp,sp,-24
   20d20:	dcc00315 	stw	r19,12(sp)
   20d24:	4201ffcc 	andi	r8,r8,2047
   20d28:	dc800215 	stw	r18,8(sp)
   20d2c:	dc400115 	stw	r17,4(sp)
   20d30:	dc000015 	stw	r16,0(sp)
   20d34:	dfc00515 	stw	ra,20(sp)
   20d38:	dd000415 	stw	r20,16(sp)
   20d3c:	44bf0044 	addi	r18,r8,-1023
   20d40:	018004c4 	movi	r6,19
   20d44:	2821883a 	mov	r16,r5
   20d48:	2005883a 	mov	r2,r4
   20d4c:	280f883a 	mov	r7,r5
   20d50:	2827883a 	mov	r19,r5
   20d54:	2023883a 	mov	r17,r4
   20d58:	34801916 	blt	r6,r18,20dc0 <floor+0xa8>
   20d5c:	90003c16 	blt	r18,zero,20e50 <floor+0x138>
   20d60:	05000434 	movhi	r20,16
   20d64:	a53fffc4 	addi	r20,r20,-1
   20d68:	a4a9d83a 	sra	r20,r20,r18
   20d6c:	2d0c703a 	and	r6,r5,r20
   20d70:	310cb03a 	or	r6,r6,r4
   20d74:	30001626 	beq	r6,zero,20dd0 <floor+0xb8>
   20d78:	01a20034 	movhi	r6,34816
   20d7c:	01df8e34 	movhi	r7,32312
   20d80:	319d6704 	addi	r6,r6,30108
   20d84:	39f90f04 	addi	r7,r7,-7108
   20d88:	00222800 	call	22280 <__adddf3>
   20d8c:	000d883a 	mov	r6,zero
   20d90:	000f883a 	mov	r7,zero
   20d94:	1009883a 	mov	r4,r2
   20d98:	180b883a 	mov	r5,r3
   20d9c:	0022b2c0 	call	22b2c <__gedf2>
   20da0:	0080040e 	bge	zero,r2,20db4 <floor+0x9c>
   20da4:	80003c16 	blt	r16,zero,20e98 <floor+0x180>
   20da8:	0520303a 	nor	r16,zero,r20
   20dac:	84e0703a 	and	r16,r16,r19
   20db0:	0023883a 	mov	r17,zero
   20db4:	8805883a 	mov	r2,r17
   20db8:	8007883a 	mov	r3,r16
   20dbc:	00000506 	br	20dd4 <floor+0xbc>
   20dc0:	01800cc4 	movi	r6,51
   20dc4:	34800b0e 	bge	r6,r18,20df4 <floor+0xdc>
   20dc8:	01810004 	movi	r6,1024
   20dcc:	91802f26 	beq	r18,r6,20e8c <floor+0x174>
   20dd0:	3807883a 	mov	r3,r7
   20dd4:	dfc00517 	ldw	ra,20(sp)
   20dd8:	dd000417 	ldw	r20,16(sp)
   20ddc:	dcc00317 	ldw	r19,12(sp)
   20de0:	dc800217 	ldw	r18,8(sp)
   20de4:	dc400117 	ldw	r17,4(sp)
   20de8:	dc000017 	ldw	r16,0(sp)
   20dec:	dec00604 	addi	sp,sp,24
   20df0:	f800283a 	ret
   20df4:	423efb44 	addi	r8,r8,-1043
   20df8:	053fffc4 	movi	r20,-1
   20dfc:	a228d83a 	srl	r20,r20,r8
   20e00:	250c703a 	and	r6,r4,r20
   20e04:	303ff226 	beq	r6,zero,20dd0 <floor+0xb8>
   20e08:	01a20034 	movhi	r6,34816
   20e0c:	01df8e34 	movhi	r7,32312
   20e10:	319d6704 	addi	r6,r6,30108
   20e14:	39f90f04 	addi	r7,r7,-7108
   20e18:	00222800 	call	22280 <__adddf3>
   20e1c:	000d883a 	mov	r6,zero
   20e20:	000f883a 	mov	r7,zero
   20e24:	1009883a 	mov	r4,r2
   20e28:	180b883a 	mov	r5,r3
   20e2c:	0022b2c0 	call	22b2c <__gedf2>
   20e30:	00bfe00e 	bge	zero,r2,20db4 <floor+0x9c>
   20e34:	80001c16 	blt	r16,zero,20ea8 <floor+0x190>
   20e38:	0510303a 	nor	r8,zero,r20
   20e3c:	9821883a 	mov	r16,r19
   20e40:	8a22703a 	and	r17,r17,r8
   20e44:	8805883a 	mov	r2,r17
   20e48:	8007883a 	mov	r3,r16
   20e4c:	003fe106 	br	20dd4 <floor+0xbc>
   20e50:	01a20034 	movhi	r6,34816
   20e54:	01df8e34 	movhi	r7,32312
   20e58:	319d6704 	addi	r6,r6,30108
   20e5c:	39f90f04 	addi	r7,r7,-7108
   20e60:	00222800 	call	22280 <__adddf3>
   20e64:	000d883a 	mov	r6,zero
   20e68:	000f883a 	mov	r7,zero
   20e6c:	1009883a 	mov	r4,r2
   20e70:	180b883a 	mov	r5,r3
   20e74:	0022b2c0 	call	22b2c <__gedf2>
   20e78:	00bfce0e 	bge	zero,r2,20db4 <floor+0x9c>
   20e7c:	80001516 	blt	r16,zero,20ed4 <floor+0x1bc>
   20e80:	0023883a 	mov	r17,zero
   20e84:	0021883a 	mov	r16,zero
   20e88:	003fca06 	br	20db4 <floor+0x9c>
   20e8c:	200d883a 	mov	r6,r4
   20e90:	00222800 	call	22280 <__adddf3>
   20e94:	003fcf06 	br	20dd4 <floor+0xbc>
   20e98:	00800434 	movhi	r2,16
   20e9c:	14a5d83a 	sra	r18,r2,r18
   20ea0:	84a7883a 	add	r19,r16,r18
   20ea4:	003fc006 	br	20da8 <floor+0x90>
   20ea8:	00800504 	movi	r2,20
   20eac:	90801326 	beq	r18,r2,20efc <floor+0x1e4>
   20eb0:	00800d04 	movi	r2,52
   20eb4:	14a5c83a 	sub	r18,r2,r18
   20eb8:	00800044 	movi	r2,1
   20ebc:	1484983a 	sll	r2,r2,r18
   20ec0:	1445883a 	add	r2,r2,r17
   20ec4:	14400b2e 	bgeu	r2,r17,20ef4 <floor+0x1dc>
   20ec8:	84c00044 	addi	r19,r16,1
   20ecc:	1023883a 	mov	r17,r2
   20ed0:	003fd906 	br	20e38 <floor+0x120>
   20ed4:	00a00034 	movhi	r2,32768
   20ed8:	10bfffc4 	addi	r2,r2,-1
   20edc:	8084703a 	and	r2,r16,r2
   20ee0:	1462b03a 	or	r17,r2,r17
   20ee4:	883fb326 	beq	r17,zero,20db4 <floor+0x9c>
   20ee8:	0023883a 	mov	r17,zero
   20eec:	042ffc34 	movhi	r16,49136
   20ef0:	003fb006 	br	20db4 <floor+0x9c>
   20ef4:	1023883a 	mov	r17,r2
   20ef8:	003fcf06 	br	20e38 <floor+0x120>
   20efc:	84c00044 	addi	r19,r16,1
   20f00:	003fcd06 	br	20e38 <floor+0x120>

00020f04 <__addsf3>:
   20f04:	defffc04 	addi	sp,sp,-16
   20f08:	2004d7fa 	srli	r2,r4,31
   20f0c:	280cd5fa 	srli	r6,r5,23
   20f10:	dc000015 	stw	r16,0(sp)
   20f14:	00c02034 	movhi	r3,128
   20f18:	2020d5fa 	srli	r16,r4,23
   20f1c:	280ed7fa 	srli	r7,r5,31
   20f20:	18ffffc4 	addi	r3,r3,-1
   20f24:	dc400115 	stw	r17,4(sp)
   20f28:	1908703a 	and	r4,r3,r4
   20f2c:	194a703a 	and	r5,r3,r5
   20f30:	dfc00315 	stw	ra,12(sp)
   20f34:	dc800215 	stw	r18,8(sp)
   20f38:	14403fcc 	andi	r17,r2,255
   20f3c:	84003fcc 	andi	r16,r16,255
   20f40:	200890fa 	slli	r4,r4,3
   20f44:	31803fcc 	andi	r6,r6,255
   20f48:	280a90fa 	slli	r5,r5,3
   20f4c:	89c05026 	beq	r17,r7,21090 <__addsf3+0x18c>
   20f50:	8185c83a 	sub	r2,r16,r6
   20f54:	00807a0e 	bge	zero,r2,21140 <__addsf3+0x23c>
   20f58:	30001e1e 	bne	r6,zero,20fd4 <__addsf3+0xd0>
   20f5c:	28006d1e 	bne	r5,zero,21114 <__addsf3+0x210>
   20f60:	208001cc 	andi	r2,r4,7
   20f64:	10000426 	beq	r2,zero,20f78 <__addsf3+0x74>
   20f68:	208003cc 	andi	r2,r4,15
   20f6c:	00c00104 	movi	r3,4
   20f70:	10c00126 	beq	r2,r3,20f78 <__addsf3+0x74>
   20f74:	20c9883a 	add	r4,r4,r3
   20f78:	2081002c 	andhi	r2,r4,1024
   20f7c:	10003926 	beq	r2,zero,21064 <__addsf3+0x160>
   20f80:	84000044 	addi	r16,r16,1
   20f84:	00803fc4 	movi	r2,255
   20f88:	80807826 	beq	r16,r2,2116c <__addsf3+0x268>
   20f8c:	200891ba 	slli	r4,r4,6
   20f90:	8805883a 	mov	r2,r17
   20f94:	2008d27a 	srli	r4,r4,9
   20f98:	84003fcc 	andi	r16,r16,255
   20f9c:	800695fa 	slli	r3,r16,23
   20fa0:	10803fcc 	andi	r2,r2,255
   20fa4:	04002034 	movhi	r16,128
   20fa8:	843fffc4 	addi	r16,r16,-1
   20fac:	100497fa 	slli	r2,r2,31
   20fb0:	2408703a 	and	r4,r4,r16
   20fb4:	20e0b03a 	or	r16,r4,r3
   20fb8:	8084b03a 	or	r2,r16,r2
   20fbc:	dfc00317 	ldw	ra,12(sp)
   20fc0:	dc800217 	ldw	r18,8(sp)
   20fc4:	dc400117 	ldw	r17,4(sp)
   20fc8:	dc000017 	ldw	r16,0(sp)
   20fcc:	dec00404 	addi	sp,sp,16
   20fd0:	f800283a 	ret
   20fd4:	00c03fc4 	movi	r3,255
   20fd8:	80ffe126 	beq	r16,r3,20f60 <__addsf3+0x5c>
   20fdc:	29410034 	orhi	r5,r5,1024
   20fe0:	00c006c4 	movi	r3,27
   20fe4:	18807516 	blt	r3,r2,211bc <__addsf3+0x2b8>
   20fe8:	00c00804 	movi	r3,32
   20fec:	1887c83a 	sub	r3,r3,r2
   20ff0:	28c6983a 	sll	r3,r5,r3
   20ff4:	288ad83a 	srl	r5,r5,r2
   20ff8:	1804c03a 	cmpne	r2,r3,zero
   20ffc:	288ab03a 	or	r5,r5,r2
   21000:	2149c83a 	sub	r4,r4,r5
   21004:	2081002c 	andhi	r2,r4,1024
   21008:	10001426 	beq	r2,zero,2105c <__addsf3+0x158>
   2100c:	04810034 	movhi	r18,1024
   21010:	94bfffc4 	addi	r18,r18,-1
   21014:	24a4703a 	and	r18,r4,r18
   21018:	9009883a 	mov	r4,r18
   2101c:	0022d980 	call	22d98 <__clzsi2>
   21020:	10bffec4 	addi	r2,r2,-5
   21024:	90a4983a 	sll	r18,r18,r2
   21028:	14005416 	blt	r2,r16,2117c <__addsf3+0x278>
   2102c:	1405c83a 	sub	r2,r2,r16
   21030:	11000044 	addi	r4,r2,1
   21034:	00800804 	movi	r2,32
   21038:	1105c83a 	sub	r2,r2,r4
   2103c:	9084983a 	sll	r2,r18,r2
   21040:	9124d83a 	srl	r18,r18,r4
   21044:	0021883a 	mov	r16,zero
   21048:	1008c03a 	cmpne	r4,r2,zero
   2104c:	9108b03a 	or	r4,r18,r4
   21050:	003fc306 	br	20f60 <__addsf3+0x5c>
   21054:	1000db26 	beq	r2,zero,213c4 <__addsf3+0x4c0>
   21058:	1009883a 	mov	r4,r2
   2105c:	208001cc 	andi	r2,r4,7
   21060:	103fc11e 	bne	r2,zero,20f68 <__addsf3+0x64>
   21064:	2006d0fa 	srli	r3,r4,3
   21068:	01003fc4 	movi	r4,255
   2106c:	8805883a 	mov	r2,r17
   21070:	8100241e 	bne	r16,r4,21104 <__addsf3+0x200>
   21074:	18006e26 	beq	r3,zero,21230 <__addsf3+0x32c>
   21078:	19001034 	orhi	r4,r3,64
   2107c:	00c02034 	movhi	r3,128
   21080:	18ffffc4 	addi	r3,r3,-1
   21084:	043fffc4 	movi	r16,-1
   21088:	20c8703a 	and	r4,r4,r3
   2108c:	003fc206 	br	20f98 <__addsf3+0x94>
   21090:	8187c83a 	sub	r3,r16,r6
   21094:	00c03e0e 	bge	zero,r3,21190 <__addsf3+0x28c>
   21098:	30002326 	beq	r6,zero,21128 <__addsf3+0x224>
   2109c:	01803fc4 	movi	r6,255
   210a0:	81bfaf26 	beq	r16,r6,20f60 <__addsf3+0x5c>
   210a4:	29410034 	orhi	r5,r5,1024
   210a8:	018006c4 	movi	r6,27
   210ac:	30c07416 	blt	r6,r3,21280 <__addsf3+0x37c>
   210b0:	01800804 	movi	r6,32
   210b4:	30cdc83a 	sub	r6,r6,r3
   210b8:	298c983a 	sll	r6,r5,r6
   210bc:	28cad83a 	srl	r5,r5,r3
   210c0:	3006c03a 	cmpne	r3,r6,zero
   210c4:	28cab03a 	or	r5,r5,r3
   210c8:	2149883a 	add	r4,r4,r5
   210cc:	20c1002c 	andhi	r3,r4,1024
   210d0:	183fe226 	beq	r3,zero,2105c <__addsf3+0x158>
   210d4:	84000044 	addi	r16,r16,1
   210d8:	00c03fc4 	movi	r3,255
   210dc:	80c05426 	beq	r16,r3,21230 <__addsf3+0x32c>
   210e0:	00bf0034 	movhi	r2,64512
   210e4:	10bfffc4 	addi	r2,r2,-1
   210e8:	20c0004c 	andi	r3,r4,1
   210ec:	2088703a 	and	r4,r4,r2
   210f0:	2008d07a 	srli	r4,r4,1
   210f4:	20c8b03a 	or	r4,r4,r3
   210f8:	003f9906 	br	20f60 <__addsf3+0x5c>
   210fc:	0007883a 	mov	r3,zero
   21100:	0005883a 	mov	r2,zero
   21104:	01002034 	movhi	r4,128
   21108:	213fffc4 	addi	r4,r4,-1
   2110c:	1908703a 	and	r4,r3,r4
   21110:	003fa106 	br	20f98 <__addsf3+0x94>
   21114:	10bfffc4 	addi	r2,r2,-1
   21118:	103fb926 	beq	r2,zero,21000 <__addsf3+0xfc>
   2111c:	00c03fc4 	movi	r3,255
   21120:	80ffaf1e 	bne	r16,r3,20fe0 <__addsf3+0xdc>
   21124:	003f8e06 	br	20f60 <__addsf3+0x5c>
   21128:	283f8d26 	beq	r5,zero,20f60 <__addsf3+0x5c>
   2112c:	18ffffc4 	addi	r3,r3,-1
   21130:	183fe526 	beq	r3,zero,210c8 <__addsf3+0x1c4>
   21134:	01803fc4 	movi	r6,255
   21138:	81bfdb1e 	bne	r16,r6,210a8 <__addsf3+0x1a4>
   2113c:	003f8806 	br	20f60 <__addsf3+0x5c>
   21140:	1000201e 	bne	r2,zero,211c4 <__addsf3+0x2c0>
   21144:	80800044 	addi	r2,r16,1
   21148:	10803fcc 	andi	r2,r2,255
   2114c:	01800044 	movi	r6,1
   21150:	3080450e 	bge	r6,r2,21268 <__addsf3+0x364>
   21154:	2165c83a 	sub	r18,r4,r5
   21158:	90c1002c 	andhi	r3,r18,1024
   2115c:	18002b26 	beq	r3,zero,2120c <__addsf3+0x308>
   21160:	2925c83a 	sub	r18,r5,r4
   21164:	3823883a 	mov	r17,r7
   21168:	003fab06 	br	21018 <__addsf3+0x114>
   2116c:	8805883a 	mov	r2,r17
   21170:	043fffc4 	movi	r16,-1
   21174:	0009883a 	mov	r4,zero
   21178:	003f8706 	br	20f98 <__addsf3+0x94>
   2117c:	013f0034 	movhi	r4,64512
   21180:	213fffc4 	addi	r4,r4,-1
   21184:	80a1c83a 	sub	r16,r16,r2
   21188:	9108703a 	and	r4,r18,r4
   2118c:	003f7406 	br	20f60 <__addsf3+0x5c>
   21190:	1800411e 	bne	r3,zero,21298 <__addsf3+0x394>
   21194:	80c00044 	addi	r3,r16,1
   21198:	19c03fcc 	andi	r7,r3,255
   2119c:	01800044 	movi	r6,1
   211a0:	31c0260e 	bge	r6,r7,2123c <__addsf3+0x338>
   211a4:	01803fc4 	movi	r6,255
   211a8:	19802126 	beq	r3,r6,21230 <__addsf3+0x32c>
   211ac:	2149883a 	add	r4,r4,r5
   211b0:	2008d07a 	srli	r4,r4,1
   211b4:	1821883a 	mov	r16,r3
   211b8:	003f6906 	br	20f60 <__addsf3+0x5c>
   211bc:	01400044 	movi	r5,1
   211c0:	003f8f06 	br	21000 <__addsf3+0xfc>
   211c4:	8000151e 	bne	r16,zero,2121c <__addsf3+0x318>
   211c8:	20002f26 	beq	r4,zero,21288 <__addsf3+0x384>
   211cc:	0084303a 	nor	r2,zero,r2
   211d0:	10000a26 	beq	r2,zero,211fc <__addsf3+0x2f8>
   211d4:	00c03fc4 	movi	r3,255
   211d8:	30c02b26 	beq	r6,r3,21288 <__addsf3+0x384>
   211dc:	00c006c4 	movi	r3,27
   211e0:	18806d16 	blt	r3,r2,21398 <__addsf3+0x494>
   211e4:	00c00804 	movi	r3,32
   211e8:	1887c83a 	sub	r3,r3,r2
   211ec:	20c6983a 	sll	r3,r4,r3
   211f0:	2084d83a 	srl	r2,r4,r2
   211f4:	1808c03a 	cmpne	r4,r3,zero
   211f8:	1108b03a 	or	r4,r2,r4
   211fc:	2909c83a 	sub	r4,r5,r4
   21200:	3021883a 	mov	r16,r6
   21204:	3823883a 	mov	r17,r7
   21208:	003f7e06 	br	21004 <__addsf3+0x100>
   2120c:	903f821e 	bne	r18,zero,21018 <__addsf3+0x114>
   21210:	0005883a 	mov	r2,zero
   21214:	0021883a 	mov	r16,zero
   21218:	003fba06 	br	21104 <__addsf3+0x200>
   2121c:	00c03fc4 	movi	r3,255
   21220:	30c01926 	beq	r6,r3,21288 <__addsf3+0x384>
   21224:	0085c83a 	sub	r2,zero,r2
   21228:	21010034 	orhi	r4,r4,1024
   2122c:	003feb06 	br	211dc <__addsf3+0x2d8>
   21230:	043fffc4 	movi	r16,-1
   21234:	0009883a 	mov	r4,zero
   21238:	003f5706 	br	20f98 <__addsf3+0x94>
   2123c:	80004a1e 	bne	r16,zero,21368 <__addsf3+0x464>
   21240:	20005926 	beq	r4,zero,213a8 <__addsf3+0x4a4>
   21244:	283f4626 	beq	r5,zero,20f60 <__addsf3+0x5c>
   21248:	2149883a 	add	r4,r4,r5
   2124c:	2081002c 	andhi	r2,r4,1024
   21250:	103f8226 	beq	r2,zero,2105c <__addsf3+0x158>
   21254:	00bf0034 	movhi	r2,64512
   21258:	10bfffc4 	addi	r2,r2,-1
   2125c:	3021883a 	mov	r16,r6
   21260:	2088703a 	and	r4,r4,r2
   21264:	003f3e06 	br	20f60 <__addsf3+0x5c>
   21268:	8000121e 	bne	r16,zero,212b4 <__addsf3+0x3b0>
   2126c:	2000261e 	bne	r4,zero,21308 <__addsf3+0x404>
   21270:	283fa226 	beq	r5,zero,210fc <__addsf3+0x1f8>
   21274:	2809883a 	mov	r4,r5
   21278:	3823883a 	mov	r17,r7
   2127c:	003f3806 	br	20f60 <__addsf3+0x5c>
   21280:	01400044 	movi	r5,1
   21284:	003f9006 	br	210c8 <__addsf3+0x1c4>
   21288:	2809883a 	mov	r4,r5
   2128c:	3021883a 	mov	r16,r6
   21290:	3823883a 	mov	r17,r7
   21294:	003f3206 	br	20f60 <__addsf3+0x5c>
   21298:	80000c1e 	bne	r16,zero,212cc <__addsf3+0x3c8>
   2129c:	20002f26 	beq	r4,zero,2135c <__addsf3+0x458>
   212a0:	00c6303a 	nor	r3,zero,r3
   212a4:	18002b1e 	bne	r3,zero,21354 <__addsf3+0x450>
   212a8:	2149883a 	add	r4,r4,r5
   212ac:	3021883a 	mov	r16,r6
   212b0:	003f8606 	br	210cc <__addsf3+0x1c8>
   212b4:	20001b1e 	bne	r4,zero,21324 <__addsf3+0x420>
   212b8:	28003926 	beq	r5,zero,213a0 <__addsf3+0x49c>
   212bc:	2809883a 	mov	r4,r5
   212c0:	3823883a 	mov	r17,r7
   212c4:	04003fc4 	movi	r16,255
   212c8:	003f2506 	br	20f60 <__addsf3+0x5c>
   212cc:	01c03fc4 	movi	r7,255
   212d0:	31c02226 	beq	r6,r7,2135c <__addsf3+0x458>
   212d4:	00c7c83a 	sub	r3,zero,r3
   212d8:	21010034 	orhi	r4,r4,1024
   212dc:	01c006c4 	movi	r7,27
   212e0:	38c03616 	blt	r7,r3,213bc <__addsf3+0x4b8>
   212e4:	01c00804 	movi	r7,32
   212e8:	38cfc83a 	sub	r7,r7,r3
   212ec:	21ce983a 	sll	r7,r4,r7
   212f0:	20c6d83a 	srl	r3,r4,r3
   212f4:	3808c03a 	cmpne	r4,r7,zero
   212f8:	1906b03a 	or	r3,r3,r4
   212fc:	1949883a 	add	r4,r3,r5
   21300:	3021883a 	mov	r16,r6
   21304:	003f7106 	br	210cc <__addsf3+0x1c8>
   21308:	283f1526 	beq	r5,zero,20f60 <__addsf3+0x5c>
   2130c:	2145c83a 	sub	r2,r4,r5
   21310:	10c1002c 	andhi	r3,r2,1024
   21314:	183f4f26 	beq	r3,zero,21054 <__addsf3+0x150>
   21318:	2909c83a 	sub	r4,r5,r4
   2131c:	3823883a 	mov	r17,r7
   21320:	003f0f06 	br	20f60 <__addsf3+0x5c>
   21324:	28001a26 	beq	r5,zero,21390 <__addsf3+0x48c>
   21328:	2008d0fa 	srli	r4,r4,3
   2132c:	2080102c 	andhi	r2,r4,64
   21330:	10000526 	beq	r2,zero,21348 <__addsf3+0x444>
   21334:	280ad0fa 	srli	r5,r5,3
   21338:	2880102c 	andhi	r2,r5,64
   2133c:	1000021e 	bne	r2,zero,21348 <__addsf3+0x444>
   21340:	2809883a 	mov	r4,r5
   21344:	3823883a 	mov	r17,r7
   21348:	200890fa 	slli	r4,r4,3
   2134c:	04003fc4 	movi	r16,255
   21350:	003f0306 	br	20f60 <__addsf3+0x5c>
   21354:	01c03fc4 	movi	r7,255
   21358:	31ffe01e 	bne	r6,r7,212dc <__addsf3+0x3d8>
   2135c:	2809883a 	mov	r4,r5
   21360:	3021883a 	mov	r16,r6
   21364:	003efe06 	br	20f60 <__addsf3+0x5c>
   21368:	20001126 	beq	r4,zero,213b0 <__addsf3+0x4ac>
   2136c:	28000826 	beq	r5,zero,21390 <__addsf3+0x48c>
   21370:	2008d0fa 	srli	r4,r4,3
   21374:	2080102c 	andhi	r2,r4,64
   21378:	103ff326 	beq	r2,zero,21348 <__addsf3+0x444>
   2137c:	280ad0fa 	srli	r5,r5,3
   21380:	2880102c 	andhi	r2,r5,64
   21384:	103ff01e 	bne	r2,zero,21348 <__addsf3+0x444>
   21388:	2809883a 	mov	r4,r5
   2138c:	003fee06 	br	21348 <__addsf3+0x444>
   21390:	04003fc4 	movi	r16,255
   21394:	003ef206 	br	20f60 <__addsf3+0x5c>
   21398:	01000044 	movi	r4,1
   2139c:	003f9706 	br	211fc <__addsf3+0x2f8>
   213a0:	0005883a 	mov	r2,zero
   213a4:	003f3406 	br	21078 <__addsf3+0x174>
   213a8:	2809883a 	mov	r4,r5
   213ac:	003eec06 	br	20f60 <__addsf3+0x5c>
   213b0:	2809883a 	mov	r4,r5
   213b4:	04003fc4 	movi	r16,255
   213b8:	003ee906 	br	20f60 <__addsf3+0x5c>
   213bc:	00c00044 	movi	r3,1
   213c0:	003fce06 	br	212fc <__addsf3+0x3f8>
   213c4:	0005883a 	mov	r2,zero
   213c8:	003f4e06 	br	21104 <__addsf3+0x200>

000213cc <__divsf3>:
   213cc:	defff504 	addi	sp,sp,-44
   213d0:	200cd5fa 	srli	r6,r4,23
   213d4:	dcc00415 	stw	r19,16(sp)
   213d8:	2026d7fa 	srli	r19,r4,31
   213dc:	00c02034 	movhi	r3,128
   213e0:	dd800715 	stw	r22,28(sp)
   213e4:	dd000515 	stw	r20,20(sp)
   213e8:	dc800315 	stw	r18,12(sp)
   213ec:	18ffffc4 	addi	r3,r3,-1
   213f0:	dfc00a15 	stw	ra,40(sp)
   213f4:	df000915 	stw	fp,36(sp)
   213f8:	ddc00815 	stw	r23,32(sp)
   213fc:	dd400615 	stw	r21,24(sp)
   21400:	dc400215 	stw	r17,8(sp)
   21404:	dc000115 	stw	r16,4(sp)
   21408:	35003fcc 	andi	r20,r6,255
   2140c:	1924703a 	and	r18,r3,r4
   21410:	9d803fcc 	andi	r22,r19,255
   21414:	a0005226 	beq	r20,zero,21560 <__divsf3+0x194>
   21418:	00803fc4 	movi	r2,255
   2141c:	a0802e26 	beq	r20,r2,214d8 <__divsf3+0x10c>
   21420:	91002034 	orhi	r4,r18,128
   21424:	202490fa 	slli	r18,r4,3
   21428:	a53fe044 	addi	r20,r20,-127
   2142c:	0021883a 	mov	r16,zero
   21430:	002f883a 	mov	r23,zero
   21434:	280cd5fa 	srli	r6,r5,23
   21438:	282ad7fa 	srli	r21,r5,31
   2143c:	00c02034 	movhi	r3,128
   21440:	18ffffc4 	addi	r3,r3,-1
   21444:	31803fcc 	andi	r6,r6,255
   21448:	1962703a 	and	r17,r3,r5
   2144c:	af003fcc 	andi	fp,r21,255
   21450:	30004a26 	beq	r6,zero,2157c <__divsf3+0x1b0>
   21454:	00803fc4 	movi	r2,255
   21458:	30804526 	beq	r6,r2,21570 <__divsf3+0x1a4>
   2145c:	89402034 	orhi	r5,r17,128
   21460:	282290fa 	slli	r17,r5,3
   21464:	31bfe044 	addi	r6,r6,-127
   21468:	000b883a 	mov	r5,zero
   2146c:	2c20b03a 	or	r16,r5,r16
   21470:	802090ba 	slli	r16,r16,2
   21474:	008000b4 	movhi	r2,2
   21478:	10852604 	addi	r2,r2,5272
   2147c:	80a1883a 	add	r16,r16,r2
   21480:	81000017 	ldw	r4,0(r16)
   21484:	9d46f03a 	xor	r3,r19,r21
   21488:	180f883a 	mov	r7,r3
   2148c:	18803fcc 	andi	r2,r3,255
   21490:	a18dc83a 	sub	r6,r20,r6
   21494:	2000683a 	jmp	r4
   21498:	0002167c 	xorhi	zero,zero,2137
   2149c:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   214a0:	00021670 	cmpltui	zero,zero,2137
   214a4:	000214ec 	andhi	zero,zero,2131
   214a8:	00021670 	cmpltui	zero,zero,2137
   214ac:	00021648 	cmpgei	zero,zero,2137
   214b0:	00021670 	cmpltui	zero,zero,2137
   214b4:	000214ec 	andhi	zero,zero,2131
   214b8:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   214bc:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   214c0:	00021648 	cmpgei	zero,zero,2137
   214c4:	000214ec 	andhi	zero,zero,2131
   214c8:	0002175c 	xori	zero,zero,2141
   214cc:	0002175c 	xori	zero,zero,2141
   214d0:	0002175c 	xori	zero,zero,2141
   214d4:	00021710 	cmplti	zero,zero,2140
   214d8:	9000581e 	bne	r18,zero,2163c <__divsf3+0x270>
   214dc:	04000204 	movi	r16,8
   214e0:	05c00084 	movi	r23,2
   214e4:	003fd306 	br	21434 <__divsf3+0x68>
   214e8:	0023883a 	mov	r17,zero
   214ec:	e02d883a 	mov	r22,fp
   214f0:	282f883a 	mov	r23,r5
   214f4:	00800084 	movi	r2,2
   214f8:	b8808f1e 	bne	r23,r2,21738 <__divsf3+0x36c>
   214fc:	b005883a 	mov	r2,r22
   21500:	11c0004c 	andi	r7,r2,1
   21504:	013fffc4 	movi	r4,-1
   21508:	000d883a 	mov	r6,zero
   2150c:	21003fcc 	andi	r4,r4,255
   21510:	200895fa 	slli	r4,r4,23
   21514:	38803fcc 	andi	r2,r7,255
   21518:	00c02034 	movhi	r3,128
   2151c:	100497fa 	slli	r2,r2,31
   21520:	18ffffc4 	addi	r3,r3,-1
   21524:	30c6703a 	and	r3,r6,r3
   21528:	1906b03a 	or	r3,r3,r4
   2152c:	1884b03a 	or	r2,r3,r2
   21530:	dfc00a17 	ldw	ra,40(sp)
   21534:	df000917 	ldw	fp,36(sp)
   21538:	ddc00817 	ldw	r23,32(sp)
   2153c:	dd800717 	ldw	r22,28(sp)
   21540:	dd400617 	ldw	r21,24(sp)
   21544:	dd000517 	ldw	r20,20(sp)
   21548:	dcc00417 	ldw	r19,16(sp)
   2154c:	dc800317 	ldw	r18,12(sp)
   21550:	dc400217 	ldw	r17,8(sp)
   21554:	dc000117 	ldw	r16,4(sp)
   21558:	dec00b04 	addi	sp,sp,44
   2155c:	f800283a 	ret
   21560:	90002b1e 	bne	r18,zero,21610 <__divsf3+0x244>
   21564:	04000104 	movi	r16,4
   21568:	05c00044 	movi	r23,1
   2156c:	003fb106 	br	21434 <__divsf3+0x68>
   21570:	8800251e 	bne	r17,zero,21608 <__divsf3+0x23c>
   21574:	01400084 	movi	r5,2
   21578:	00000206 	br	21584 <__divsf3+0x1b8>
   2157c:	88001a1e 	bne	r17,zero,215e8 <__divsf3+0x21c>
   21580:	01400044 	movi	r5,1
   21584:	8160b03a 	or	r16,r16,r5
   21588:	802090ba 	slli	r16,r16,2
   2158c:	00c000b4 	movhi	r3,2
   21590:	18c56a04 	addi	r3,r3,5544
   21594:	80e1883a 	add	r16,r16,r3
   21598:	80c00017 	ldw	r3,0(r16)
   2159c:	9d44f03a 	xor	r2,r19,r21
   215a0:	a18dc83a 	sub	r6,r20,r6
   215a4:	1800683a 	jmp	r3
   215a8:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   215ac:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   215b0:	0002174c 	andi	zero,zero,2141
   215b4:	000214e8 	cmpgeui	zero,zero,2131
   215b8:	0002174c 	andi	zero,zero,2141
   215bc:	00021648 	cmpgei	zero,zero,2137
   215c0:	0002174c 	andi	zero,zero,2141
   215c4:	000214e8 	cmpgeui	zero,zero,2131
   215c8:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   215cc:	00021500 	call	2150 <__alt_mem_MEMOIRE_ONCHIP-0x1deb0>
   215d0:	00021648 	cmpgei	zero,zero,2137
   215d4:	000214e8 	cmpgeui	zero,zero,2131
   215d8:	0002175c 	xori	zero,zero,2141
   215dc:	0002175c 	xori	zero,zero,2141
   215e0:	0002175c 	xori	zero,zero,2141
   215e4:	00021774 	movhi	zero,2141
   215e8:	8809883a 	mov	r4,r17
   215ec:	0022d980 	call	22d98 <__clzsi2>
   215f0:	10fffec4 	addi	r3,r2,-5
   215f4:	10801d84 	addi	r2,r2,118
   215f8:	88e2983a 	sll	r17,r17,r3
   215fc:	008dc83a 	sub	r6,zero,r2
   21600:	000b883a 	mov	r5,zero
   21604:	003f9906 	br	2146c <__divsf3+0xa0>
   21608:	014000c4 	movi	r5,3
   2160c:	003f9706 	br	2146c <__divsf3+0xa0>
   21610:	9009883a 	mov	r4,r18
   21614:	d9400015 	stw	r5,0(sp)
   21618:	0022d980 	call	22d98 <__clzsi2>
   2161c:	10fffec4 	addi	r3,r2,-5
   21620:	11801d84 	addi	r6,r2,118
   21624:	90e4983a 	sll	r18,r18,r3
   21628:	01a9c83a 	sub	r20,zero,r6
   2162c:	0021883a 	mov	r16,zero
   21630:	002f883a 	mov	r23,zero
   21634:	d9400017 	ldw	r5,0(sp)
   21638:	003f7e06 	br	21434 <__divsf3+0x68>
   2163c:	04000304 	movi	r16,12
   21640:	05c000c4 	movi	r23,3
   21644:	003f7b06 	br	21434 <__divsf3+0x68>
   21648:	01802034 	movhi	r6,128
   2164c:	000f883a 	mov	r7,zero
   21650:	31bfffc4 	addi	r6,r6,-1
   21654:	013fffc4 	movi	r4,-1
   21658:	003fac06 	br	2150c <__divsf3+0x140>
   2165c:	01400044 	movi	r5,1
   21660:	2909c83a 	sub	r4,r5,r4
   21664:	00c006c4 	movi	r3,27
   21668:	19004b0e 	bge	r3,r4,21798 <__divsf3+0x3cc>
   2166c:	114e703a 	and	r7,r2,r5
   21670:	0009883a 	mov	r4,zero
   21674:	000d883a 	mov	r6,zero
   21678:	003fa406 	br	2150c <__divsf3+0x140>
   2167c:	9006917a 	slli	r3,r18,5
   21680:	8822917a 	slli	r17,r17,5
   21684:	1c40372e 	bgeu	r3,r17,21764 <__divsf3+0x398>
   21688:	31bfffc4 	addi	r6,r6,-1
   2168c:	010006c4 	movi	r4,27
   21690:	000b883a 	mov	r5,zero
   21694:	180f883a 	mov	r7,r3
   21698:	294b883a 	add	r5,r5,r5
   2169c:	18c7883a 	add	r3,r3,r3
   216a0:	38000116 	blt	r7,zero,216a8 <__divsf3+0x2dc>
   216a4:	1c400236 	bltu	r3,r17,216b0 <__divsf3+0x2e4>
   216a8:	1c47c83a 	sub	r3,r3,r17
   216ac:	29400054 	ori	r5,r5,1
   216b0:	213fffc4 	addi	r4,r4,-1
   216b4:	203ff71e 	bne	r4,zero,21694 <__divsf3+0x2c8>
   216b8:	1806c03a 	cmpne	r3,r3,zero
   216bc:	1962b03a 	or	r17,r3,r5
   216c0:	31001fc4 	addi	r4,r6,127
   216c4:	013fe50e 	bge	zero,r4,2165c <__divsf3+0x290>
   216c8:	88c001cc 	andi	r3,r17,7
   216cc:	18000426 	beq	r3,zero,216e0 <__divsf3+0x314>
   216d0:	88c003cc 	andi	r3,r17,15
   216d4:	01400104 	movi	r5,4
   216d8:	19400126 	beq	r3,r5,216e0 <__divsf3+0x314>
   216dc:	8963883a 	add	r17,r17,r5
   216e0:	88c2002c 	andhi	r3,r17,2048
   216e4:	18000426 	beq	r3,zero,216f8 <__divsf3+0x32c>
   216e8:	00fe0034 	movhi	r3,63488
   216ec:	18ffffc4 	addi	r3,r3,-1
   216f0:	31002004 	addi	r4,r6,128
   216f4:	88e2703a 	and	r17,r17,r3
   216f8:	00c03f84 	movi	r3,254
   216fc:	193f8016 	blt	r3,r4,21500 <__divsf3+0x134>
   21700:	880c91ba 	slli	r6,r17,6
   21704:	11c0004c 	andi	r7,r2,1
   21708:	300cd27a 	srli	r6,r6,9
   2170c:	003f7f06 	br	2150c <__divsf3+0x140>
   21710:	9080102c 	andhi	r2,r18,64
   21714:	10000226 	beq	r2,zero,21720 <__divsf3+0x354>
   21718:	8880102c 	andhi	r2,r17,64
   2171c:	10001826 	beq	r2,zero,21780 <__divsf3+0x3b4>
   21720:	00802034 	movhi	r2,128
   21724:	91801034 	orhi	r6,r18,64
   21728:	10bfffc4 	addi	r2,r2,-1
   2172c:	980f883a 	mov	r7,r19
   21730:	308c703a 	and	r6,r6,r2
   21734:	003fc706 	br	21654 <__divsf3+0x288>
   21738:	008000c4 	movi	r2,3
   2173c:	b8802d26 	beq	r23,r2,217f4 <__divsf3+0x428>
   21740:	00c00044 	movi	r3,1
   21744:	b005883a 	mov	r2,r22
   21748:	b8ffdd1e 	bne	r23,r3,216c0 <__divsf3+0x2f4>
   2174c:	11c0004c 	andi	r7,r2,1
   21750:	0009883a 	mov	r4,zero
   21754:	000d883a 	mov	r6,zero
   21758:	003f6c06 	br	2150c <__divsf3+0x140>
   2175c:	9023883a 	mov	r17,r18
   21760:	003f6406 	br	214f4 <__divsf3+0x128>
   21764:	1c47c83a 	sub	r3,r3,r17
   21768:	01000684 	movi	r4,26
   2176c:	01400044 	movi	r5,1
   21770:	003fc806 	br	21694 <__divsf3+0x2c8>
   21774:	9080102c 	andhi	r2,r18,64
   21778:	103fe926 	beq	r2,zero,21720 <__divsf3+0x354>
   2177c:	0023883a 	mov	r17,zero
   21780:	00802034 	movhi	r2,128
   21784:	89801034 	orhi	r6,r17,64
   21788:	10bfffc4 	addi	r2,r2,-1
   2178c:	a80f883a 	mov	r7,r21
   21790:	308c703a 	and	r6,r6,r2
   21794:	003faf06 	br	21654 <__divsf3+0x288>
   21798:	01c00804 	movi	r7,32
   2179c:	390fc83a 	sub	r7,r7,r4
   217a0:	89ce983a 	sll	r7,r17,r7
   217a4:	890ad83a 	srl	r5,r17,r4
   217a8:	380ec03a 	cmpne	r7,r7,zero
   217ac:	29cab03a 	or	r5,r5,r7
   217b0:	28c001cc 	andi	r3,r5,7
   217b4:	18000426 	beq	r3,zero,217c8 <__divsf3+0x3fc>
   217b8:	28c003cc 	andi	r3,r5,15
   217bc:	01000104 	movi	r4,4
   217c0:	19000126 	beq	r3,r4,217c8 <__divsf3+0x3fc>
   217c4:	290b883a 	add	r5,r5,r4
   217c8:	28c1002c 	andhi	r3,r5,1024
   217cc:	18000426 	beq	r3,zero,217e0 <__divsf3+0x414>
   217d0:	11c0004c 	andi	r7,r2,1
   217d4:	01000044 	movi	r4,1
   217d8:	000d883a 	mov	r6,zero
   217dc:	003f4b06 	br	2150c <__divsf3+0x140>
   217e0:	280a91ba 	slli	r5,r5,6
   217e4:	11c0004c 	andi	r7,r2,1
   217e8:	0009883a 	mov	r4,zero
   217ec:	280cd27a 	srli	r6,r5,9
   217f0:	003f4606 	br	2150c <__divsf3+0x140>
   217f4:	00802034 	movhi	r2,128
   217f8:	89801034 	orhi	r6,r17,64
   217fc:	10bfffc4 	addi	r2,r2,-1
   21800:	b00f883a 	mov	r7,r22
   21804:	308c703a 	and	r6,r6,r2
   21808:	003f9206 	br	21654 <__divsf3+0x288>

0002180c <__mulsf3>:
   2180c:	defff504 	addi	sp,sp,-44
   21810:	dc000115 	stw	r16,4(sp)
   21814:	2020d5fa 	srli	r16,r4,23
   21818:	dd400615 	stw	r21,24(sp)
   2181c:	202ad7fa 	srli	r21,r4,31
   21820:	dc800315 	stw	r18,12(sp)
   21824:	04802034 	movhi	r18,128
   21828:	df000915 	stw	fp,36(sp)
   2182c:	dd000515 	stw	r20,20(sp)
   21830:	94bfffc4 	addi	r18,r18,-1
   21834:	dfc00a15 	stw	ra,40(sp)
   21838:	ddc00815 	stw	r23,32(sp)
   2183c:	dd800715 	stw	r22,28(sp)
   21840:	dcc00415 	stw	r19,16(sp)
   21844:	dc400215 	stw	r17,8(sp)
   21848:	84003fcc 	andi	r16,r16,255
   2184c:	9124703a 	and	r18,r18,r4
   21850:	a829883a 	mov	r20,r21
   21854:	af003fcc 	andi	fp,r21,255
   21858:	80005426 	beq	r16,zero,219ac <__mulsf3+0x1a0>
   2185c:	00803fc4 	movi	r2,255
   21860:	80802f26 	beq	r16,r2,21920 <__mulsf3+0x114>
   21864:	91002034 	orhi	r4,r18,128
   21868:	202490fa 	slli	r18,r4,3
   2186c:	843fe044 	addi	r16,r16,-127
   21870:	0023883a 	mov	r17,zero
   21874:	002f883a 	mov	r23,zero
   21878:	2804d5fa 	srli	r2,r5,23
   2187c:	282cd7fa 	srli	r22,r5,31
   21880:	01002034 	movhi	r4,128
   21884:	213fffc4 	addi	r4,r4,-1
   21888:	10803fcc 	andi	r2,r2,255
   2188c:	2166703a 	and	r19,r4,r5
   21890:	b1803fcc 	andi	r6,r22,255
   21894:	10004c26 	beq	r2,zero,219c8 <__mulsf3+0x1bc>
   21898:	00c03fc4 	movi	r3,255
   2189c:	10c04726 	beq	r2,r3,219bc <__mulsf3+0x1b0>
   218a0:	99002034 	orhi	r4,r19,128
   218a4:	202690fa 	slli	r19,r4,3
   218a8:	10bfe044 	addi	r2,r2,-127
   218ac:	0007883a 	mov	r3,zero
   218b0:	80a1883a 	add	r16,r16,r2
   218b4:	010003c4 	movi	r4,15
   218b8:	1c44b03a 	or	r2,r3,r17
   218bc:	b56af03a 	xor	r21,r22,r21
   218c0:	81c00044 	addi	r7,r16,1
   218c4:	20806b36 	bltu	r4,r2,21a74 <__mulsf3+0x268>
   218c8:	100490ba 	slli	r2,r2,2
   218cc:	010000b4 	movhi	r4,2
   218d0:	21063804 	addi	r4,r4,6368
   218d4:	1105883a 	add	r2,r2,r4
   218d8:	10800017 	ldw	r2,0(r2)
   218dc:	1000683a 	jmp	r2
   218e0:	00021a74 	movhi	zero,2153
   218e4:	00021934 	movhi	zero,2148
   218e8:	00021934 	movhi	zero,2148
   218ec:	00021930 	cmpltui	zero,zero,2148
   218f0:	00021a58 	cmpnei	zero,zero,2153
   218f4:	00021a58 	cmpnei	zero,zero,2153
   218f8:	00021a44 	movi	zero,2153
   218fc:	00021930 	cmpltui	zero,zero,2148
   21900:	00021a58 	cmpnei	zero,zero,2153
   21904:	00021a44 	movi	zero,2153
   21908:	00021a58 	cmpnei	zero,zero,2153
   2190c:	00021930 	cmpltui	zero,zero,2148
   21910:	00021a64 	muli	zero,zero,2153
   21914:	00021a64 	muli	zero,zero,2153
   21918:	00021a64 	muli	zero,zero,2153
   2191c:	00021b40 	call	21b4 <__alt_mem_MEMOIRE_ONCHIP-0x1de4c>
   21920:	90003b1e 	bne	r18,zero,21a10 <__mulsf3+0x204>
   21924:	04400204 	movi	r17,8
   21928:	05c00084 	movi	r23,2
   2192c:	003fd206 	br	21878 <__mulsf3+0x6c>
   21930:	302b883a 	mov	r21,r6
   21934:	00800084 	movi	r2,2
   21938:	18802626 	beq	r3,r2,219d4 <__mulsf3+0x1c8>
   2193c:	008000c4 	movi	r2,3
   21940:	1880ab26 	beq	r3,r2,21bf0 <__mulsf3+0x3e4>
   21944:	00800044 	movi	r2,1
   21948:	1880a21e 	bne	r3,r2,21bd4 <__mulsf3+0x3c8>
   2194c:	a829883a 	mov	r20,r21
   21950:	0007883a 	mov	r3,zero
   21954:	0009883a 	mov	r4,zero
   21958:	18803fcc 	andi	r2,r3,255
   2195c:	100695fa 	slli	r3,r2,23
   21960:	a0803fcc 	andi	r2,r20,255
   21964:	100a97fa 	slli	r5,r2,31
   21968:	00802034 	movhi	r2,128
   2196c:	10bfffc4 	addi	r2,r2,-1
   21970:	2084703a 	and	r2,r4,r2
   21974:	10c4b03a 	or	r2,r2,r3
   21978:	1144b03a 	or	r2,r2,r5
   2197c:	dfc00a17 	ldw	ra,40(sp)
   21980:	df000917 	ldw	fp,36(sp)
   21984:	ddc00817 	ldw	r23,32(sp)
   21988:	dd800717 	ldw	r22,28(sp)
   2198c:	dd400617 	ldw	r21,24(sp)
   21990:	dd000517 	ldw	r20,20(sp)
   21994:	dcc00417 	ldw	r19,16(sp)
   21998:	dc800317 	ldw	r18,12(sp)
   2199c:	dc400217 	ldw	r17,8(sp)
   219a0:	dc000117 	ldw	r16,4(sp)
   219a4:	dec00b04 	addi	sp,sp,44
   219a8:	f800283a 	ret
   219ac:	90000d1e 	bne	r18,zero,219e4 <__mulsf3+0x1d8>
   219b0:	04400104 	movi	r17,4
   219b4:	05c00044 	movi	r23,1
   219b8:	003faf06 	br	21878 <__mulsf3+0x6c>
   219bc:	9806c03a 	cmpne	r3,r19,zero
   219c0:	18c00084 	addi	r3,r3,2
   219c4:	003fba06 	br	218b0 <__mulsf3+0xa4>
   219c8:	9800141e 	bne	r19,zero,21a1c <__mulsf3+0x210>
   219cc:	00c00044 	movi	r3,1
   219d0:	003fb706 	br	218b0 <__mulsf3+0xa4>
   219d4:	a829883a 	mov	r20,r21
   219d8:	00ffffc4 	movi	r3,-1
   219dc:	0009883a 	mov	r4,zero
   219e0:	003fdd06 	br	21958 <__mulsf3+0x14c>
   219e4:	9009883a 	mov	r4,r18
   219e8:	d9400015 	stw	r5,0(sp)
   219ec:	0022d980 	call	22d98 <__clzsi2>
   219f0:	10fffec4 	addi	r3,r2,-5
   219f4:	10801d84 	addi	r2,r2,118
   219f8:	90e4983a 	sll	r18,r18,r3
   219fc:	00a1c83a 	sub	r16,zero,r2
   21a00:	0023883a 	mov	r17,zero
   21a04:	002f883a 	mov	r23,zero
   21a08:	d9400017 	ldw	r5,0(sp)
   21a0c:	003f9a06 	br	21878 <__mulsf3+0x6c>
   21a10:	04400304 	movi	r17,12
   21a14:	05c000c4 	movi	r23,3
   21a18:	003f9706 	br	21878 <__mulsf3+0x6c>
   21a1c:	9809883a 	mov	r4,r19
   21a20:	d9800015 	stw	r6,0(sp)
   21a24:	0022d980 	call	22d98 <__clzsi2>
   21a28:	10fffec4 	addi	r3,r2,-5
   21a2c:	10801d84 	addi	r2,r2,118
   21a30:	98e6983a 	sll	r19,r19,r3
   21a34:	0085c83a 	sub	r2,zero,r2
   21a38:	0007883a 	mov	r3,zero
   21a3c:	d9800017 	ldw	r6,0(sp)
   21a40:	003f9b06 	br	218b0 <__mulsf3+0xa4>
   21a44:	01002034 	movhi	r4,128
   21a48:	0029883a 	mov	r20,zero
   21a4c:	213fffc4 	addi	r4,r4,-1
   21a50:	00ffffc4 	movi	r3,-1
   21a54:	003fc006 	br	21958 <__mulsf3+0x14c>
   21a58:	9027883a 	mov	r19,r18
   21a5c:	b807883a 	mov	r3,r23
   21a60:	003fb406 	br	21934 <__mulsf3+0x128>
   21a64:	9027883a 	mov	r19,r18
   21a68:	e02b883a 	mov	r21,fp
   21a6c:	b807883a 	mov	r3,r23
   21a70:	003fb006 	br	21934 <__mulsf3+0x128>
   21a74:	9004d43a 	srli	r2,r18,16
   21a78:	9810d43a 	srli	r8,r19,16
   21a7c:	94bfffcc 	andi	r18,r18,65535
   21a80:	993fffcc 	andi	r4,r19,65535
   21a84:	910d383a 	mul	r6,r18,r4
   21a88:	20a7383a 	mul	r19,r4,r2
   21a8c:	9225383a 	mul	r18,r18,r8
   21a90:	3006d43a 	srli	r3,r6,16
   21a94:	1211383a 	mul	r8,r2,r8
   21a98:	94e5883a 	add	r18,r18,r19
   21a9c:	1c87883a 	add	r3,r3,r18
   21aa0:	1cc0022e 	bgeu	r3,r19,21aac <__mulsf3+0x2a0>
   21aa4:	00800074 	movhi	r2,1
   21aa8:	4091883a 	add	r8,r8,r2
   21aac:	1804943a 	slli	r2,r3,16
   21ab0:	31bfffcc 	andi	r6,r6,65535
   21ab4:	1806d43a 	srli	r3,r3,16
   21ab8:	1185883a 	add	r2,r2,r6
   21abc:	102691ba 	slli	r19,r2,6
   21ac0:	1a07883a 	add	r3,r3,r8
   21ac4:	1004d6ba 	srli	r2,r2,26
   21ac8:	180891ba 	slli	r4,r3,6
   21acc:	9826c03a 	cmpne	r19,r19,zero
   21ad0:	9884b03a 	or	r2,r19,r2
   21ad4:	1126b03a 	or	r19,r2,r4
   21ad8:	9882002c 	andhi	r2,r19,2048
   21adc:	10000426 	beq	r2,zero,21af0 <__mulsf3+0x2e4>
   21ae0:	9804d07a 	srli	r2,r19,1
   21ae4:	9900004c 	andi	r4,r19,1
   21ae8:	3821883a 	mov	r16,r7
   21aec:	1126b03a 	or	r19,r2,r4
   21af0:	80c01fc4 	addi	r3,r16,127
   21af4:	00c0210e 	bge	zero,r3,21b7c <__mulsf3+0x370>
   21af8:	988001cc 	andi	r2,r19,7
   21afc:	10000426 	beq	r2,zero,21b10 <__mulsf3+0x304>
   21b00:	988003cc 	andi	r2,r19,15
   21b04:	01000104 	movi	r4,4
   21b08:	11000126 	beq	r2,r4,21b10 <__mulsf3+0x304>
   21b0c:	9927883a 	add	r19,r19,r4
   21b10:	9882002c 	andhi	r2,r19,2048
   21b14:	10000426 	beq	r2,zero,21b28 <__mulsf3+0x31c>
   21b18:	00be0034 	movhi	r2,63488
   21b1c:	10bfffc4 	addi	r2,r2,-1
   21b20:	80c02004 	addi	r3,r16,128
   21b24:	98a6703a 	and	r19,r19,r2
   21b28:	00803f84 	movi	r2,254
   21b2c:	10ffa916 	blt	r2,r3,219d4 <__mulsf3+0x1c8>
   21b30:	980891ba 	slli	r4,r19,6
   21b34:	a829883a 	mov	r20,r21
   21b38:	2008d27a 	srli	r4,r4,9
   21b3c:	003f8606 	br	21958 <__mulsf3+0x14c>
   21b40:	9080102c 	andhi	r2,r18,64
   21b44:	10000826 	beq	r2,zero,21b68 <__mulsf3+0x35c>
   21b48:	9880102c 	andhi	r2,r19,64
   21b4c:	1000061e 	bne	r2,zero,21b68 <__mulsf3+0x35c>
   21b50:	00802034 	movhi	r2,128
   21b54:	99001034 	orhi	r4,r19,64
   21b58:	10bfffc4 	addi	r2,r2,-1
   21b5c:	b029883a 	mov	r20,r22
   21b60:	2088703a 	and	r4,r4,r2
   21b64:	003fba06 	br	21a50 <__mulsf3+0x244>
   21b68:	00802034 	movhi	r2,128
   21b6c:	91001034 	orhi	r4,r18,64
   21b70:	10bfffc4 	addi	r2,r2,-1
   21b74:	2088703a 	and	r4,r4,r2
   21b78:	003fb506 	br	21a50 <__mulsf3+0x244>
   21b7c:	00800044 	movi	r2,1
   21b80:	10c7c83a 	sub	r3,r2,r3
   21b84:	008006c4 	movi	r2,27
   21b88:	10ff7016 	blt	r2,r3,2194c <__mulsf3+0x140>
   21b8c:	00800804 	movi	r2,32
   21b90:	10c5c83a 	sub	r2,r2,r3
   21b94:	9884983a 	sll	r2,r19,r2
   21b98:	98c6d83a 	srl	r3,r19,r3
   21b9c:	1004c03a 	cmpne	r2,r2,zero
   21ba0:	1884b03a 	or	r2,r3,r2
   21ba4:	10c001cc 	andi	r3,r2,7
   21ba8:	18000426 	beq	r3,zero,21bbc <__mulsf3+0x3b0>
   21bac:	10c003cc 	andi	r3,r2,15
   21bb0:	01000104 	movi	r4,4
   21bb4:	19000126 	beq	r3,r4,21bbc <__mulsf3+0x3b0>
   21bb8:	1105883a 	add	r2,r2,r4
   21bbc:	10c1002c 	andhi	r3,r2,1024
   21bc0:	18000626 	beq	r3,zero,21bdc <__mulsf3+0x3d0>
   21bc4:	a829883a 	mov	r20,r21
   21bc8:	00c00044 	movi	r3,1
   21bcc:	0009883a 	mov	r4,zero
   21bd0:	003f6106 	br	21958 <__mulsf3+0x14c>
   21bd4:	3821883a 	mov	r16,r7
   21bd8:	003fc506 	br	21af0 <__mulsf3+0x2e4>
   21bdc:	100491ba 	slli	r2,r2,6
   21be0:	a829883a 	mov	r20,r21
   21be4:	0007883a 	mov	r3,zero
   21be8:	1008d27a 	srli	r4,r2,9
   21bec:	003f5a06 	br	21958 <__mulsf3+0x14c>
   21bf0:	00802034 	movhi	r2,128
   21bf4:	99001034 	orhi	r4,r19,64
   21bf8:	10bfffc4 	addi	r2,r2,-1
   21bfc:	a829883a 	mov	r20,r21
   21c00:	2088703a 	and	r4,r4,r2
   21c04:	003f9206 	br	21a50 <__mulsf3+0x244>

00021c08 <__subsf3>:
   21c08:	defffc04 	addi	sp,sp,-16
   21c0c:	280cd5fa 	srli	r6,r5,23
   21c10:	dc000015 	stw	r16,0(sp)
   21c14:	01c02034 	movhi	r7,128
   21c18:	2020d5fa 	srli	r16,r4,23
   21c1c:	39ffffc4 	addi	r7,r7,-1
   21c20:	3906703a 	and	r3,r7,r4
   21c24:	dc400115 	stw	r17,4(sp)
   21c28:	394e703a 	and	r7,r7,r5
   21c2c:	2022d7fa 	srli	r17,r4,31
   21c30:	dfc00315 	stw	ra,12(sp)
   21c34:	dc800215 	stw	r18,8(sp)
   21c38:	31803fcc 	andi	r6,r6,255
   21c3c:	01003fc4 	movi	r4,255
   21c40:	84003fcc 	andi	r16,r16,255
   21c44:	180690fa 	slli	r3,r3,3
   21c48:	2804d7fa 	srli	r2,r5,31
   21c4c:	380e90fa 	slli	r7,r7,3
   21c50:	31006d26 	beq	r6,r4,21e08 <__subsf3+0x200>
   21c54:	1080005c 	xori	r2,r2,1
   21c58:	8189c83a 	sub	r4,r16,r6
   21c5c:	14404f26 	beq	r2,r17,21d9c <__subsf3+0x194>
   21c60:	0100770e 	bge	zero,r4,21e40 <__subsf3+0x238>
   21c64:	30001e1e 	bne	r6,zero,21ce0 <__subsf3+0xd8>
   21c68:	38006a1e 	bne	r7,zero,21e14 <__subsf3+0x20c>
   21c6c:	188001cc 	andi	r2,r3,7
   21c70:	10000426 	beq	r2,zero,21c84 <__subsf3+0x7c>
   21c74:	188003cc 	andi	r2,r3,15
   21c78:	01000104 	movi	r4,4
   21c7c:	11000126 	beq	r2,r4,21c84 <__subsf3+0x7c>
   21c80:	1907883a 	add	r3,r3,r4
   21c84:	1881002c 	andhi	r2,r3,1024
   21c88:	10003926 	beq	r2,zero,21d70 <__subsf3+0x168>
   21c8c:	84000044 	addi	r16,r16,1
   21c90:	00803fc4 	movi	r2,255
   21c94:	80807526 	beq	r16,r2,21e6c <__subsf3+0x264>
   21c98:	180691ba 	slli	r3,r3,6
   21c9c:	8880004c 	andi	r2,r17,1
   21ca0:	180ad27a 	srli	r5,r3,9
   21ca4:	84003fcc 	andi	r16,r16,255
   21ca8:	800695fa 	slli	r3,r16,23
   21cac:	10803fcc 	andi	r2,r2,255
   21cb0:	01002034 	movhi	r4,128
   21cb4:	213fffc4 	addi	r4,r4,-1
   21cb8:	100497fa 	slli	r2,r2,31
   21cbc:	2920703a 	and	r16,r5,r4
   21cc0:	80e0b03a 	or	r16,r16,r3
   21cc4:	8084b03a 	or	r2,r16,r2
   21cc8:	dfc00317 	ldw	ra,12(sp)
   21ccc:	dc800217 	ldw	r18,8(sp)
   21cd0:	dc400117 	ldw	r17,4(sp)
   21cd4:	dc000017 	ldw	r16,0(sp)
   21cd8:	dec00404 	addi	sp,sp,16
   21cdc:	f800283a 	ret
   21ce0:	00803fc4 	movi	r2,255
   21ce4:	80bfe126 	beq	r16,r2,21c6c <__subsf3+0x64>
   21ce8:	39c10034 	orhi	r7,r7,1024
   21cec:	008006c4 	movi	r2,27
   21cf0:	11007416 	blt	r2,r4,21ec4 <__subsf3+0x2bc>
   21cf4:	00800804 	movi	r2,32
   21cf8:	1105c83a 	sub	r2,r2,r4
   21cfc:	3884983a 	sll	r2,r7,r2
   21d00:	390ed83a 	srl	r7,r7,r4
   21d04:	1008c03a 	cmpne	r4,r2,zero
   21d08:	390eb03a 	or	r7,r7,r4
   21d0c:	19c7c83a 	sub	r3,r3,r7
   21d10:	1881002c 	andhi	r2,r3,1024
   21d14:	10001426 	beq	r2,zero,21d68 <__subsf3+0x160>
   21d18:	04810034 	movhi	r18,1024
   21d1c:	94bfffc4 	addi	r18,r18,-1
   21d20:	1ca4703a 	and	r18,r3,r18
   21d24:	9009883a 	mov	r4,r18
   21d28:	0022d980 	call	22d98 <__clzsi2>
   21d2c:	10bffec4 	addi	r2,r2,-5
   21d30:	90a4983a 	sll	r18,r18,r2
   21d34:	14005116 	blt	r2,r16,21e7c <__subsf3+0x274>
   21d38:	1405c83a 	sub	r2,r2,r16
   21d3c:	10c00044 	addi	r3,r2,1
   21d40:	00800804 	movi	r2,32
   21d44:	10c5c83a 	sub	r2,r2,r3
   21d48:	9084983a 	sll	r2,r18,r2
   21d4c:	90e4d83a 	srl	r18,r18,r3
   21d50:	0021883a 	mov	r16,zero
   21d54:	1006c03a 	cmpne	r3,r2,zero
   21d58:	90c6b03a 	or	r3,r18,r3
   21d5c:	003fc306 	br	21c6c <__subsf3+0x64>
   21d60:	2000e026 	beq	r4,zero,220e4 <__subsf3+0x4dc>
   21d64:	2007883a 	mov	r3,r4
   21d68:	188001cc 	andi	r2,r3,7
   21d6c:	103fc11e 	bne	r2,zero,21c74 <__subsf3+0x6c>
   21d70:	180ad0fa 	srli	r5,r3,3
   21d74:	00c03fc4 	movi	r3,255
   21d78:	8880004c 	andi	r2,r17,1
   21d7c:	80c0031e 	bne	r16,r3,21d8c <__subsf3+0x184>
   21d80:	28006d26 	beq	r5,zero,21f38 <__subsf3+0x330>
   21d84:	29401034 	orhi	r5,r5,64
   21d88:	043fffc4 	movi	r16,-1
   21d8c:	00c02034 	movhi	r3,128
   21d90:	18ffffc4 	addi	r3,r3,-1
   21d94:	28ca703a 	and	r5,r5,r3
   21d98:	003fc206 	br	21ca4 <__subsf3+0x9c>
   21d9c:	01003c0e 	bge	zero,r4,21e90 <__subsf3+0x288>
   21da0:	30002126 	beq	r6,zero,21e28 <__subsf3+0x220>
   21da4:	01403fc4 	movi	r5,255
   21da8:	817fb026 	beq	r16,r5,21c6c <__subsf3+0x64>
   21dac:	39c10034 	orhi	r7,r7,1024
   21db0:	014006c4 	movi	r5,27
   21db4:	29007416 	blt	r5,r4,21f88 <__subsf3+0x380>
   21db8:	01400804 	movi	r5,32
   21dbc:	290bc83a 	sub	r5,r5,r4
   21dc0:	394a983a 	sll	r5,r7,r5
   21dc4:	390ed83a 	srl	r7,r7,r4
   21dc8:	2808c03a 	cmpne	r4,r5,zero
   21dcc:	390eb03a 	or	r7,r7,r4
   21dd0:	19c7883a 	add	r3,r3,r7
   21dd4:	1901002c 	andhi	r4,r3,1024
   21dd8:	20003826 	beq	r4,zero,21ebc <__subsf3+0x2b4>
   21ddc:	84000044 	addi	r16,r16,1
   21de0:	01003fc4 	movi	r4,255
   21de4:	81005426 	beq	r16,r4,21f38 <__subsf3+0x330>
   21de8:	1023883a 	mov	r17,r2
   21dec:	00bf0034 	movhi	r2,64512
   21df0:	10bfffc4 	addi	r2,r2,-1
   21df4:	1900004c 	andi	r4,r3,1
   21df8:	1886703a 	and	r3,r3,r2
   21dfc:	1806d07a 	srli	r3,r3,1
   21e00:	1906b03a 	or	r3,r3,r4
   21e04:	003f9906 	br	21c6c <__subsf3+0x64>
   21e08:	383f9226 	beq	r7,zero,21c54 <__subsf3+0x4c>
   21e0c:	10803fcc 	andi	r2,r2,255
   21e10:	003f9106 	br	21c58 <__subsf3+0x50>
   21e14:	213fffc4 	addi	r4,r4,-1
   21e18:	203fbc26 	beq	r4,zero,21d0c <__subsf3+0x104>
   21e1c:	00803fc4 	movi	r2,255
   21e20:	80bfb21e 	bne	r16,r2,21cec <__subsf3+0xe4>
   21e24:	003f9106 	br	21c6c <__subsf3+0x64>
   21e28:	383f9026 	beq	r7,zero,21c6c <__subsf3+0x64>
   21e2c:	213fffc4 	addi	r4,r4,-1
   21e30:	203fe726 	beq	r4,zero,21dd0 <__subsf3+0x1c8>
   21e34:	01403fc4 	movi	r5,255
   21e38:	817fdd1e 	bne	r16,r5,21db0 <__subsf3+0x1a8>
   21e3c:	003f8b06 	br	21c6c <__subsf3+0x64>
   21e40:	2000221e 	bne	r4,zero,21ecc <__subsf3+0x2c4>
   21e44:	81000044 	addi	r4,r16,1
   21e48:	21003fcc 	andi	r4,r4,255
   21e4c:	01400044 	movi	r5,1
   21e50:	2900470e 	bge	r5,r4,21f70 <__subsf3+0x368>
   21e54:	19e5c83a 	sub	r18,r3,r7
   21e58:	9141002c 	andhi	r5,r18,1024
   21e5c:	28002d26 	beq	r5,zero,21f14 <__subsf3+0x30c>
   21e60:	38e5c83a 	sub	r18,r7,r3
   21e64:	1023883a 	mov	r17,r2
   21e68:	003fae06 	br	21d24 <__subsf3+0x11c>
   21e6c:	8880004c 	andi	r2,r17,1
   21e70:	043fffc4 	movi	r16,-1
   21e74:	000b883a 	mov	r5,zero
   21e78:	003f8a06 	br	21ca4 <__subsf3+0x9c>
   21e7c:	00ff0034 	movhi	r3,64512
   21e80:	18ffffc4 	addi	r3,r3,-1
   21e84:	80a1c83a 	sub	r16,r16,r2
   21e88:	90c6703a 	and	r3,r18,r3
   21e8c:	003f7706 	br	21c6c <__subsf3+0x64>
   21e90:	2000431e 	bne	r4,zero,21fa0 <__subsf3+0x398>
   21e94:	81000044 	addi	r4,r16,1
   21e98:	21803fcc 	andi	r6,r4,255
   21e9c:	01400044 	movi	r5,1
   21ea0:	2980280e 	bge	r5,r6,21f44 <__subsf3+0x33c>
   21ea4:	01403fc4 	movi	r5,255
   21ea8:	21402326 	beq	r4,r5,21f38 <__subsf3+0x330>
   21eac:	19c7883a 	add	r3,r3,r7
   21eb0:	1806d07a 	srli	r3,r3,1
   21eb4:	2021883a 	mov	r16,r4
   21eb8:	003f6c06 	br	21c6c <__subsf3+0x64>
   21ebc:	1023883a 	mov	r17,r2
   21ec0:	003fa906 	br	21d68 <__subsf3+0x160>
   21ec4:	01c00044 	movi	r7,1
   21ec8:	003f9006 	br	21d0c <__subsf3+0x104>
   21ecc:	8000151e 	bne	r16,zero,21f24 <__subsf3+0x31c>
   21ed0:	18002f26 	beq	r3,zero,21f90 <__subsf3+0x388>
   21ed4:	0108303a 	nor	r4,zero,r4
   21ed8:	20000a26 	beq	r4,zero,21f04 <__subsf3+0x2fc>
   21edc:	01403fc4 	movi	r5,255
   21ee0:	31402b26 	beq	r6,r5,21f90 <__subsf3+0x388>
   21ee4:	014006c4 	movi	r5,27
   21ee8:	29006e16 	blt	r5,r4,220a4 <__subsf3+0x49c>
   21eec:	01400804 	movi	r5,32
   21ef0:	290bc83a 	sub	r5,r5,r4
   21ef4:	194a983a 	sll	r5,r3,r5
   21ef8:	1908d83a 	srl	r4,r3,r4
   21efc:	2806c03a 	cmpne	r3,r5,zero
   21f00:	20c6b03a 	or	r3,r4,r3
   21f04:	38c7c83a 	sub	r3,r7,r3
   21f08:	3021883a 	mov	r16,r6
   21f0c:	1023883a 	mov	r17,r2
   21f10:	003f7f06 	br	21d10 <__subsf3+0x108>
   21f14:	903f831e 	bne	r18,zero,21d24 <__subsf3+0x11c>
   21f18:	0005883a 	mov	r2,zero
   21f1c:	0021883a 	mov	r16,zero
   21f20:	003f9a06 	br	21d8c <__subsf3+0x184>
   21f24:	01403fc4 	movi	r5,255
   21f28:	31401926 	beq	r6,r5,21f90 <__subsf3+0x388>
   21f2c:	0109c83a 	sub	r4,zero,r4
   21f30:	18c10034 	orhi	r3,r3,1024
   21f34:	003feb06 	br	21ee4 <__subsf3+0x2dc>
   21f38:	043fffc4 	movi	r16,-1
   21f3c:	000b883a 	mov	r5,zero
   21f40:	003f5806 	br	21ca4 <__subsf3+0x9c>
   21f44:	8000481e 	bne	r16,zero,22068 <__subsf3+0x460>
   21f48:	18006226 	beq	r3,zero,220d4 <__subsf3+0x4cc>
   21f4c:	383f4726 	beq	r7,zero,21c6c <__subsf3+0x64>
   21f50:	19c7883a 	add	r3,r3,r7
   21f54:	1881002c 	andhi	r2,r3,1024
   21f58:	103f8326 	beq	r2,zero,21d68 <__subsf3+0x160>
   21f5c:	00bf0034 	movhi	r2,64512
   21f60:	10bfffc4 	addi	r2,r2,-1
   21f64:	2821883a 	mov	r16,r5
   21f68:	1886703a 	and	r3,r3,r2
   21f6c:	003f3f06 	br	21c6c <__subsf3+0x64>
   21f70:	80001c1e 	bne	r16,zero,21fe4 <__subsf3+0x3dc>
   21f74:	1800261e 	bne	r3,zero,22010 <__subsf3+0x408>
   21f78:	38004c26 	beq	r7,zero,220ac <__subsf3+0x4a4>
   21f7c:	3807883a 	mov	r3,r7
   21f80:	1023883a 	mov	r17,r2
   21f84:	003f3906 	br	21c6c <__subsf3+0x64>
   21f88:	01c00044 	movi	r7,1
   21f8c:	003f9006 	br	21dd0 <__subsf3+0x1c8>
   21f90:	3807883a 	mov	r3,r7
   21f94:	3021883a 	mov	r16,r6
   21f98:	1023883a 	mov	r17,r2
   21f9c:	003f3306 	br	21c6c <__subsf3+0x64>
   21fa0:	8000161e 	bne	r16,zero,21ffc <__subsf3+0x3f4>
   21fa4:	18002d26 	beq	r3,zero,2205c <__subsf3+0x454>
   21fa8:	0108303a 	nor	r4,zero,r4
   21fac:	20000a26 	beq	r4,zero,21fd8 <__subsf3+0x3d0>
   21fb0:	01403fc4 	movi	r5,255
   21fb4:	31402926 	beq	r6,r5,2205c <__subsf3+0x454>
   21fb8:	014006c4 	movi	r5,27
   21fbc:	29004716 	blt	r5,r4,220dc <__subsf3+0x4d4>
   21fc0:	01400804 	movi	r5,32
   21fc4:	290bc83a 	sub	r5,r5,r4
   21fc8:	194a983a 	sll	r5,r3,r5
   21fcc:	1908d83a 	srl	r4,r3,r4
   21fd0:	2806c03a 	cmpne	r3,r5,zero
   21fd4:	20c6b03a 	or	r3,r4,r3
   21fd8:	19c7883a 	add	r3,r3,r7
   21fdc:	3021883a 	mov	r16,r6
   21fe0:	003f7c06 	br	21dd4 <__subsf3+0x1cc>
   21fe4:	1800111e 	bne	r3,zero,2202c <__subsf3+0x424>
   21fe8:	38003326 	beq	r7,zero,220b8 <__subsf3+0x4b0>
   21fec:	3807883a 	mov	r3,r7
   21ff0:	1023883a 	mov	r17,r2
   21ff4:	04003fc4 	movi	r16,255
   21ff8:	003f1c06 	br	21c6c <__subsf3+0x64>
   21ffc:	01403fc4 	movi	r5,255
   22000:	31401626 	beq	r6,r5,2205c <__subsf3+0x454>
   22004:	0109c83a 	sub	r4,zero,r4
   22008:	18c10034 	orhi	r3,r3,1024
   2200c:	003fea06 	br	21fb8 <__subsf3+0x3b0>
   22010:	383f1626 	beq	r7,zero,21c6c <__subsf3+0x64>
   22014:	19c9c83a 	sub	r4,r3,r7
   22018:	2141002c 	andhi	r5,r4,1024
   2201c:	283f5026 	beq	r5,zero,21d60 <__subsf3+0x158>
   22020:	38c7c83a 	sub	r3,r7,r3
   22024:	1023883a 	mov	r17,r2
   22028:	003f1006 	br	21c6c <__subsf3+0x64>
   2202c:	38001b26 	beq	r7,zero,2209c <__subsf3+0x494>
   22030:	1806d0fa 	srli	r3,r3,3
   22034:	1900102c 	andhi	r4,r3,64
   22038:	20000526 	beq	r4,zero,22050 <__subsf3+0x448>
   2203c:	380ed0fa 	srli	r7,r7,3
   22040:	3900102c 	andhi	r4,r7,64
   22044:	2000021e 	bne	r4,zero,22050 <__subsf3+0x448>
   22048:	3807883a 	mov	r3,r7
   2204c:	1023883a 	mov	r17,r2
   22050:	180690fa 	slli	r3,r3,3
   22054:	04003fc4 	movi	r16,255
   22058:	003f0406 	br	21c6c <__subsf3+0x64>
   2205c:	3807883a 	mov	r3,r7
   22060:	3021883a 	mov	r16,r6
   22064:	003f0106 	br	21c6c <__subsf3+0x64>
   22068:	18001726 	beq	r3,zero,220c8 <__subsf3+0x4c0>
   2206c:	38000b26 	beq	r7,zero,2209c <__subsf3+0x494>
   22070:	1806d0fa 	srli	r3,r3,3
   22074:	1900102c 	andhi	r4,r3,64
   22078:	20000426 	beq	r4,zero,2208c <__subsf3+0x484>
   2207c:	380ed0fa 	srli	r7,r7,3
   22080:	3900102c 	andhi	r4,r7,64
   22084:	2000011e 	bne	r4,zero,2208c <__subsf3+0x484>
   22088:	3807883a 	mov	r3,r7
   2208c:	180690fa 	slli	r3,r3,3
   22090:	1023883a 	mov	r17,r2
   22094:	04003fc4 	movi	r16,255
   22098:	003ef406 	br	21c6c <__subsf3+0x64>
   2209c:	04003fc4 	movi	r16,255
   220a0:	003ef206 	br	21c6c <__subsf3+0x64>
   220a4:	00c00044 	movi	r3,1
   220a8:	003f9606 	br	21f04 <__subsf3+0x2fc>
   220ac:	000b883a 	mov	r5,zero
   220b0:	0005883a 	mov	r2,zero
   220b4:	003f3506 	br	21d8c <__subsf3+0x184>
   220b8:	01402034 	movhi	r5,128
   220bc:	297fffc4 	addi	r5,r5,-1
   220c0:	0005883a 	mov	r2,zero
   220c4:	003f2f06 	br	21d84 <__subsf3+0x17c>
   220c8:	3807883a 	mov	r3,r7
   220cc:	04003fc4 	movi	r16,255
   220d0:	003ee606 	br	21c6c <__subsf3+0x64>
   220d4:	3807883a 	mov	r3,r7
   220d8:	003ee406 	br	21c6c <__subsf3+0x64>
   220dc:	00c00044 	movi	r3,1
   220e0:	003fbd06 	br	21fd8 <__subsf3+0x3d0>
   220e4:	0005883a 	mov	r2,zero
   220e8:	003f2806 	br	21d8c <__subsf3+0x184>

000220ec <__fixsfsi>:
   220ec:	200ad5fa 	srli	r5,r4,23
   220f0:	00c02034 	movhi	r3,128
   220f4:	18ffffc4 	addi	r3,r3,-1
   220f8:	29403fcc 	andi	r5,r5,255
   220fc:	00801f84 	movi	r2,126
   22100:	1906703a 	and	r3,r3,r4
   22104:	2008d7fa 	srli	r4,r4,31
   22108:	11400e0e 	bge	r2,r5,22144 <__fixsfsi+0x58>
   2210c:	00802744 	movi	r2,157
   22110:	11400816 	blt	r2,r5,22134 <__fixsfsi+0x48>
   22114:	00802544 	movi	r2,149
   22118:	18c02034 	orhi	r3,r3,128
   2211c:	11400b0e 	bge	r2,r5,2214c <__fixsfsi+0x60>
   22120:	28bfda84 	addi	r2,r5,-150
   22124:	1884983a 	sll	r2,r3,r2
   22128:	20000726 	beq	r4,zero,22148 <__fixsfsi+0x5c>
   2212c:	0085c83a 	sub	r2,zero,r2
   22130:	f800283a 	ret
   22134:	00a00034 	movhi	r2,32768
   22138:	10bfffc4 	addi	r2,r2,-1
   2213c:	2085883a 	add	r2,r4,r2
   22140:	f800283a 	ret
   22144:	0005883a 	mov	r2,zero
   22148:	f800283a 	ret
   2214c:	00802584 	movi	r2,150
   22150:	1145c83a 	sub	r2,r2,r5
   22154:	1884d83a 	srl	r2,r3,r2
   22158:	003ff306 	br	22128 <__fixsfsi+0x3c>

0002215c <__floatsisf>:
   2215c:	defffd04 	addi	sp,sp,-12
   22160:	dfc00215 	stw	ra,8(sp)
   22164:	dc400115 	stw	r17,4(sp)
   22168:	dc000015 	stw	r16,0(sp)
   2216c:	20003526 	beq	r4,zero,22244 <__floatsisf+0xe8>
   22170:	2021883a 	mov	r16,r4
   22174:	2022d7fa 	srli	r17,r4,31
   22178:	20003616 	blt	r4,zero,22254 <__floatsisf+0xf8>
   2217c:	8009883a 	mov	r4,r16
   22180:	0022d980 	call	22d98 <__clzsi2>
   22184:	00c02784 	movi	r3,158
   22188:	1887c83a 	sub	r3,r3,r2
   2218c:	01002584 	movi	r4,150
   22190:	20c01416 	blt	r4,r3,221e4 <__floatsisf+0x88>
   22194:	20c9c83a 	sub	r4,r4,r3
   22198:	8120983a 	sll	r16,r16,r4
   2219c:	00802034 	movhi	r2,128
   221a0:	10bfffc4 	addi	r2,r2,-1
   221a4:	8809883a 	mov	r4,r17
   221a8:	80a0703a 	and	r16,r16,r2
   221ac:	18803fcc 	andi	r2,r3,255
   221b0:	100695fa 	slli	r3,r2,23
   221b4:	20803fcc 	andi	r2,r4,255
   221b8:	100897fa 	slli	r4,r2,31
   221bc:	00802034 	movhi	r2,128
   221c0:	10bfffc4 	addi	r2,r2,-1
   221c4:	8084703a 	and	r2,r16,r2
   221c8:	10c4b03a 	or	r2,r2,r3
   221cc:	1104b03a 	or	r2,r2,r4
   221d0:	dfc00217 	ldw	ra,8(sp)
   221d4:	dc400117 	ldw	r17,4(sp)
   221d8:	dc000017 	ldw	r16,0(sp)
   221dc:	dec00304 	addi	sp,sp,12
   221e0:	f800283a 	ret
   221e4:	01002644 	movi	r4,153
   221e8:	20c01c16 	blt	r4,r3,2225c <__floatsisf+0x100>
   221ec:	20c9c83a 	sub	r4,r4,r3
   221f0:	8120983a 	sll	r16,r16,r4
   221f4:	013f0034 	movhi	r4,64512
   221f8:	213fffc4 	addi	r4,r4,-1
   221fc:	814001cc 	andi	r5,r16,7
   22200:	8108703a 	and	r4,r16,r4
   22204:	28000426 	beq	r5,zero,22218 <__floatsisf+0xbc>
   22208:	840003cc 	andi	r16,r16,15
   2220c:	01400104 	movi	r5,4
   22210:	81400126 	beq	r16,r5,22218 <__floatsisf+0xbc>
   22214:	2149883a 	add	r4,r4,r5
   22218:	2141002c 	andhi	r5,r4,1024
   2221c:	28000526 	beq	r5,zero,22234 <__floatsisf+0xd8>
   22220:	00c027c4 	movi	r3,159
   22224:	1887c83a 	sub	r3,r3,r2
   22228:	00bf0034 	movhi	r2,64512
   2222c:	10bfffc4 	addi	r2,r2,-1
   22230:	2088703a 	and	r4,r4,r2
   22234:	202091ba 	slli	r16,r4,6
   22238:	8809883a 	mov	r4,r17
   2223c:	8020d27a 	srli	r16,r16,9
   22240:	003fda06 	br	221ac <__floatsisf+0x50>
   22244:	0009883a 	mov	r4,zero
   22248:	0007883a 	mov	r3,zero
   2224c:	0021883a 	mov	r16,zero
   22250:	003fd606 	br	221ac <__floatsisf+0x50>
   22254:	0121c83a 	sub	r16,zero,r4
   22258:	003fc806 	br	2217c <__floatsisf+0x20>
   2225c:	01002e44 	movi	r4,185
   22260:	20c9c83a 	sub	r4,r4,r3
   22264:	01400144 	movi	r5,5
   22268:	8108983a 	sll	r4,r16,r4
   2226c:	288bc83a 	sub	r5,r5,r2
   22270:	8160d83a 	srl	r16,r16,r5
   22274:	2008c03a 	cmpne	r4,r4,zero
   22278:	8120b03a 	or	r16,r16,r4
   2227c:	003fdd06 	br	221f4 <__floatsisf+0x98>

00022280 <__adddf3>:
   22280:	02c00434 	movhi	r11,16
   22284:	5affffc4 	addi	r11,r11,-1
   22288:	2806d7fa 	srli	r3,r5,31
   2228c:	2ad4703a 	and	r10,r5,r11
   22290:	3ad2703a 	and	r9,r7,r11
   22294:	3804d53a 	srli	r2,r7,20
   22298:	3018d77a 	srli	r12,r6,29
   2229c:	280ad53a 	srli	r5,r5,20
   222a0:	501490fa 	slli	r10,r10,3
   222a4:	2010d77a 	srli	r8,r4,29
   222a8:	481290fa 	slli	r9,r9,3
   222ac:	380ed7fa 	srli	r7,r7,31
   222b0:	defffb04 	addi	sp,sp,-20
   222b4:	dc800215 	stw	r18,8(sp)
   222b8:	dc400115 	stw	r17,4(sp)
   222bc:	dc000015 	stw	r16,0(sp)
   222c0:	dfc00415 	stw	ra,16(sp)
   222c4:	dcc00315 	stw	r19,12(sp)
   222c8:	1c803fcc 	andi	r18,r3,255
   222cc:	2c01ffcc 	andi	r16,r5,2047
   222d0:	5210b03a 	or	r8,r10,r8
   222d4:	202290fa 	slli	r17,r4,3
   222d8:	1081ffcc 	andi	r2,r2,2047
   222dc:	4b12b03a 	or	r9,r9,r12
   222e0:	300c90fa 	slli	r6,r6,3
   222e4:	91c07526 	beq	r18,r7,224bc <__adddf3+0x23c>
   222e8:	8087c83a 	sub	r3,r16,r2
   222ec:	00c0ab0e 	bge	zero,r3,2259c <__adddf3+0x31c>
   222f0:	10002a1e 	bne	r2,zero,2239c <__adddf3+0x11c>
   222f4:	4984b03a 	or	r2,r9,r6
   222f8:	1000961e 	bne	r2,zero,22554 <__adddf3+0x2d4>
   222fc:	888001cc 	andi	r2,r17,7
   22300:	10000726 	beq	r2,zero,22320 <__adddf3+0xa0>
   22304:	888003cc 	andi	r2,r17,15
   22308:	00c00104 	movi	r3,4
   2230c:	10c00426 	beq	r2,r3,22320 <__adddf3+0xa0>
   22310:	88c7883a 	add	r3,r17,r3
   22314:	1c63803a 	cmpltu	r17,r3,r17
   22318:	4451883a 	add	r8,r8,r17
   2231c:	1823883a 	mov	r17,r3
   22320:	4080202c 	andhi	r2,r8,128
   22324:	10005926 	beq	r2,zero,2248c <__adddf3+0x20c>
   22328:	84000044 	addi	r16,r16,1
   2232c:	0081ffc4 	movi	r2,2047
   22330:	8080ba26 	beq	r16,r2,2261c <__adddf3+0x39c>
   22334:	00bfe034 	movhi	r2,65408
   22338:	10bfffc4 	addi	r2,r2,-1
   2233c:	4090703a 	and	r8,r8,r2
   22340:	4004977a 	slli	r2,r8,29
   22344:	4010927a 	slli	r8,r8,9
   22348:	8822d0fa 	srli	r17,r17,3
   2234c:	8401ffcc 	andi	r16,r16,2047
   22350:	4010d33a 	srli	r8,r8,12
   22354:	9007883a 	mov	r3,r18
   22358:	1444b03a 	or	r2,r2,r17
   2235c:	8401ffcc 	andi	r16,r16,2047
   22360:	8020953a 	slli	r16,r16,20
   22364:	18c03fcc 	andi	r3,r3,255
   22368:	01000434 	movhi	r4,16
   2236c:	213fffc4 	addi	r4,r4,-1
   22370:	180697fa 	slli	r3,r3,31
   22374:	4110703a 	and	r8,r8,r4
   22378:	4410b03a 	or	r8,r8,r16
   2237c:	40c6b03a 	or	r3,r8,r3
   22380:	dfc00417 	ldw	ra,16(sp)
   22384:	dcc00317 	ldw	r19,12(sp)
   22388:	dc800217 	ldw	r18,8(sp)
   2238c:	dc400117 	ldw	r17,4(sp)
   22390:	dc000017 	ldw	r16,0(sp)
   22394:	dec00504 	addi	sp,sp,20
   22398:	f800283a 	ret
   2239c:	0081ffc4 	movi	r2,2047
   223a0:	80bfd626 	beq	r16,r2,222fc <__adddf3+0x7c>
   223a4:	4a402034 	orhi	r9,r9,128
   223a8:	00800e04 	movi	r2,56
   223ac:	10c09f16 	blt	r2,r3,2262c <__adddf3+0x3ac>
   223b0:	008007c4 	movi	r2,31
   223b4:	10c0c216 	blt	r2,r3,226c0 <__adddf3+0x440>
   223b8:	00800804 	movi	r2,32
   223bc:	10c5c83a 	sub	r2,r2,r3
   223c0:	488a983a 	sll	r5,r9,r2
   223c4:	30c8d83a 	srl	r4,r6,r3
   223c8:	3084983a 	sll	r2,r6,r2
   223cc:	48c6d83a 	srl	r3,r9,r3
   223d0:	290cb03a 	or	r6,r5,r4
   223d4:	1004c03a 	cmpne	r2,r2,zero
   223d8:	308cb03a 	or	r6,r6,r2
   223dc:	898dc83a 	sub	r6,r17,r6
   223e0:	89a3803a 	cmpltu	r17,r17,r6
   223e4:	40d1c83a 	sub	r8,r8,r3
   223e8:	4451c83a 	sub	r8,r8,r17
   223ec:	3023883a 	mov	r17,r6
   223f0:	4080202c 	andhi	r2,r8,128
   223f4:	10002326 	beq	r2,zero,22484 <__adddf3+0x204>
   223f8:	04c02034 	movhi	r19,128
   223fc:	9cffffc4 	addi	r19,r19,-1
   22400:	44e6703a 	and	r19,r8,r19
   22404:	98007626 	beq	r19,zero,225e0 <__adddf3+0x360>
   22408:	9809883a 	mov	r4,r19
   2240c:	0022d980 	call	22d98 <__clzsi2>
   22410:	10fffe04 	addi	r3,r2,-8
   22414:	010007c4 	movi	r4,31
   22418:	20c07716 	blt	r4,r3,225f8 <__adddf3+0x378>
   2241c:	00800804 	movi	r2,32
   22420:	10c5c83a 	sub	r2,r2,r3
   22424:	8884d83a 	srl	r2,r17,r2
   22428:	98d0983a 	sll	r8,r19,r3
   2242c:	88e2983a 	sll	r17,r17,r3
   22430:	1204b03a 	or	r2,r2,r8
   22434:	1c007416 	blt	r3,r16,22608 <__adddf3+0x388>
   22438:	1c21c83a 	sub	r16,r3,r16
   2243c:	82000044 	addi	r8,r16,1
   22440:	00c007c4 	movi	r3,31
   22444:	1a009116 	blt	r3,r8,2268c <__adddf3+0x40c>
   22448:	00c00804 	movi	r3,32
   2244c:	1a07c83a 	sub	r3,r3,r8
   22450:	8a08d83a 	srl	r4,r17,r8
   22454:	88e2983a 	sll	r17,r17,r3
   22458:	10c6983a 	sll	r3,r2,r3
   2245c:	1210d83a 	srl	r8,r2,r8
   22460:	8804c03a 	cmpne	r2,r17,zero
   22464:	1906b03a 	or	r3,r3,r4
   22468:	18a2b03a 	or	r17,r3,r2
   2246c:	0021883a 	mov	r16,zero
   22470:	003fa206 	br	222fc <__adddf3+0x7c>
   22474:	1890b03a 	or	r8,r3,r2
   22478:	40017d26 	beq	r8,zero,22a70 <__adddf3+0x7f0>
   2247c:	1011883a 	mov	r8,r2
   22480:	1823883a 	mov	r17,r3
   22484:	888001cc 	andi	r2,r17,7
   22488:	103f9e1e 	bne	r2,zero,22304 <__adddf3+0x84>
   2248c:	4004977a 	slli	r2,r8,29
   22490:	8822d0fa 	srli	r17,r17,3
   22494:	4010d0fa 	srli	r8,r8,3
   22498:	9007883a 	mov	r3,r18
   2249c:	1444b03a 	or	r2,r2,r17
   224a0:	0101ffc4 	movi	r4,2047
   224a4:	81002426 	beq	r16,r4,22538 <__adddf3+0x2b8>
   224a8:	8120703a 	and	r16,r16,r4
   224ac:	01000434 	movhi	r4,16
   224b0:	213fffc4 	addi	r4,r4,-1
   224b4:	4110703a 	and	r8,r8,r4
   224b8:	003fa806 	br	2235c <__adddf3+0xdc>
   224bc:	8089c83a 	sub	r4,r16,r2
   224c0:	01005e0e 	bge	zero,r4,2263c <__adddf3+0x3bc>
   224c4:	10002b26 	beq	r2,zero,22574 <__adddf3+0x2f4>
   224c8:	0081ffc4 	movi	r2,2047
   224cc:	80bf8b26 	beq	r16,r2,222fc <__adddf3+0x7c>
   224d0:	4a402034 	orhi	r9,r9,128
   224d4:	00800e04 	movi	r2,56
   224d8:	1100a40e 	bge	r2,r4,2276c <__adddf3+0x4ec>
   224dc:	498cb03a 	or	r6,r9,r6
   224e0:	300ac03a 	cmpne	r5,r6,zero
   224e4:	0013883a 	mov	r9,zero
   224e8:	2c4b883a 	add	r5,r5,r17
   224ec:	2c63803a 	cmpltu	r17,r5,r17
   224f0:	4a11883a 	add	r8,r9,r8
   224f4:	8a11883a 	add	r8,r17,r8
   224f8:	2823883a 	mov	r17,r5
   224fc:	4080202c 	andhi	r2,r8,128
   22500:	103fe026 	beq	r2,zero,22484 <__adddf3+0x204>
   22504:	84000044 	addi	r16,r16,1
   22508:	0081ffc4 	movi	r2,2047
   2250c:	8080d226 	beq	r16,r2,22858 <__adddf3+0x5d8>
   22510:	00bfe034 	movhi	r2,65408
   22514:	10bfffc4 	addi	r2,r2,-1
   22518:	4090703a 	and	r8,r8,r2
   2251c:	880ad07a 	srli	r5,r17,1
   22520:	400897fa 	slli	r4,r8,31
   22524:	88c0004c 	andi	r3,r17,1
   22528:	28e2b03a 	or	r17,r5,r3
   2252c:	4010d07a 	srli	r8,r8,1
   22530:	2462b03a 	or	r17,r4,r17
   22534:	003f7106 	br	222fc <__adddf3+0x7c>
   22538:	4088b03a 	or	r4,r8,r2
   2253c:	20014526 	beq	r4,zero,22a54 <__adddf3+0x7d4>
   22540:	01000434 	movhi	r4,16
   22544:	42000234 	orhi	r8,r8,8
   22548:	213fffc4 	addi	r4,r4,-1
   2254c:	4110703a 	and	r8,r8,r4
   22550:	003f8206 	br	2235c <__adddf3+0xdc>
   22554:	18ffffc4 	addi	r3,r3,-1
   22558:	1800491e 	bne	r3,zero,22680 <__adddf3+0x400>
   2255c:	898bc83a 	sub	r5,r17,r6
   22560:	8963803a 	cmpltu	r17,r17,r5
   22564:	4251c83a 	sub	r8,r8,r9
   22568:	4451c83a 	sub	r8,r8,r17
   2256c:	2823883a 	mov	r17,r5
   22570:	003f9f06 	br	223f0 <__adddf3+0x170>
   22574:	4984b03a 	or	r2,r9,r6
   22578:	103f6026 	beq	r2,zero,222fc <__adddf3+0x7c>
   2257c:	213fffc4 	addi	r4,r4,-1
   22580:	2000931e 	bne	r4,zero,227d0 <__adddf3+0x550>
   22584:	898d883a 	add	r6,r17,r6
   22588:	3463803a 	cmpltu	r17,r6,r17
   2258c:	4251883a 	add	r8,r8,r9
   22590:	8a11883a 	add	r8,r17,r8
   22594:	3023883a 	mov	r17,r6
   22598:	003fd806 	br	224fc <__adddf3+0x27c>
   2259c:	1800541e 	bne	r3,zero,226f0 <__adddf3+0x470>
   225a0:	80800044 	addi	r2,r16,1
   225a4:	1081ffcc 	andi	r2,r2,2047
   225a8:	00c00044 	movi	r3,1
   225ac:	1880a00e 	bge	r3,r2,22830 <__adddf3+0x5b0>
   225b0:	8989c83a 	sub	r4,r17,r6
   225b4:	8905803a 	cmpltu	r2,r17,r4
   225b8:	4267c83a 	sub	r19,r8,r9
   225bc:	98a7c83a 	sub	r19,r19,r2
   225c0:	9880202c 	andhi	r2,r19,128
   225c4:	10006326 	beq	r2,zero,22754 <__adddf3+0x4d4>
   225c8:	3463c83a 	sub	r17,r6,r17
   225cc:	4a07c83a 	sub	r3,r9,r8
   225d0:	344d803a 	cmpltu	r6,r6,r17
   225d4:	19a7c83a 	sub	r19,r3,r6
   225d8:	3825883a 	mov	r18,r7
   225dc:	983f8a1e 	bne	r19,zero,22408 <__adddf3+0x188>
   225e0:	8809883a 	mov	r4,r17
   225e4:	0022d980 	call	22d98 <__clzsi2>
   225e8:	10800804 	addi	r2,r2,32
   225ec:	10fffe04 	addi	r3,r2,-8
   225f0:	010007c4 	movi	r4,31
   225f4:	20ff890e 	bge	r4,r3,2241c <__adddf3+0x19c>
   225f8:	10bff604 	addi	r2,r2,-40
   225fc:	8884983a 	sll	r2,r17,r2
   22600:	0023883a 	mov	r17,zero
   22604:	1c3f8c0e 	bge	r3,r16,22438 <__adddf3+0x1b8>
   22608:	023fe034 	movhi	r8,65408
   2260c:	423fffc4 	addi	r8,r8,-1
   22610:	80e1c83a 	sub	r16,r16,r3
   22614:	1210703a 	and	r8,r2,r8
   22618:	003f3806 	br	222fc <__adddf3+0x7c>
   2261c:	9007883a 	mov	r3,r18
   22620:	0011883a 	mov	r8,zero
   22624:	0005883a 	mov	r2,zero
   22628:	003f4c06 	br	2235c <__adddf3+0xdc>
   2262c:	498cb03a 	or	r6,r9,r6
   22630:	300cc03a 	cmpne	r6,r6,zero
   22634:	0007883a 	mov	r3,zero
   22638:	003f6806 	br	223dc <__adddf3+0x15c>
   2263c:	20009c1e 	bne	r4,zero,228b0 <__adddf3+0x630>
   22640:	80800044 	addi	r2,r16,1
   22644:	1141ffcc 	andi	r5,r2,2047
   22648:	01000044 	movi	r4,1
   2264c:	2140670e 	bge	r4,r5,227ec <__adddf3+0x56c>
   22650:	0101ffc4 	movi	r4,2047
   22654:	11007f26 	beq	r2,r4,22854 <__adddf3+0x5d4>
   22658:	898d883a 	add	r6,r17,r6
   2265c:	4247883a 	add	r3,r8,r9
   22660:	3451803a 	cmpltu	r8,r6,r17
   22664:	40d1883a 	add	r8,r8,r3
   22668:	402297fa 	slli	r17,r8,31
   2266c:	300cd07a 	srli	r6,r6,1
   22670:	4010d07a 	srli	r8,r8,1
   22674:	1021883a 	mov	r16,r2
   22678:	89a2b03a 	or	r17,r17,r6
   2267c:	003f1f06 	br	222fc <__adddf3+0x7c>
   22680:	0081ffc4 	movi	r2,2047
   22684:	80bf481e 	bne	r16,r2,223a8 <__adddf3+0x128>
   22688:	003f1c06 	br	222fc <__adddf3+0x7c>
   2268c:	843ff844 	addi	r16,r16,-31
   22690:	01000804 	movi	r4,32
   22694:	1406d83a 	srl	r3,r2,r16
   22698:	41005026 	beq	r8,r4,227dc <__adddf3+0x55c>
   2269c:	01001004 	movi	r4,64
   226a0:	2211c83a 	sub	r8,r4,r8
   226a4:	1204983a 	sll	r2,r2,r8
   226a8:	88a2b03a 	or	r17,r17,r2
   226ac:	8822c03a 	cmpne	r17,r17,zero
   226b0:	1c62b03a 	or	r17,r3,r17
   226b4:	0011883a 	mov	r8,zero
   226b8:	0021883a 	mov	r16,zero
   226bc:	003f7106 	br	22484 <__adddf3+0x204>
   226c0:	193ff804 	addi	r4,r3,-32
   226c4:	00800804 	movi	r2,32
   226c8:	4908d83a 	srl	r4,r9,r4
   226cc:	18804526 	beq	r3,r2,227e4 <__adddf3+0x564>
   226d0:	00801004 	movi	r2,64
   226d4:	10c5c83a 	sub	r2,r2,r3
   226d8:	4886983a 	sll	r3,r9,r2
   226dc:	198cb03a 	or	r6,r3,r6
   226e0:	300cc03a 	cmpne	r6,r6,zero
   226e4:	218cb03a 	or	r6,r4,r6
   226e8:	0007883a 	mov	r3,zero
   226ec:	003f3b06 	br	223dc <__adddf3+0x15c>
   226f0:	80002a26 	beq	r16,zero,2279c <__adddf3+0x51c>
   226f4:	0101ffc4 	movi	r4,2047
   226f8:	11006826 	beq	r2,r4,2289c <__adddf3+0x61c>
   226fc:	00c7c83a 	sub	r3,zero,r3
   22700:	42002034 	orhi	r8,r8,128
   22704:	01000e04 	movi	r4,56
   22708:	20c07c16 	blt	r4,r3,228fc <__adddf3+0x67c>
   2270c:	010007c4 	movi	r4,31
   22710:	20c0da16 	blt	r4,r3,22a7c <__adddf3+0x7fc>
   22714:	01000804 	movi	r4,32
   22718:	20c9c83a 	sub	r4,r4,r3
   2271c:	4114983a 	sll	r10,r8,r4
   22720:	88cad83a 	srl	r5,r17,r3
   22724:	8908983a 	sll	r4,r17,r4
   22728:	40c6d83a 	srl	r3,r8,r3
   2272c:	5162b03a 	or	r17,r10,r5
   22730:	2008c03a 	cmpne	r4,r4,zero
   22734:	8922b03a 	or	r17,r17,r4
   22738:	3463c83a 	sub	r17,r6,r17
   2273c:	48c7c83a 	sub	r3,r9,r3
   22740:	344d803a 	cmpltu	r6,r6,r17
   22744:	1991c83a 	sub	r8,r3,r6
   22748:	1021883a 	mov	r16,r2
   2274c:	3825883a 	mov	r18,r7
   22750:	003f2706 	br	223f0 <__adddf3+0x170>
   22754:	24d0b03a 	or	r8,r4,r19
   22758:	40001b1e 	bne	r8,zero,227c8 <__adddf3+0x548>
   2275c:	0005883a 	mov	r2,zero
   22760:	0007883a 	mov	r3,zero
   22764:	0021883a 	mov	r16,zero
   22768:	003f4d06 	br	224a0 <__adddf3+0x220>
   2276c:	008007c4 	movi	r2,31
   22770:	11003c16 	blt	r2,r4,22864 <__adddf3+0x5e4>
   22774:	00800804 	movi	r2,32
   22778:	1105c83a 	sub	r2,r2,r4
   2277c:	488e983a 	sll	r7,r9,r2
   22780:	310ad83a 	srl	r5,r6,r4
   22784:	3084983a 	sll	r2,r6,r2
   22788:	4912d83a 	srl	r9,r9,r4
   2278c:	394ab03a 	or	r5,r7,r5
   22790:	1004c03a 	cmpne	r2,r2,zero
   22794:	288ab03a 	or	r5,r5,r2
   22798:	003f5306 	br	224e8 <__adddf3+0x268>
   2279c:	4448b03a 	or	r4,r8,r17
   227a0:	20003e26 	beq	r4,zero,2289c <__adddf3+0x61c>
   227a4:	00c6303a 	nor	r3,zero,r3
   227a8:	18003a1e 	bne	r3,zero,22894 <__adddf3+0x614>
   227ac:	3463c83a 	sub	r17,r6,r17
   227b0:	4a07c83a 	sub	r3,r9,r8
   227b4:	344d803a 	cmpltu	r6,r6,r17
   227b8:	1991c83a 	sub	r8,r3,r6
   227bc:	1021883a 	mov	r16,r2
   227c0:	3825883a 	mov	r18,r7
   227c4:	003f0a06 	br	223f0 <__adddf3+0x170>
   227c8:	2023883a 	mov	r17,r4
   227cc:	003f0d06 	br	22404 <__adddf3+0x184>
   227d0:	0081ffc4 	movi	r2,2047
   227d4:	80bf3f1e 	bne	r16,r2,224d4 <__adddf3+0x254>
   227d8:	003ec806 	br	222fc <__adddf3+0x7c>
   227dc:	0005883a 	mov	r2,zero
   227e0:	003fb106 	br	226a8 <__adddf3+0x428>
   227e4:	0007883a 	mov	r3,zero
   227e8:	003fbc06 	br	226dc <__adddf3+0x45c>
   227ec:	4444b03a 	or	r2,r8,r17
   227f0:	8000871e 	bne	r16,zero,22a10 <__adddf3+0x790>
   227f4:	1000ba26 	beq	r2,zero,22ae0 <__adddf3+0x860>
   227f8:	4984b03a 	or	r2,r9,r6
   227fc:	103ebf26 	beq	r2,zero,222fc <__adddf3+0x7c>
   22800:	8985883a 	add	r2,r17,r6
   22804:	4247883a 	add	r3,r8,r9
   22808:	1451803a 	cmpltu	r8,r2,r17
   2280c:	40d1883a 	add	r8,r8,r3
   22810:	40c0202c 	andhi	r3,r8,128
   22814:	1023883a 	mov	r17,r2
   22818:	183f1a26 	beq	r3,zero,22484 <__adddf3+0x204>
   2281c:	00bfe034 	movhi	r2,65408
   22820:	10bfffc4 	addi	r2,r2,-1
   22824:	2021883a 	mov	r16,r4
   22828:	4090703a 	and	r8,r8,r2
   2282c:	003eb306 	br	222fc <__adddf3+0x7c>
   22830:	4444b03a 	or	r2,r8,r17
   22834:	8000291e 	bne	r16,zero,228dc <__adddf3+0x65c>
   22838:	10004b1e 	bne	r2,zero,22968 <__adddf3+0x6e8>
   2283c:	4990b03a 	or	r8,r9,r6
   22840:	40008b26 	beq	r8,zero,22a70 <__adddf3+0x7f0>
   22844:	4811883a 	mov	r8,r9
   22848:	3023883a 	mov	r17,r6
   2284c:	3825883a 	mov	r18,r7
   22850:	003eaa06 	br	222fc <__adddf3+0x7c>
   22854:	1021883a 	mov	r16,r2
   22858:	0011883a 	mov	r8,zero
   2285c:	0005883a 	mov	r2,zero
   22860:	003f0f06 	br	224a0 <__adddf3+0x220>
   22864:	217ff804 	addi	r5,r4,-32
   22868:	00800804 	movi	r2,32
   2286c:	494ad83a 	srl	r5,r9,r5
   22870:	20807d26 	beq	r4,r2,22a68 <__adddf3+0x7e8>
   22874:	00801004 	movi	r2,64
   22878:	1109c83a 	sub	r4,r2,r4
   2287c:	4912983a 	sll	r9,r9,r4
   22880:	498cb03a 	or	r6,r9,r6
   22884:	300cc03a 	cmpne	r6,r6,zero
   22888:	298ab03a 	or	r5,r5,r6
   2288c:	0013883a 	mov	r9,zero
   22890:	003f1506 	br	224e8 <__adddf3+0x268>
   22894:	0101ffc4 	movi	r4,2047
   22898:	113f9a1e 	bne	r2,r4,22704 <__adddf3+0x484>
   2289c:	4811883a 	mov	r8,r9
   228a0:	3023883a 	mov	r17,r6
   228a4:	1021883a 	mov	r16,r2
   228a8:	3825883a 	mov	r18,r7
   228ac:	003e9306 	br	222fc <__adddf3+0x7c>
   228b0:	8000161e 	bne	r16,zero,2290c <__adddf3+0x68c>
   228b4:	444ab03a 	or	r5,r8,r17
   228b8:	28005126 	beq	r5,zero,22a00 <__adddf3+0x780>
   228bc:	0108303a 	nor	r4,zero,r4
   228c0:	20004d1e 	bne	r4,zero,229f8 <__adddf3+0x778>
   228c4:	89a3883a 	add	r17,r17,r6
   228c8:	4253883a 	add	r9,r8,r9
   228cc:	898d803a 	cmpltu	r6,r17,r6
   228d0:	3251883a 	add	r8,r6,r9
   228d4:	1021883a 	mov	r16,r2
   228d8:	003f0806 	br	224fc <__adddf3+0x27c>
   228dc:	1000301e 	bne	r2,zero,229a0 <__adddf3+0x720>
   228e0:	4984b03a 	or	r2,r9,r6
   228e4:	10007126 	beq	r2,zero,22aac <__adddf3+0x82c>
   228e8:	4811883a 	mov	r8,r9
   228ec:	3023883a 	mov	r17,r6
   228f0:	3825883a 	mov	r18,r7
   228f4:	0401ffc4 	movi	r16,2047
   228f8:	003e8006 	br	222fc <__adddf3+0x7c>
   228fc:	4462b03a 	or	r17,r8,r17
   22900:	8822c03a 	cmpne	r17,r17,zero
   22904:	0007883a 	mov	r3,zero
   22908:	003f8b06 	br	22738 <__adddf3+0x4b8>
   2290c:	0141ffc4 	movi	r5,2047
   22910:	11403b26 	beq	r2,r5,22a00 <__adddf3+0x780>
   22914:	0109c83a 	sub	r4,zero,r4
   22918:	42002034 	orhi	r8,r8,128
   2291c:	01400e04 	movi	r5,56
   22920:	29006716 	blt	r5,r4,22ac0 <__adddf3+0x840>
   22924:	014007c4 	movi	r5,31
   22928:	29007016 	blt	r5,r4,22aec <__adddf3+0x86c>
   2292c:	01400804 	movi	r5,32
   22930:	290bc83a 	sub	r5,r5,r4
   22934:	4154983a 	sll	r10,r8,r5
   22938:	890ed83a 	srl	r7,r17,r4
   2293c:	894a983a 	sll	r5,r17,r5
   22940:	4108d83a 	srl	r4,r8,r4
   22944:	51e2b03a 	or	r17,r10,r7
   22948:	280ac03a 	cmpne	r5,r5,zero
   2294c:	8962b03a 	or	r17,r17,r5
   22950:	89a3883a 	add	r17,r17,r6
   22954:	2253883a 	add	r9,r4,r9
   22958:	898d803a 	cmpltu	r6,r17,r6
   2295c:	3251883a 	add	r8,r6,r9
   22960:	1021883a 	mov	r16,r2
   22964:	003ee506 	br	224fc <__adddf3+0x27c>
   22968:	4984b03a 	or	r2,r9,r6
   2296c:	103e6326 	beq	r2,zero,222fc <__adddf3+0x7c>
   22970:	8987c83a 	sub	r3,r17,r6
   22974:	88c9803a 	cmpltu	r4,r17,r3
   22978:	4245c83a 	sub	r2,r8,r9
   2297c:	1105c83a 	sub	r2,r2,r4
   22980:	1100202c 	andhi	r4,r2,128
   22984:	203ebb26 	beq	r4,zero,22474 <__adddf3+0x1f4>
   22988:	3463c83a 	sub	r17,r6,r17
   2298c:	4a07c83a 	sub	r3,r9,r8
   22990:	344d803a 	cmpltu	r6,r6,r17
   22994:	1991c83a 	sub	r8,r3,r6
   22998:	3825883a 	mov	r18,r7
   2299c:	003e5706 	br	222fc <__adddf3+0x7c>
   229a0:	4984b03a 	or	r2,r9,r6
   229a4:	10002e26 	beq	r2,zero,22a60 <__adddf3+0x7e0>
   229a8:	4004d0fa 	srli	r2,r8,3
   229ac:	8822d0fa 	srli	r17,r17,3
   229b0:	4010977a 	slli	r8,r8,29
   229b4:	10c0022c 	andhi	r3,r2,8
   229b8:	4462b03a 	or	r17,r8,r17
   229bc:	18000826 	beq	r3,zero,229e0 <__adddf3+0x760>
   229c0:	4808d0fa 	srli	r4,r9,3
   229c4:	20c0022c 	andhi	r3,r4,8
   229c8:	1800051e 	bne	r3,zero,229e0 <__adddf3+0x760>
   229cc:	300cd0fa 	srli	r6,r6,3
   229d0:	4806977a 	slli	r3,r9,29
   229d4:	2005883a 	mov	r2,r4
   229d8:	3825883a 	mov	r18,r7
   229dc:	19a2b03a 	or	r17,r3,r6
   229e0:	8810d77a 	srli	r8,r17,29
   229e4:	100490fa 	slli	r2,r2,3
   229e8:	882290fa 	slli	r17,r17,3
   229ec:	0401ffc4 	movi	r16,2047
   229f0:	4090b03a 	or	r8,r8,r2
   229f4:	003e4106 	br	222fc <__adddf3+0x7c>
   229f8:	0141ffc4 	movi	r5,2047
   229fc:	117fc71e 	bne	r2,r5,2291c <__adddf3+0x69c>
   22a00:	4811883a 	mov	r8,r9
   22a04:	3023883a 	mov	r17,r6
   22a08:	1021883a 	mov	r16,r2
   22a0c:	003e3b06 	br	222fc <__adddf3+0x7c>
   22a10:	10002f26 	beq	r2,zero,22ad0 <__adddf3+0x850>
   22a14:	4984b03a 	or	r2,r9,r6
   22a18:	10001126 	beq	r2,zero,22a60 <__adddf3+0x7e0>
   22a1c:	4004d0fa 	srli	r2,r8,3
   22a20:	8822d0fa 	srli	r17,r17,3
   22a24:	4010977a 	slli	r8,r8,29
   22a28:	10c0022c 	andhi	r3,r2,8
   22a2c:	4462b03a 	or	r17,r8,r17
   22a30:	183feb26 	beq	r3,zero,229e0 <__adddf3+0x760>
   22a34:	4808d0fa 	srli	r4,r9,3
   22a38:	20c0022c 	andhi	r3,r4,8
   22a3c:	183fe81e 	bne	r3,zero,229e0 <__adddf3+0x760>
   22a40:	300cd0fa 	srli	r6,r6,3
   22a44:	4806977a 	slli	r3,r9,29
   22a48:	2005883a 	mov	r2,r4
   22a4c:	19a2b03a 	or	r17,r3,r6
   22a50:	003fe306 	br	229e0 <__adddf3+0x760>
   22a54:	0011883a 	mov	r8,zero
   22a58:	0005883a 	mov	r2,zero
   22a5c:	003e3f06 	br	2235c <__adddf3+0xdc>
   22a60:	0401ffc4 	movi	r16,2047
   22a64:	003e2506 	br	222fc <__adddf3+0x7c>
   22a68:	0013883a 	mov	r9,zero
   22a6c:	003f8406 	br	22880 <__adddf3+0x600>
   22a70:	0005883a 	mov	r2,zero
   22a74:	0007883a 	mov	r3,zero
   22a78:	003e8906 	br	224a0 <__adddf3+0x220>
   22a7c:	197ff804 	addi	r5,r3,-32
   22a80:	01000804 	movi	r4,32
   22a84:	414ad83a 	srl	r5,r8,r5
   22a88:	19002426 	beq	r3,r4,22b1c <__adddf3+0x89c>
   22a8c:	01001004 	movi	r4,64
   22a90:	20c7c83a 	sub	r3,r4,r3
   22a94:	40c6983a 	sll	r3,r8,r3
   22a98:	1c46b03a 	or	r3,r3,r17
   22a9c:	1806c03a 	cmpne	r3,r3,zero
   22aa0:	28e2b03a 	or	r17,r5,r3
   22aa4:	0007883a 	mov	r3,zero
   22aa8:	003f2306 	br	22738 <__adddf3+0x4b8>
   22aac:	0007883a 	mov	r3,zero
   22ab0:	5811883a 	mov	r8,r11
   22ab4:	00bfffc4 	movi	r2,-1
   22ab8:	0401ffc4 	movi	r16,2047
   22abc:	003e7806 	br	224a0 <__adddf3+0x220>
   22ac0:	4462b03a 	or	r17,r8,r17
   22ac4:	8822c03a 	cmpne	r17,r17,zero
   22ac8:	0009883a 	mov	r4,zero
   22acc:	003fa006 	br	22950 <__adddf3+0x6d0>
   22ad0:	4811883a 	mov	r8,r9
   22ad4:	3023883a 	mov	r17,r6
   22ad8:	0401ffc4 	movi	r16,2047
   22adc:	003e0706 	br	222fc <__adddf3+0x7c>
   22ae0:	4811883a 	mov	r8,r9
   22ae4:	3023883a 	mov	r17,r6
   22ae8:	003e0406 	br	222fc <__adddf3+0x7c>
   22aec:	21fff804 	addi	r7,r4,-32
   22af0:	01400804 	movi	r5,32
   22af4:	41ced83a 	srl	r7,r8,r7
   22af8:	21400a26 	beq	r4,r5,22b24 <__adddf3+0x8a4>
   22afc:	01401004 	movi	r5,64
   22b00:	2909c83a 	sub	r4,r5,r4
   22b04:	4108983a 	sll	r4,r8,r4
   22b08:	2448b03a 	or	r4,r4,r17
   22b0c:	2008c03a 	cmpne	r4,r4,zero
   22b10:	3922b03a 	or	r17,r7,r4
   22b14:	0009883a 	mov	r4,zero
   22b18:	003f8d06 	br	22950 <__adddf3+0x6d0>
   22b1c:	0007883a 	mov	r3,zero
   22b20:	003fdd06 	br	22a98 <__adddf3+0x818>
   22b24:	0009883a 	mov	r4,zero
   22b28:	003ff706 	br	22b08 <__adddf3+0x888>

00022b2c <__gedf2>:
   22b2c:	2804d53a 	srli	r2,r5,20
   22b30:	3806d53a 	srli	r3,r7,20
   22b34:	02000434 	movhi	r8,16
   22b38:	423fffc4 	addi	r8,r8,-1
   22b3c:	1081ffcc 	andi	r2,r2,2047
   22b40:	0241ffc4 	movi	r9,2047
   22b44:	2a14703a 	and	r10,r5,r8
   22b48:	18c1ffcc 	andi	r3,r3,2047
   22b4c:	3a10703a 	and	r8,r7,r8
   22b50:	280ad7fa 	srli	r5,r5,31
   22b54:	380ed7fa 	srli	r7,r7,31
   22b58:	12401d26 	beq	r2,r9,22bd0 <__gedf2+0xa4>
   22b5c:	0241ffc4 	movi	r9,2047
   22b60:	1a401226 	beq	r3,r9,22bac <__gedf2+0x80>
   22b64:	1000081e 	bne	r2,zero,22b88 <__gedf2+0x5c>
   22b68:	2296b03a 	or	r11,r4,r10
   22b6c:	5813003a 	cmpeq	r9,r11,zero
   22b70:	1800091e 	bne	r3,zero,22b98 <__gedf2+0x6c>
   22b74:	3218b03a 	or	r12,r6,r8
   22b78:	6000071e 	bne	r12,zero,22b98 <__gedf2+0x6c>
   22b7c:	0005883a 	mov	r2,zero
   22b80:	5800101e 	bne	r11,zero,22bc4 <__gedf2+0x98>
   22b84:	f800283a 	ret
   22b88:	18000c1e 	bne	r3,zero,22bbc <__gedf2+0x90>
   22b8c:	3212b03a 	or	r9,r6,r8
   22b90:	48000c26 	beq	r9,zero,22bc4 <__gedf2+0x98>
   22b94:	0013883a 	mov	r9,zero
   22b98:	39c03fcc 	andi	r7,r7,255
   22b9c:	48000826 	beq	r9,zero,22bc0 <__gedf2+0x94>
   22ba0:	38000926 	beq	r7,zero,22bc8 <__gedf2+0x9c>
   22ba4:	00800044 	movi	r2,1
   22ba8:	f800283a 	ret
   22bac:	3212b03a 	or	r9,r6,r8
   22bb0:	483fec26 	beq	r9,zero,22b64 <__gedf2+0x38>
   22bb4:	00bfff84 	movi	r2,-2
   22bb8:	f800283a 	ret
   22bbc:	39c03fcc 	andi	r7,r7,255
   22bc0:	29c00626 	beq	r5,r7,22bdc <__gedf2+0xb0>
   22bc4:	283ff726 	beq	r5,zero,22ba4 <__gedf2+0x78>
   22bc8:	00bfffc4 	movi	r2,-1
   22bcc:	f800283a 	ret
   22bd0:	2292b03a 	or	r9,r4,r10
   22bd4:	483fe126 	beq	r9,zero,22b5c <__gedf2+0x30>
   22bd8:	003ff606 	br	22bb4 <__gedf2+0x88>
   22bdc:	18bff916 	blt	r3,r2,22bc4 <__gedf2+0x98>
   22be0:	10c00316 	blt	r2,r3,22bf0 <__gedf2+0xc4>
   22be4:	42bff736 	bltu	r8,r10,22bc4 <__gedf2+0x98>
   22be8:	52000326 	beq	r10,r8,22bf8 <__gedf2+0xcc>
   22bec:	5200042e 	bgeu	r10,r8,22c00 <__gedf2+0xd4>
   22bf0:	283fec1e 	bne	r5,zero,22ba4 <__gedf2+0x78>
   22bf4:	003ff406 	br	22bc8 <__gedf2+0x9c>
   22bf8:	313ff236 	bltu	r6,r4,22bc4 <__gedf2+0x98>
   22bfc:	21bffc36 	bltu	r4,r6,22bf0 <__gedf2+0xc4>
   22c00:	0005883a 	mov	r2,zero
   22c04:	f800283a 	ret

00022c08 <__fixdfsi>:
   22c08:	280cd53a 	srli	r6,r5,20
   22c0c:	00c00434 	movhi	r3,16
   22c10:	18ffffc4 	addi	r3,r3,-1
   22c14:	3181ffcc 	andi	r6,r6,2047
   22c18:	01c0ff84 	movi	r7,1022
   22c1c:	28c6703a 	and	r3,r5,r3
   22c20:	280ad7fa 	srli	r5,r5,31
   22c24:	3980120e 	bge	r7,r6,22c70 <__fixdfsi+0x68>
   22c28:	00810744 	movi	r2,1053
   22c2c:	11800c16 	blt	r2,r6,22c60 <__fixdfsi+0x58>
   22c30:	00810cc4 	movi	r2,1075
   22c34:	1185c83a 	sub	r2,r2,r6
   22c38:	01c007c4 	movi	r7,31
   22c3c:	18c00434 	orhi	r3,r3,16
   22c40:	38800d16 	blt	r7,r2,22c78 <__fixdfsi+0x70>
   22c44:	31befb44 	addi	r6,r6,-1043
   22c48:	2084d83a 	srl	r2,r4,r2
   22c4c:	1986983a 	sll	r3,r3,r6
   22c50:	1884b03a 	or	r2,r3,r2
   22c54:	28000726 	beq	r5,zero,22c74 <__fixdfsi+0x6c>
   22c58:	0085c83a 	sub	r2,zero,r2
   22c5c:	f800283a 	ret
   22c60:	00a00034 	movhi	r2,32768
   22c64:	10bfffc4 	addi	r2,r2,-1
   22c68:	2885883a 	add	r2,r5,r2
   22c6c:	f800283a 	ret
   22c70:	0005883a 	mov	r2,zero
   22c74:	f800283a 	ret
   22c78:	008104c4 	movi	r2,1043
   22c7c:	1185c83a 	sub	r2,r2,r6
   22c80:	1884d83a 	srl	r2,r3,r2
   22c84:	003ff306 	br	22c54 <__fixdfsi+0x4c>

00022c88 <__extendsfdf2>:
   22c88:	200ad5fa 	srli	r5,r4,23
   22c8c:	defffd04 	addi	sp,sp,-12
   22c90:	dc400115 	stw	r17,4(sp)
   22c94:	29403fcc 	andi	r5,r5,255
   22c98:	29800044 	addi	r6,r5,1
   22c9c:	04402034 	movhi	r17,128
   22ca0:	dc000015 	stw	r16,0(sp)
   22ca4:	8c7fffc4 	addi	r17,r17,-1
   22ca8:	dfc00215 	stw	ra,8(sp)
   22cac:	31803fcc 	andi	r6,r6,255
   22cb0:	00800044 	movi	r2,1
   22cb4:	8922703a 	and	r17,r17,r4
   22cb8:	2020d7fa 	srli	r16,r4,31
   22cbc:	1180110e 	bge	r2,r6,22d04 <__extendsfdf2+0x7c>
   22cc0:	880cd0fa 	srli	r6,r17,3
   22cc4:	8822977a 	slli	r17,r17,29
   22cc8:	2940e004 	addi	r5,r5,896
   22ccc:	2941ffcc 	andi	r5,r5,2047
   22cd0:	2804953a 	slli	r2,r5,20
   22cd4:	01400434 	movhi	r5,16
   22cd8:	800697fa 	slli	r3,r16,31
   22cdc:	297fffc4 	addi	r5,r5,-1
   22ce0:	314a703a 	and	r5,r6,r5
   22ce4:	288ab03a 	or	r5,r5,r2
   22ce8:	28c6b03a 	or	r3,r5,r3
   22cec:	8805883a 	mov	r2,r17
   22cf0:	dfc00217 	ldw	ra,8(sp)
   22cf4:	dc400117 	ldw	r17,4(sp)
   22cf8:	dc000017 	ldw	r16,0(sp)
   22cfc:	dec00304 	addi	sp,sp,12
   22d00:	f800283a 	ret
   22d04:	2800111e 	bne	r5,zero,22d4c <__extendsfdf2+0xc4>
   22d08:	88001c26 	beq	r17,zero,22d7c <__extendsfdf2+0xf4>
   22d0c:	8809883a 	mov	r4,r17
   22d10:	0022d980 	call	22d98 <__clzsi2>
   22d14:	00c00284 	movi	r3,10
   22d18:	18801b16 	blt	r3,r2,22d88 <__extendsfdf2+0x100>
   22d1c:	018002c4 	movi	r6,11
   22d20:	308dc83a 	sub	r6,r6,r2
   22d24:	11000544 	addi	r4,r2,21
   22d28:	8986d83a 	srl	r3,r17,r6
   22d2c:	8922983a 	sll	r17,r17,r4
   22d30:	0180e244 	movi	r6,905
   22d34:	01400434 	movhi	r5,16
   22d38:	3085c83a 	sub	r2,r6,r2
   22d3c:	297fffc4 	addi	r5,r5,-1
   22d40:	194c703a 	and	r6,r3,r5
   22d44:	1141ffcc 	andi	r5,r2,2047
   22d48:	003fe006 	br	22ccc <__extendsfdf2+0x44>
   22d4c:	88000826 	beq	r17,zero,22d70 <__extendsfdf2+0xe8>
   22d50:	880cd0fa 	srli	r6,r17,3
   22d54:	00800434 	movhi	r2,16
   22d58:	10bfffc4 	addi	r2,r2,-1
   22d5c:	31800234 	orhi	r6,r6,8
   22d60:	8822977a 	slli	r17,r17,29
   22d64:	308c703a 	and	r6,r6,r2
   22d68:	0141ffc4 	movi	r5,2047
   22d6c:	003fd706 	br	22ccc <__extendsfdf2+0x44>
   22d70:	0141ffc4 	movi	r5,2047
   22d74:	000d883a 	mov	r6,zero
   22d78:	003fd406 	br	22ccc <__extendsfdf2+0x44>
   22d7c:	000b883a 	mov	r5,zero
   22d80:	000d883a 	mov	r6,zero
   22d84:	003fd106 	br	22ccc <__extendsfdf2+0x44>
   22d88:	11bffd44 	addi	r6,r2,-11
   22d8c:	8986983a 	sll	r3,r17,r6
   22d90:	0023883a 	mov	r17,zero
   22d94:	003fe606 	br	22d30 <__extendsfdf2+0xa8>

00022d98 <__clzsi2>:
   22d98:	00bfffd4 	movui	r2,65535
   22d9c:	11000536 	bltu	r2,r4,22db4 <__clzsi2+0x1c>
   22da0:	00803fc4 	movi	r2,255
   22da4:	11000f36 	bltu	r2,r4,22de4 <__clzsi2+0x4c>
   22da8:	00800804 	movi	r2,32
   22dac:	0007883a 	mov	r3,zero
   22db0:	00000506 	br	22dc8 <__clzsi2+0x30>
   22db4:	00804034 	movhi	r2,256
   22db8:	10bfffc4 	addi	r2,r2,-1
   22dbc:	11000c2e 	bgeu	r2,r4,22df0 <__clzsi2+0x58>
   22dc0:	00800204 	movi	r2,8
   22dc4:	00c00604 	movi	r3,24
   22dc8:	20c8d83a 	srl	r4,r4,r3
   22dcc:	00c000b4 	movhi	r3,2
   22dd0:	18d5b904 	addi	r3,r3,22244
   22dd4:	1909883a 	add	r4,r3,r4
   22dd8:	20c00003 	ldbu	r3,0(r4)
   22ddc:	10c5c83a 	sub	r2,r2,r3
   22de0:	f800283a 	ret
   22de4:	00800604 	movi	r2,24
   22de8:	00c00204 	movi	r3,8
   22dec:	003ff606 	br	22dc8 <__clzsi2+0x30>
   22df0:	00800404 	movi	r2,16
   22df4:	1007883a 	mov	r3,r2
   22df8:	003ff306 	br	22dc8 <__clzsi2+0x30>

00022dfc <_printf_r>:
   22dfc:	defffd04 	addi	sp,sp,-12
   22e00:	dfc00015 	stw	ra,0(sp)
   22e04:	d9800115 	stw	r6,4(sp)
   22e08:	d9c00215 	stw	r7,8(sp)
   22e0c:	20c00217 	ldw	r3,8(r4)
   22e10:	018000b4 	movhi	r6,2
   22e14:	318eda04 	addi	r6,r6,15208
   22e18:	19800115 	stw	r6,4(r3)
   22e1c:	280d883a 	mov	r6,r5
   22e20:	21400217 	ldw	r5,8(r4)
   22e24:	d9c00104 	addi	r7,sp,4
   22e28:	00236280 	call	23628 <___vfprintf_internal_r>
   22e2c:	dfc00017 	ldw	ra,0(sp)
   22e30:	dec00304 	addi	sp,sp,12
   22e34:	f800283a 	ret

00022e38 <printf>:
   22e38:	defffc04 	addi	sp,sp,-16
   22e3c:	dfc00015 	stw	ra,0(sp)
   22e40:	d9400115 	stw	r5,4(sp)
   22e44:	d9800215 	stw	r6,8(sp)
   22e48:	d9c00315 	stw	r7,12(sp)
   22e4c:	008000b4 	movhi	r2,2
   22e50:	1096b504 	addi	r2,r2,23252
   22e54:	10800017 	ldw	r2,0(r2)
   22e58:	014000b4 	movhi	r5,2
   22e5c:	294eda04 	addi	r5,r5,15208
   22e60:	10c00217 	ldw	r3,8(r2)
   22e64:	d9800104 	addi	r6,sp,4
   22e68:	19400115 	stw	r5,4(r3)
   22e6c:	200b883a 	mov	r5,r4
   22e70:	11000217 	ldw	r4,8(r2)
   22e74:	0023b4c0 	call	23b4c <__vfprintf_internal>
   22e78:	dfc00017 	ldw	ra,0(sp)
   22e7c:	dec00404 	addi	sp,sp,16
   22e80:	f800283a 	ret

00022e84 <_puts_r>:
   22e84:	defffd04 	addi	sp,sp,-12
   22e88:	dc000015 	stw	r16,0(sp)
   22e8c:	2021883a 	mov	r16,r4
   22e90:	2809883a 	mov	r4,r5
   22e94:	dfc00215 	stw	ra,8(sp)
   22e98:	dc400115 	stw	r17,4(sp)
   22e9c:	2823883a 	mov	r17,r5
   22ea0:	0022ff40 	call	22ff4 <strlen>
   22ea4:	81400217 	ldw	r5,8(r16)
   22ea8:	010000b4 	movhi	r4,2
   22eac:	210eda04 	addi	r4,r4,15208
   22eb0:	29000115 	stw	r4,4(r5)
   22eb4:	100f883a 	mov	r7,r2
   22eb8:	880d883a 	mov	r6,r17
   22ebc:	8009883a 	mov	r4,r16
   22ec0:	0023b680 	call	23b68 <__sfvwrite_small_dev>
   22ec4:	00ffffc4 	movi	r3,-1
   22ec8:	10c00926 	beq	r2,r3,22ef0 <_puts_r+0x6c>
   22ecc:	81400217 	ldw	r5,8(r16)
   22ed0:	018000b4 	movhi	r6,2
   22ed4:	01c00044 	movi	r7,1
   22ed8:	28800117 	ldw	r2,4(r5)
   22edc:	3195f904 	addi	r6,r6,22500
   22ee0:	8009883a 	mov	r4,r16
   22ee4:	103ee83a 	callr	r2
   22ee8:	10bfffe0 	cmpeqi	r2,r2,-1
   22eec:	0085c83a 	sub	r2,zero,r2
   22ef0:	dfc00217 	ldw	ra,8(sp)
   22ef4:	dc400117 	ldw	r17,4(sp)
   22ef8:	dc000017 	ldw	r16,0(sp)
   22efc:	dec00304 	addi	sp,sp,12
   22f00:	f800283a 	ret

00022f04 <puts>:
   22f04:	008000b4 	movhi	r2,2
   22f08:	1096b504 	addi	r2,r2,23252
   22f0c:	200b883a 	mov	r5,r4
   22f10:	11000017 	ldw	r4,0(r2)
   22f14:	0022e841 	jmpi	22e84 <_puts_r>

00022f18 <_sprintf_r>:
   22f18:	defff704 	addi	sp,sp,-36
   22f1c:	dfc00715 	stw	ra,28(sp)
   22f20:	d9c00815 	stw	r7,32(sp)
   22f24:	00808204 	movi	r2,520
   22f28:	d880000d 	sth	r2,0(sp)
   22f2c:	00a00034 	movhi	r2,32768
   22f30:	10bfffc4 	addi	r2,r2,-1
   22f34:	d8800515 	stw	r2,20(sp)
   22f38:	d8800315 	stw	r2,12(sp)
   22f3c:	00bfffc4 	movi	r2,-1
   22f40:	d880008d 	sth	r2,2(sp)
   22f44:	008000b4 	movhi	r2,2
   22f48:	d9400415 	stw	r5,16(sp)
   22f4c:	d9400215 	stw	r5,8(sp)
   22f50:	108f0804 	addi	r2,r2,15392
   22f54:	d9c00804 	addi	r7,sp,32
   22f58:	d80b883a 	mov	r5,sp
   22f5c:	d8800115 	stw	r2,4(sp)
   22f60:	d8000615 	stw	zero,24(sp)
   22f64:	002307c0 	call	2307c <___svfprintf_internal_r>
   22f68:	d8c00417 	ldw	r3,16(sp)
   22f6c:	18000005 	stb	zero,0(r3)
   22f70:	dfc00717 	ldw	ra,28(sp)
   22f74:	dec00904 	addi	sp,sp,36
   22f78:	f800283a 	ret

00022f7c <sprintf>:
   22f7c:	defff604 	addi	sp,sp,-40
   22f80:	dfc00715 	stw	ra,28(sp)
   22f84:	d9800815 	stw	r6,32(sp)
   22f88:	d9c00915 	stw	r7,36(sp)
   22f8c:	00808204 	movi	r2,520
   22f90:	d880000d 	sth	r2,0(sp)
   22f94:	00a00034 	movhi	r2,32768
   22f98:	10bfffc4 	addi	r2,r2,-1
   22f9c:	d8800515 	stw	r2,20(sp)
   22fa0:	d8800315 	stw	r2,12(sp)
   22fa4:	00bfffc4 	movi	r2,-1
   22fa8:	d880008d 	sth	r2,2(sp)
   22fac:	008000b4 	movhi	r2,2
   22fb0:	108f0804 	addi	r2,r2,15392
   22fb4:	d8800115 	stw	r2,4(sp)
   22fb8:	008000b4 	movhi	r2,2
   22fbc:	1096b504 	addi	r2,r2,23252
   22fc0:	d9000415 	stw	r4,16(sp)
   22fc4:	d9000215 	stw	r4,8(sp)
   22fc8:	11000017 	ldw	r4,0(r2)
   22fcc:	280d883a 	mov	r6,r5
   22fd0:	d9c00804 	addi	r7,sp,32
   22fd4:	d80b883a 	mov	r5,sp
   22fd8:	d8000615 	stw	zero,24(sp)
   22fdc:	002307c0 	call	2307c <___svfprintf_internal_r>
   22fe0:	d8c00417 	ldw	r3,16(sp)
   22fe4:	18000005 	stb	zero,0(r3)
   22fe8:	dfc00717 	ldw	ra,28(sp)
   22fec:	dec00a04 	addi	sp,sp,40
   22ff0:	f800283a 	ret

00022ff4 <strlen>:
   22ff4:	2005883a 	mov	r2,r4
   22ff8:	10c00007 	ldb	r3,0(r2)
   22ffc:	18000226 	beq	r3,zero,23008 <strlen+0x14>
   23000:	10800044 	addi	r2,r2,1
   23004:	003ffc06 	br	22ff8 <strlen+0x4>
   23008:	1105c83a 	sub	r2,r2,r4
   2300c:	f800283a 	ret

00023010 <print_repeat>:
   23010:	defffb04 	addi	sp,sp,-20
   23014:	dc800315 	stw	r18,12(sp)
   23018:	dc400215 	stw	r17,8(sp)
   2301c:	dc000115 	stw	r16,4(sp)
   23020:	dfc00415 	stw	ra,16(sp)
   23024:	2025883a 	mov	r18,r4
   23028:	2823883a 	mov	r17,r5
   2302c:	d9800005 	stb	r6,0(sp)
   23030:	3821883a 	mov	r16,r7
   23034:	04000a0e 	bge	zero,r16,23060 <print_repeat+0x50>
   23038:	88800117 	ldw	r2,4(r17)
   2303c:	01c00044 	movi	r7,1
   23040:	d80d883a 	mov	r6,sp
   23044:	880b883a 	mov	r5,r17
   23048:	9009883a 	mov	r4,r18
   2304c:	103ee83a 	callr	r2
   23050:	843fffc4 	addi	r16,r16,-1
   23054:	103ff726 	beq	r2,zero,23034 <print_repeat+0x24>
   23058:	00bfffc4 	movi	r2,-1
   2305c:	00000106 	br	23064 <print_repeat+0x54>
   23060:	0005883a 	mov	r2,zero
   23064:	dfc00417 	ldw	ra,16(sp)
   23068:	dc800317 	ldw	r18,12(sp)
   2306c:	dc400217 	ldw	r17,8(sp)
   23070:	dc000117 	ldw	r16,4(sp)
   23074:	dec00504 	addi	sp,sp,20
   23078:	f800283a 	ret

0002307c <___svfprintf_internal_r>:
   2307c:	deffe504 	addi	sp,sp,-108
   23080:	d8c00804 	addi	r3,sp,32
   23084:	df001915 	stw	fp,100(sp)
   23088:	ddc01815 	stw	r23,96(sp)
   2308c:	dd801715 	stw	r22,92(sp)
   23090:	dd401615 	stw	r21,88(sp)
   23094:	dd001515 	stw	r20,84(sp)
   23098:	dcc01415 	stw	r19,80(sp)
   2309c:	dc801315 	stw	r18,76(sp)
   230a0:	dc401215 	stw	r17,72(sp)
   230a4:	dc001115 	stw	r16,68(sp)
   230a8:	dfc01a15 	stw	ra,104(sp)
   230ac:	2027883a 	mov	r19,r4
   230b0:	2839883a 	mov	fp,r5
   230b4:	382d883a 	mov	r22,r7
   230b8:	d9800f15 	stw	r6,60(sp)
   230bc:	0021883a 	mov	r16,zero
   230c0:	d8000e15 	stw	zero,56(sp)
   230c4:	002f883a 	mov	r23,zero
   230c8:	002b883a 	mov	r21,zero
   230cc:	0025883a 	mov	r18,zero
   230d0:	0023883a 	mov	r17,zero
   230d4:	d8000c15 	stw	zero,48(sp)
   230d8:	d8000b15 	stw	zero,44(sp)
   230dc:	0029883a 	mov	r20,zero
   230e0:	d8c00915 	stw	r3,36(sp)
   230e4:	d8c00f17 	ldw	r3,60(sp)
   230e8:	19000003 	ldbu	r4,0(r3)
   230ec:	20803fcc 	andi	r2,r4,255
   230f0:	1080201c 	xori	r2,r2,128
   230f4:	10bfe004 	addi	r2,r2,-128
   230f8:	10011c26 	beq	r2,zero,2356c <___svfprintf_internal_r+0x4f0>
   230fc:	00c00044 	movi	r3,1
   23100:	a0c01426 	beq	r20,r3,23154 <___svfprintf_internal_r+0xd8>
   23104:	1d000216 	blt	r3,r20,23110 <___svfprintf_internal_r+0x94>
   23108:	a0000626 	beq	r20,zero,23124 <___svfprintf_internal_r+0xa8>
   2310c:	00011306 	br	2355c <___svfprintf_internal_r+0x4e0>
   23110:	01400084 	movi	r5,2
   23114:	a1401d26 	beq	r20,r5,2318c <___svfprintf_internal_r+0x110>
   23118:	014000c4 	movi	r5,3
   2311c:	a1402926 	beq	r20,r5,231c4 <___svfprintf_internal_r+0x148>
   23120:	00010e06 	br	2355c <___svfprintf_internal_r+0x4e0>
   23124:	01400944 	movi	r5,37
   23128:	1140fb26 	beq	r2,r5,23518 <___svfprintf_internal_r+0x49c>
   2312c:	e0800117 	ldw	r2,4(fp)
   23130:	d9000005 	stb	r4,0(sp)
   23134:	01c00044 	movi	r7,1
   23138:	d80d883a 	mov	r6,sp
   2313c:	e00b883a 	mov	r5,fp
   23140:	9809883a 	mov	r4,r19
   23144:	103ee83a 	callr	r2
   23148:	1000d61e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   2314c:	84000044 	addi	r16,r16,1
   23150:	00010206 	br	2355c <___svfprintf_internal_r+0x4e0>
   23154:	01400c04 	movi	r5,48
   23158:	1140f826 	beq	r2,r5,2353c <___svfprintf_internal_r+0x4c0>
   2315c:	01400944 	movi	r5,37
   23160:	11400a1e 	bne	r2,r5,2318c <___svfprintf_internal_r+0x110>
   23164:	d8800005 	stb	r2,0(sp)
   23168:	e0800117 	ldw	r2,4(fp)
   2316c:	a00f883a 	mov	r7,r20
   23170:	d80d883a 	mov	r6,sp
   23174:	e00b883a 	mov	r5,fp
   23178:	9809883a 	mov	r4,r19
   2317c:	103ee83a 	callr	r2
   23180:	1000c81e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   23184:	84000044 	addi	r16,r16,1
   23188:	0000f306 	br	23558 <___svfprintf_internal_r+0x4dc>
   2318c:	217ff404 	addi	r5,r4,-48
   23190:	29403fcc 	andi	r5,r5,255
   23194:	00c00244 	movi	r3,9
   23198:	19400736 	bltu	r3,r5,231b8 <___svfprintf_internal_r+0x13c>
   2319c:	00bfffc4 	movi	r2,-1
   231a0:	88800226 	beq	r17,r2,231ac <___svfprintf_internal_r+0x130>
   231a4:	8c4002a4 	muli	r17,r17,10
   231a8:	00000106 	br	231b0 <___svfprintf_internal_r+0x134>
   231ac:	0023883a 	mov	r17,zero
   231b0:	2c63883a 	add	r17,r5,r17
   231b4:	0000e206 	br	23540 <___svfprintf_internal_r+0x4c4>
   231b8:	01400b84 	movi	r5,46
   231bc:	1140e426 	beq	r2,r5,23550 <___svfprintf_internal_r+0x4d4>
   231c0:	05000084 	movi	r20,2
   231c4:	213ff404 	addi	r4,r4,-48
   231c8:	21003fcc 	andi	r4,r4,255
   231cc:	00c00244 	movi	r3,9
   231d0:	19000736 	bltu	r3,r4,231f0 <___svfprintf_internal_r+0x174>
   231d4:	00bfffc4 	movi	r2,-1
   231d8:	90800226 	beq	r18,r2,231e4 <___svfprintf_internal_r+0x168>
   231dc:	948002a4 	muli	r18,r18,10
   231e0:	00000106 	br	231e8 <___svfprintf_internal_r+0x16c>
   231e4:	0025883a 	mov	r18,zero
   231e8:	24a5883a 	add	r18,r4,r18
   231ec:	0000db06 	br	2355c <___svfprintf_internal_r+0x4e0>
   231f0:	00c01b04 	movi	r3,108
   231f4:	10c0d426 	beq	r2,r3,23548 <___svfprintf_internal_r+0x4cc>
   231f8:	013fffc4 	movi	r4,-1
   231fc:	91000226 	beq	r18,r4,23208 <___svfprintf_internal_r+0x18c>
   23200:	d8000b15 	stw	zero,44(sp)
   23204:	00000106 	br	2320c <___svfprintf_internal_r+0x190>
   23208:	04800044 	movi	r18,1
   2320c:	01001a44 	movi	r4,105
   23210:	11001626 	beq	r2,r4,2326c <___svfprintf_internal_r+0x1f0>
   23214:	20800916 	blt	r4,r2,2323c <___svfprintf_internal_r+0x1c0>
   23218:	010018c4 	movi	r4,99
   2321c:	11008a26 	beq	r2,r4,23448 <___svfprintf_internal_r+0x3cc>
   23220:	01001904 	movi	r4,100
   23224:	11001126 	beq	r2,r4,2326c <___svfprintf_internal_r+0x1f0>
   23228:	01001604 	movi	r4,88
   2322c:	1100ca1e 	bne	r2,r4,23558 <___svfprintf_internal_r+0x4dc>
   23230:	00c00044 	movi	r3,1
   23234:	d8c00e15 	stw	r3,56(sp)
   23238:	00001406 	br	2328c <___svfprintf_internal_r+0x210>
   2323c:	01001cc4 	movi	r4,115
   23240:	11009a26 	beq	r2,r4,234ac <___svfprintf_internal_r+0x430>
   23244:	20800416 	blt	r4,r2,23258 <___svfprintf_internal_r+0x1dc>
   23248:	01001bc4 	movi	r4,111
   2324c:	1100c21e 	bne	r2,r4,23558 <___svfprintf_internal_r+0x4dc>
   23250:	05400204 	movi	r21,8
   23254:	00000e06 	br	23290 <___svfprintf_internal_r+0x214>
   23258:	01001d44 	movi	r4,117
   2325c:	11000c26 	beq	r2,r4,23290 <___svfprintf_internal_r+0x214>
   23260:	01001e04 	movi	r4,120
   23264:	11000926 	beq	r2,r4,2328c <___svfprintf_internal_r+0x210>
   23268:	0000bb06 	br	23558 <___svfprintf_internal_r+0x4dc>
   2326c:	b5000104 	addi	r20,r22,4
   23270:	b8000726 	beq	r23,zero,23290 <___svfprintf_internal_r+0x214>
   23274:	dd000d15 	stw	r20,52(sp)
   23278:	b5800017 	ldw	r22,0(r22)
   2327c:	b000080e 	bge	r22,zero,232a0 <___svfprintf_internal_r+0x224>
   23280:	05adc83a 	sub	r22,zero,r22
   23284:	02800044 	movi	r10,1
   23288:	00000606 	br	232a4 <___svfprintf_internal_r+0x228>
   2328c:	05400404 	movi	r21,16
   23290:	b0c00104 	addi	r3,r22,4
   23294:	d8c00d15 	stw	r3,52(sp)
   23298:	b5800017 	ldw	r22,0(r22)
   2329c:	002f883a 	mov	r23,zero
   232a0:	0015883a 	mov	r10,zero
   232a4:	d829883a 	mov	r20,sp
   232a8:	b0001426 	beq	r22,zero,232fc <___svfprintf_internal_r+0x280>
   232ac:	b009883a 	mov	r4,r22
   232b0:	a80b883a 	mov	r5,r21
   232b4:	da801015 	stw	r10,64(sp)
   232b8:	0023e780 	call	23e78 <__udivsi3>
   232bc:	1549383a 	mul	r4,r2,r21
   232c0:	00c00244 	movi	r3,9
   232c4:	da801017 	ldw	r10,64(sp)
   232c8:	b12dc83a 	sub	r22,r22,r4
   232cc:	1d800216 	blt	r3,r22,232d8 <___svfprintf_internal_r+0x25c>
   232d0:	b5800c04 	addi	r22,r22,48
   232d4:	00000506 	br	232ec <___svfprintf_internal_r+0x270>
   232d8:	d8c00e17 	ldw	r3,56(sp)
   232dc:	18000226 	beq	r3,zero,232e8 <___svfprintf_internal_r+0x26c>
   232e0:	b5800dc4 	addi	r22,r22,55
   232e4:	00000106 	br	232ec <___svfprintf_internal_r+0x270>
   232e8:	b58015c4 	addi	r22,r22,87
   232ec:	a5800005 	stb	r22,0(r20)
   232f0:	a5000044 	addi	r20,r20,1
   232f4:	102d883a 	mov	r22,r2
   232f8:	003feb06 	br	232a8 <___svfprintf_internal_r+0x22c>
   232fc:	a6c7c83a 	sub	r3,r20,sp
   23300:	d8c00a15 	stw	r3,40(sp)
   23304:	90c5c83a 	sub	r2,r18,r3
   23308:	00800a0e 	bge	zero,r2,23334 <___svfprintf_internal_r+0x2b8>
   2330c:	a085883a 	add	r2,r20,r2
   23310:	01400c04 	movi	r5,48
   23314:	d8c00917 	ldw	r3,36(sp)
   23318:	a009883a 	mov	r4,r20
   2331c:	a0c0032e 	bgeu	r20,r3,2332c <___svfprintf_internal_r+0x2b0>
   23320:	a5000044 	addi	r20,r20,1
   23324:	21400005 	stb	r5,0(r4)
   23328:	a0bffa1e 	bne	r20,r2,23314 <___svfprintf_internal_r+0x298>
   2332c:	a6c7c83a 	sub	r3,r20,sp
   23330:	d8c00a15 	stw	r3,40(sp)
   23334:	d8c00a17 	ldw	r3,40(sp)
   23338:	50d3883a 	add	r9,r10,r3
   2333c:	d8c00b17 	ldw	r3,44(sp)
   23340:	8a6dc83a 	sub	r22,r17,r9
   23344:	18001726 	beq	r3,zero,233a4 <___svfprintf_internal_r+0x328>
   23348:	50000a26 	beq	r10,zero,23374 <___svfprintf_internal_r+0x2f8>
   2334c:	00800b44 	movi	r2,45
   23350:	d8800805 	stb	r2,32(sp)
   23354:	e0800117 	ldw	r2,4(fp)
   23358:	01c00044 	movi	r7,1
   2335c:	d9800804 	addi	r6,sp,32
   23360:	e00b883a 	mov	r5,fp
   23364:	9809883a 	mov	r4,r19
   23368:	103ee83a 	callr	r2
   2336c:	10004d1e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   23370:	84000044 	addi	r16,r16,1
   23374:	0580070e 	bge	zero,r22,23394 <___svfprintf_internal_r+0x318>
   23378:	b00f883a 	mov	r7,r22
   2337c:	01800c04 	movi	r6,48
   23380:	e00b883a 	mov	r5,fp
   23384:	9809883a 	mov	r4,r19
   23388:	00230100 	call	23010 <print_repeat>
   2338c:	1000451e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   23390:	85a1883a 	add	r16,r16,r22
   23394:	d8c00a17 	ldw	r3,40(sp)
   23398:	a013883a 	mov	r9,r20
   2339c:	1d2dc83a 	sub	r22,r3,r20
   233a0:	00002206 	br	2342c <___svfprintf_internal_r+0x3b0>
   233a4:	0580090e 	bge	zero,r22,233cc <___svfprintf_internal_r+0x350>
   233a8:	b00f883a 	mov	r7,r22
   233ac:	01800804 	movi	r6,32
   233b0:	e00b883a 	mov	r5,fp
   233b4:	9809883a 	mov	r4,r19
   233b8:	da801015 	stw	r10,64(sp)
   233bc:	00230100 	call	23010 <print_repeat>
   233c0:	da801017 	ldw	r10,64(sp)
   233c4:	1000371e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   233c8:	85a1883a 	add	r16,r16,r22
   233cc:	503ff126 	beq	r10,zero,23394 <___svfprintf_internal_r+0x318>
   233d0:	00800b44 	movi	r2,45
   233d4:	d8800805 	stb	r2,32(sp)
   233d8:	e0800117 	ldw	r2,4(fp)
   233dc:	01c00044 	movi	r7,1
   233e0:	d9800804 	addi	r6,sp,32
   233e4:	e00b883a 	mov	r5,fp
   233e8:	9809883a 	mov	r4,r19
   233ec:	103ee83a 	callr	r2
   233f0:	10002c1e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   233f4:	84000044 	addi	r16,r16,1
   233f8:	003fe606 	br	23394 <___svfprintf_internal_r+0x318>
   233fc:	4a7fffc4 	addi	r9,r9,-1
   23400:	48800003 	ldbu	r2,0(r9)
   23404:	01c00044 	movi	r7,1
   23408:	d9800804 	addi	r6,sp,32
   2340c:	d8800805 	stb	r2,32(sp)
   23410:	e0800117 	ldw	r2,4(fp)
   23414:	e00b883a 	mov	r5,fp
   23418:	da401015 	stw	r9,64(sp)
   2341c:	9809883a 	mov	r4,r19
   23420:	103ee83a 	callr	r2
   23424:	da401017 	ldw	r9,64(sp)
   23428:	10001e1e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   2342c:	8245c83a 	sub	r2,r16,r9
   23430:	4d89883a 	add	r4,r9,r22
   23434:	a085883a 	add	r2,r20,r2
   23438:	013ff016 	blt	zero,r4,233fc <___svfprintf_internal_r+0x380>
   2343c:	1021883a 	mov	r16,r2
   23440:	dd800d17 	ldw	r22,52(sp)
   23444:	00004406 	br	23558 <___svfprintf_internal_r+0x4dc>
   23448:	00800044 	movi	r2,1
   2344c:	1440080e 	bge	r2,r17,23470 <___svfprintf_internal_r+0x3f4>
   23450:	8d3fffc4 	addi	r20,r17,-1
   23454:	a00f883a 	mov	r7,r20
   23458:	01800804 	movi	r6,32
   2345c:	e00b883a 	mov	r5,fp
   23460:	9809883a 	mov	r4,r19
   23464:	00230100 	call	23010 <print_repeat>
   23468:	10000e1e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   2346c:	8521883a 	add	r16,r16,r20
   23470:	b0800017 	ldw	r2,0(r22)
   23474:	01c00044 	movi	r7,1
   23478:	d80d883a 	mov	r6,sp
   2347c:	d8800005 	stb	r2,0(sp)
   23480:	e0800117 	ldw	r2,4(fp)
   23484:	e00b883a 	mov	r5,fp
   23488:	9809883a 	mov	r4,r19
   2348c:	b5000104 	addi	r20,r22,4
   23490:	103ee83a 	callr	r2
   23494:	1000031e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   23498:	84000044 	addi	r16,r16,1
   2349c:	a02d883a 	mov	r22,r20
   234a0:	00002d06 	br	23558 <___svfprintf_internal_r+0x4dc>
   234a4:	00bfffc4 	movi	r2,-1
   234a8:	00003106 	br	23570 <___svfprintf_internal_r+0x4f4>
   234ac:	b5000017 	ldw	r20,0(r22)
   234b0:	b0c00104 	addi	r3,r22,4
   234b4:	d8c00a15 	stw	r3,40(sp)
   234b8:	a009883a 	mov	r4,r20
   234bc:	0022ff40 	call	22ff4 <strlen>
   234c0:	8893c83a 	sub	r9,r17,r2
   234c4:	102d883a 	mov	r22,r2
   234c8:	0240090e 	bge	zero,r9,234f0 <___svfprintf_internal_r+0x474>
   234cc:	480f883a 	mov	r7,r9
   234d0:	01800804 	movi	r6,32
   234d4:	e00b883a 	mov	r5,fp
   234d8:	9809883a 	mov	r4,r19
   234dc:	da401015 	stw	r9,64(sp)
   234e0:	00230100 	call	23010 <print_repeat>
   234e4:	da401017 	ldw	r9,64(sp)
   234e8:	103fee1e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   234ec:	8261883a 	add	r16,r16,r9
   234f0:	e0800117 	ldw	r2,4(fp)
   234f4:	b00f883a 	mov	r7,r22
   234f8:	a00d883a 	mov	r6,r20
   234fc:	e00b883a 	mov	r5,fp
   23500:	9809883a 	mov	r4,r19
   23504:	103ee83a 	callr	r2
   23508:	103fe61e 	bne	r2,zero,234a4 <___svfprintf_internal_r+0x428>
   2350c:	85a1883a 	add	r16,r16,r22
   23510:	dd800a17 	ldw	r22,40(sp)
   23514:	00001006 	br	23558 <___svfprintf_internal_r+0x4dc>
   23518:	05c00044 	movi	r23,1
   2351c:	04bfffc4 	movi	r18,-1
   23520:	d8000e15 	stw	zero,56(sp)
   23524:	05400284 	movi	r21,10
   23528:	9023883a 	mov	r17,r18
   2352c:	d8000c15 	stw	zero,48(sp)
   23530:	d8000b15 	stw	zero,44(sp)
   23534:	b829883a 	mov	r20,r23
   23538:	00000806 	br	2355c <___svfprintf_internal_r+0x4e0>
   2353c:	dd000b15 	stw	r20,44(sp)
   23540:	05000084 	movi	r20,2
   23544:	00000506 	br	2355c <___svfprintf_internal_r+0x4e0>
   23548:	00c00044 	movi	r3,1
   2354c:	d8c00c15 	stw	r3,48(sp)
   23550:	050000c4 	movi	r20,3
   23554:	00000106 	br	2355c <___svfprintf_internal_r+0x4e0>
   23558:	0029883a 	mov	r20,zero
   2355c:	d8c00f17 	ldw	r3,60(sp)
   23560:	18c00044 	addi	r3,r3,1
   23564:	d8c00f15 	stw	r3,60(sp)
   23568:	003ede06 	br	230e4 <___svfprintf_internal_r+0x68>
   2356c:	8005883a 	mov	r2,r16
   23570:	dfc01a17 	ldw	ra,104(sp)
   23574:	df001917 	ldw	fp,100(sp)
   23578:	ddc01817 	ldw	r23,96(sp)
   2357c:	dd801717 	ldw	r22,92(sp)
   23580:	dd401617 	ldw	r21,88(sp)
   23584:	dd001517 	ldw	r20,84(sp)
   23588:	dcc01417 	ldw	r19,80(sp)
   2358c:	dc801317 	ldw	r18,76(sp)
   23590:	dc401217 	ldw	r17,72(sp)
   23594:	dc001117 	ldw	r16,68(sp)
   23598:	dec01b04 	addi	sp,sp,108
   2359c:	f800283a 	ret

000235a0 <__vfprintf_internal_unused>:
   235a0:	008000b4 	movhi	r2,2
   235a4:	1096b504 	addi	r2,r2,23252
   235a8:	300f883a 	mov	r7,r6
   235ac:	280d883a 	mov	r6,r5
   235b0:	200b883a 	mov	r5,r4
   235b4:	11000017 	ldw	r4,0(r2)
   235b8:	002307c1 	jmpi	2307c <___svfprintf_internal_r>

000235bc <print_repeat>:
   235bc:	defffb04 	addi	sp,sp,-20
   235c0:	dc800315 	stw	r18,12(sp)
   235c4:	dc400215 	stw	r17,8(sp)
   235c8:	dc000115 	stw	r16,4(sp)
   235cc:	dfc00415 	stw	ra,16(sp)
   235d0:	2025883a 	mov	r18,r4
   235d4:	2823883a 	mov	r17,r5
   235d8:	d9800005 	stb	r6,0(sp)
   235dc:	3821883a 	mov	r16,r7
   235e0:	04000a0e 	bge	zero,r16,2360c <print_repeat+0x50>
   235e4:	88800117 	ldw	r2,4(r17)
   235e8:	01c00044 	movi	r7,1
   235ec:	d80d883a 	mov	r6,sp
   235f0:	880b883a 	mov	r5,r17
   235f4:	9009883a 	mov	r4,r18
   235f8:	103ee83a 	callr	r2
   235fc:	843fffc4 	addi	r16,r16,-1
   23600:	103ff726 	beq	r2,zero,235e0 <print_repeat+0x24>
   23604:	00bfffc4 	movi	r2,-1
   23608:	00000106 	br	23610 <print_repeat+0x54>
   2360c:	0005883a 	mov	r2,zero
   23610:	dfc00417 	ldw	ra,16(sp)
   23614:	dc800317 	ldw	r18,12(sp)
   23618:	dc400217 	ldw	r17,8(sp)
   2361c:	dc000117 	ldw	r16,4(sp)
   23620:	dec00504 	addi	sp,sp,20
   23624:	f800283a 	ret

00023628 <___vfprintf_internal_r>:
   23628:	deffe504 	addi	sp,sp,-108
   2362c:	d8c00804 	addi	r3,sp,32
   23630:	df001915 	stw	fp,100(sp)
   23634:	ddc01815 	stw	r23,96(sp)
   23638:	dd801715 	stw	r22,92(sp)
   2363c:	dd401615 	stw	r21,88(sp)
   23640:	dd001515 	stw	r20,84(sp)
   23644:	dcc01415 	stw	r19,80(sp)
   23648:	dc801315 	stw	r18,76(sp)
   2364c:	dc401215 	stw	r17,72(sp)
   23650:	dc001115 	stw	r16,68(sp)
   23654:	dfc01a15 	stw	ra,104(sp)
   23658:	2027883a 	mov	r19,r4
   2365c:	2839883a 	mov	fp,r5
   23660:	382d883a 	mov	r22,r7
   23664:	d9800f15 	stw	r6,60(sp)
   23668:	0021883a 	mov	r16,zero
   2366c:	d8000e15 	stw	zero,56(sp)
   23670:	002f883a 	mov	r23,zero
   23674:	002b883a 	mov	r21,zero
   23678:	0025883a 	mov	r18,zero
   2367c:	0023883a 	mov	r17,zero
   23680:	d8000c15 	stw	zero,48(sp)
   23684:	d8000b15 	stw	zero,44(sp)
   23688:	0029883a 	mov	r20,zero
   2368c:	d8c00915 	stw	r3,36(sp)
   23690:	d8c00f17 	ldw	r3,60(sp)
   23694:	19000003 	ldbu	r4,0(r3)
   23698:	20803fcc 	andi	r2,r4,255
   2369c:	1080201c 	xori	r2,r2,128
   236a0:	10bfe004 	addi	r2,r2,-128
   236a4:	10011c26 	beq	r2,zero,23b18 <___vfprintf_internal_r+0x4f0>
   236a8:	00c00044 	movi	r3,1
   236ac:	a0c01426 	beq	r20,r3,23700 <___vfprintf_internal_r+0xd8>
   236b0:	1d000216 	blt	r3,r20,236bc <___vfprintf_internal_r+0x94>
   236b4:	a0000626 	beq	r20,zero,236d0 <___vfprintf_internal_r+0xa8>
   236b8:	00011306 	br	23b08 <___vfprintf_internal_r+0x4e0>
   236bc:	01400084 	movi	r5,2
   236c0:	a1401d26 	beq	r20,r5,23738 <___vfprintf_internal_r+0x110>
   236c4:	014000c4 	movi	r5,3
   236c8:	a1402926 	beq	r20,r5,23770 <___vfprintf_internal_r+0x148>
   236cc:	00010e06 	br	23b08 <___vfprintf_internal_r+0x4e0>
   236d0:	01400944 	movi	r5,37
   236d4:	1140fb26 	beq	r2,r5,23ac4 <___vfprintf_internal_r+0x49c>
   236d8:	e0800117 	ldw	r2,4(fp)
   236dc:	d9000005 	stb	r4,0(sp)
   236e0:	01c00044 	movi	r7,1
   236e4:	d80d883a 	mov	r6,sp
   236e8:	e00b883a 	mov	r5,fp
   236ec:	9809883a 	mov	r4,r19
   236f0:	103ee83a 	callr	r2
   236f4:	1000d61e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   236f8:	84000044 	addi	r16,r16,1
   236fc:	00010206 	br	23b08 <___vfprintf_internal_r+0x4e0>
   23700:	01400c04 	movi	r5,48
   23704:	1140f826 	beq	r2,r5,23ae8 <___vfprintf_internal_r+0x4c0>
   23708:	01400944 	movi	r5,37
   2370c:	11400a1e 	bne	r2,r5,23738 <___vfprintf_internal_r+0x110>
   23710:	d8800005 	stb	r2,0(sp)
   23714:	e0800117 	ldw	r2,4(fp)
   23718:	a00f883a 	mov	r7,r20
   2371c:	d80d883a 	mov	r6,sp
   23720:	e00b883a 	mov	r5,fp
   23724:	9809883a 	mov	r4,r19
   23728:	103ee83a 	callr	r2
   2372c:	1000c81e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   23730:	84000044 	addi	r16,r16,1
   23734:	0000f306 	br	23b04 <___vfprintf_internal_r+0x4dc>
   23738:	217ff404 	addi	r5,r4,-48
   2373c:	29403fcc 	andi	r5,r5,255
   23740:	00c00244 	movi	r3,9
   23744:	19400736 	bltu	r3,r5,23764 <___vfprintf_internal_r+0x13c>
   23748:	00bfffc4 	movi	r2,-1
   2374c:	88800226 	beq	r17,r2,23758 <___vfprintf_internal_r+0x130>
   23750:	8c4002a4 	muli	r17,r17,10
   23754:	00000106 	br	2375c <___vfprintf_internal_r+0x134>
   23758:	0023883a 	mov	r17,zero
   2375c:	2c63883a 	add	r17,r5,r17
   23760:	0000e206 	br	23aec <___vfprintf_internal_r+0x4c4>
   23764:	01400b84 	movi	r5,46
   23768:	1140e426 	beq	r2,r5,23afc <___vfprintf_internal_r+0x4d4>
   2376c:	05000084 	movi	r20,2
   23770:	213ff404 	addi	r4,r4,-48
   23774:	21003fcc 	andi	r4,r4,255
   23778:	00c00244 	movi	r3,9
   2377c:	19000736 	bltu	r3,r4,2379c <___vfprintf_internal_r+0x174>
   23780:	00bfffc4 	movi	r2,-1
   23784:	90800226 	beq	r18,r2,23790 <___vfprintf_internal_r+0x168>
   23788:	948002a4 	muli	r18,r18,10
   2378c:	00000106 	br	23794 <___vfprintf_internal_r+0x16c>
   23790:	0025883a 	mov	r18,zero
   23794:	24a5883a 	add	r18,r4,r18
   23798:	0000db06 	br	23b08 <___vfprintf_internal_r+0x4e0>
   2379c:	00c01b04 	movi	r3,108
   237a0:	10c0d426 	beq	r2,r3,23af4 <___vfprintf_internal_r+0x4cc>
   237a4:	013fffc4 	movi	r4,-1
   237a8:	91000226 	beq	r18,r4,237b4 <___vfprintf_internal_r+0x18c>
   237ac:	d8000b15 	stw	zero,44(sp)
   237b0:	00000106 	br	237b8 <___vfprintf_internal_r+0x190>
   237b4:	04800044 	movi	r18,1
   237b8:	01001a44 	movi	r4,105
   237bc:	11001626 	beq	r2,r4,23818 <___vfprintf_internal_r+0x1f0>
   237c0:	20800916 	blt	r4,r2,237e8 <___vfprintf_internal_r+0x1c0>
   237c4:	010018c4 	movi	r4,99
   237c8:	11008a26 	beq	r2,r4,239f4 <___vfprintf_internal_r+0x3cc>
   237cc:	01001904 	movi	r4,100
   237d0:	11001126 	beq	r2,r4,23818 <___vfprintf_internal_r+0x1f0>
   237d4:	01001604 	movi	r4,88
   237d8:	1100ca1e 	bne	r2,r4,23b04 <___vfprintf_internal_r+0x4dc>
   237dc:	00c00044 	movi	r3,1
   237e0:	d8c00e15 	stw	r3,56(sp)
   237e4:	00001406 	br	23838 <___vfprintf_internal_r+0x210>
   237e8:	01001cc4 	movi	r4,115
   237ec:	11009a26 	beq	r2,r4,23a58 <___vfprintf_internal_r+0x430>
   237f0:	20800416 	blt	r4,r2,23804 <___vfprintf_internal_r+0x1dc>
   237f4:	01001bc4 	movi	r4,111
   237f8:	1100c21e 	bne	r2,r4,23b04 <___vfprintf_internal_r+0x4dc>
   237fc:	05400204 	movi	r21,8
   23800:	00000e06 	br	2383c <___vfprintf_internal_r+0x214>
   23804:	01001d44 	movi	r4,117
   23808:	11000c26 	beq	r2,r4,2383c <___vfprintf_internal_r+0x214>
   2380c:	01001e04 	movi	r4,120
   23810:	11000926 	beq	r2,r4,23838 <___vfprintf_internal_r+0x210>
   23814:	0000bb06 	br	23b04 <___vfprintf_internal_r+0x4dc>
   23818:	b5000104 	addi	r20,r22,4
   2381c:	b8000726 	beq	r23,zero,2383c <___vfprintf_internal_r+0x214>
   23820:	dd000d15 	stw	r20,52(sp)
   23824:	b5800017 	ldw	r22,0(r22)
   23828:	b000080e 	bge	r22,zero,2384c <___vfprintf_internal_r+0x224>
   2382c:	05adc83a 	sub	r22,zero,r22
   23830:	02800044 	movi	r10,1
   23834:	00000606 	br	23850 <___vfprintf_internal_r+0x228>
   23838:	05400404 	movi	r21,16
   2383c:	b0c00104 	addi	r3,r22,4
   23840:	d8c00d15 	stw	r3,52(sp)
   23844:	b5800017 	ldw	r22,0(r22)
   23848:	002f883a 	mov	r23,zero
   2384c:	0015883a 	mov	r10,zero
   23850:	d829883a 	mov	r20,sp
   23854:	b0001426 	beq	r22,zero,238a8 <___vfprintf_internal_r+0x280>
   23858:	b009883a 	mov	r4,r22
   2385c:	a80b883a 	mov	r5,r21
   23860:	da801015 	stw	r10,64(sp)
   23864:	0023e780 	call	23e78 <__udivsi3>
   23868:	1549383a 	mul	r4,r2,r21
   2386c:	00c00244 	movi	r3,9
   23870:	da801017 	ldw	r10,64(sp)
   23874:	b12dc83a 	sub	r22,r22,r4
   23878:	1d800216 	blt	r3,r22,23884 <___vfprintf_internal_r+0x25c>
   2387c:	b5800c04 	addi	r22,r22,48
   23880:	00000506 	br	23898 <___vfprintf_internal_r+0x270>
   23884:	d8c00e17 	ldw	r3,56(sp)
   23888:	18000226 	beq	r3,zero,23894 <___vfprintf_internal_r+0x26c>
   2388c:	b5800dc4 	addi	r22,r22,55
   23890:	00000106 	br	23898 <___vfprintf_internal_r+0x270>
   23894:	b58015c4 	addi	r22,r22,87
   23898:	a5800005 	stb	r22,0(r20)
   2389c:	a5000044 	addi	r20,r20,1
   238a0:	102d883a 	mov	r22,r2
   238a4:	003feb06 	br	23854 <___vfprintf_internal_r+0x22c>
   238a8:	a6c7c83a 	sub	r3,r20,sp
   238ac:	d8c00a15 	stw	r3,40(sp)
   238b0:	90c5c83a 	sub	r2,r18,r3
   238b4:	00800a0e 	bge	zero,r2,238e0 <___vfprintf_internal_r+0x2b8>
   238b8:	a085883a 	add	r2,r20,r2
   238bc:	01400c04 	movi	r5,48
   238c0:	d8c00917 	ldw	r3,36(sp)
   238c4:	a009883a 	mov	r4,r20
   238c8:	a0c0032e 	bgeu	r20,r3,238d8 <___vfprintf_internal_r+0x2b0>
   238cc:	a5000044 	addi	r20,r20,1
   238d0:	21400005 	stb	r5,0(r4)
   238d4:	a0bffa1e 	bne	r20,r2,238c0 <___vfprintf_internal_r+0x298>
   238d8:	a6c7c83a 	sub	r3,r20,sp
   238dc:	d8c00a15 	stw	r3,40(sp)
   238e0:	d8c00a17 	ldw	r3,40(sp)
   238e4:	50d3883a 	add	r9,r10,r3
   238e8:	d8c00b17 	ldw	r3,44(sp)
   238ec:	8a6dc83a 	sub	r22,r17,r9
   238f0:	18001726 	beq	r3,zero,23950 <___vfprintf_internal_r+0x328>
   238f4:	50000a26 	beq	r10,zero,23920 <___vfprintf_internal_r+0x2f8>
   238f8:	00800b44 	movi	r2,45
   238fc:	d8800805 	stb	r2,32(sp)
   23900:	e0800117 	ldw	r2,4(fp)
   23904:	01c00044 	movi	r7,1
   23908:	d9800804 	addi	r6,sp,32
   2390c:	e00b883a 	mov	r5,fp
   23910:	9809883a 	mov	r4,r19
   23914:	103ee83a 	callr	r2
   23918:	10004d1e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   2391c:	84000044 	addi	r16,r16,1
   23920:	0580070e 	bge	zero,r22,23940 <___vfprintf_internal_r+0x318>
   23924:	b00f883a 	mov	r7,r22
   23928:	01800c04 	movi	r6,48
   2392c:	e00b883a 	mov	r5,fp
   23930:	9809883a 	mov	r4,r19
   23934:	00235bc0 	call	235bc <print_repeat>
   23938:	1000451e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   2393c:	85a1883a 	add	r16,r16,r22
   23940:	d8c00a17 	ldw	r3,40(sp)
   23944:	a013883a 	mov	r9,r20
   23948:	1d2dc83a 	sub	r22,r3,r20
   2394c:	00002206 	br	239d8 <___vfprintf_internal_r+0x3b0>
   23950:	0580090e 	bge	zero,r22,23978 <___vfprintf_internal_r+0x350>
   23954:	b00f883a 	mov	r7,r22
   23958:	01800804 	movi	r6,32
   2395c:	e00b883a 	mov	r5,fp
   23960:	9809883a 	mov	r4,r19
   23964:	da801015 	stw	r10,64(sp)
   23968:	00235bc0 	call	235bc <print_repeat>
   2396c:	da801017 	ldw	r10,64(sp)
   23970:	1000371e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   23974:	85a1883a 	add	r16,r16,r22
   23978:	503ff126 	beq	r10,zero,23940 <___vfprintf_internal_r+0x318>
   2397c:	00800b44 	movi	r2,45
   23980:	d8800805 	stb	r2,32(sp)
   23984:	e0800117 	ldw	r2,4(fp)
   23988:	01c00044 	movi	r7,1
   2398c:	d9800804 	addi	r6,sp,32
   23990:	e00b883a 	mov	r5,fp
   23994:	9809883a 	mov	r4,r19
   23998:	103ee83a 	callr	r2
   2399c:	10002c1e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   239a0:	84000044 	addi	r16,r16,1
   239a4:	003fe606 	br	23940 <___vfprintf_internal_r+0x318>
   239a8:	4a7fffc4 	addi	r9,r9,-1
   239ac:	48800003 	ldbu	r2,0(r9)
   239b0:	01c00044 	movi	r7,1
   239b4:	d9800804 	addi	r6,sp,32
   239b8:	d8800805 	stb	r2,32(sp)
   239bc:	e0800117 	ldw	r2,4(fp)
   239c0:	e00b883a 	mov	r5,fp
   239c4:	da401015 	stw	r9,64(sp)
   239c8:	9809883a 	mov	r4,r19
   239cc:	103ee83a 	callr	r2
   239d0:	da401017 	ldw	r9,64(sp)
   239d4:	10001e1e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   239d8:	8245c83a 	sub	r2,r16,r9
   239dc:	4d89883a 	add	r4,r9,r22
   239e0:	a085883a 	add	r2,r20,r2
   239e4:	013ff016 	blt	zero,r4,239a8 <___vfprintf_internal_r+0x380>
   239e8:	1021883a 	mov	r16,r2
   239ec:	dd800d17 	ldw	r22,52(sp)
   239f0:	00004406 	br	23b04 <___vfprintf_internal_r+0x4dc>
   239f4:	00800044 	movi	r2,1
   239f8:	1440080e 	bge	r2,r17,23a1c <___vfprintf_internal_r+0x3f4>
   239fc:	8d3fffc4 	addi	r20,r17,-1
   23a00:	a00f883a 	mov	r7,r20
   23a04:	01800804 	movi	r6,32
   23a08:	e00b883a 	mov	r5,fp
   23a0c:	9809883a 	mov	r4,r19
   23a10:	00235bc0 	call	235bc <print_repeat>
   23a14:	10000e1e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   23a18:	8521883a 	add	r16,r16,r20
   23a1c:	b0800017 	ldw	r2,0(r22)
   23a20:	01c00044 	movi	r7,1
   23a24:	d80d883a 	mov	r6,sp
   23a28:	d8800005 	stb	r2,0(sp)
   23a2c:	e0800117 	ldw	r2,4(fp)
   23a30:	e00b883a 	mov	r5,fp
   23a34:	9809883a 	mov	r4,r19
   23a38:	b5000104 	addi	r20,r22,4
   23a3c:	103ee83a 	callr	r2
   23a40:	1000031e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   23a44:	84000044 	addi	r16,r16,1
   23a48:	a02d883a 	mov	r22,r20
   23a4c:	00002d06 	br	23b04 <___vfprintf_internal_r+0x4dc>
   23a50:	00bfffc4 	movi	r2,-1
   23a54:	00003106 	br	23b1c <___vfprintf_internal_r+0x4f4>
   23a58:	b5000017 	ldw	r20,0(r22)
   23a5c:	b0c00104 	addi	r3,r22,4
   23a60:	d8c00a15 	stw	r3,40(sp)
   23a64:	a009883a 	mov	r4,r20
   23a68:	0022ff40 	call	22ff4 <strlen>
   23a6c:	8893c83a 	sub	r9,r17,r2
   23a70:	102d883a 	mov	r22,r2
   23a74:	0240090e 	bge	zero,r9,23a9c <___vfprintf_internal_r+0x474>
   23a78:	480f883a 	mov	r7,r9
   23a7c:	01800804 	movi	r6,32
   23a80:	e00b883a 	mov	r5,fp
   23a84:	9809883a 	mov	r4,r19
   23a88:	da401015 	stw	r9,64(sp)
   23a8c:	00235bc0 	call	235bc <print_repeat>
   23a90:	da401017 	ldw	r9,64(sp)
   23a94:	103fee1e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   23a98:	8261883a 	add	r16,r16,r9
   23a9c:	e0800117 	ldw	r2,4(fp)
   23aa0:	b00f883a 	mov	r7,r22
   23aa4:	a00d883a 	mov	r6,r20
   23aa8:	e00b883a 	mov	r5,fp
   23aac:	9809883a 	mov	r4,r19
   23ab0:	103ee83a 	callr	r2
   23ab4:	103fe61e 	bne	r2,zero,23a50 <___vfprintf_internal_r+0x428>
   23ab8:	85a1883a 	add	r16,r16,r22
   23abc:	dd800a17 	ldw	r22,40(sp)
   23ac0:	00001006 	br	23b04 <___vfprintf_internal_r+0x4dc>
   23ac4:	05c00044 	movi	r23,1
   23ac8:	04bfffc4 	movi	r18,-1
   23acc:	d8000e15 	stw	zero,56(sp)
   23ad0:	05400284 	movi	r21,10
   23ad4:	9023883a 	mov	r17,r18
   23ad8:	d8000c15 	stw	zero,48(sp)
   23adc:	d8000b15 	stw	zero,44(sp)
   23ae0:	b829883a 	mov	r20,r23
   23ae4:	00000806 	br	23b08 <___vfprintf_internal_r+0x4e0>
   23ae8:	dd000b15 	stw	r20,44(sp)
   23aec:	05000084 	movi	r20,2
   23af0:	00000506 	br	23b08 <___vfprintf_internal_r+0x4e0>
   23af4:	00c00044 	movi	r3,1
   23af8:	d8c00c15 	stw	r3,48(sp)
   23afc:	050000c4 	movi	r20,3
   23b00:	00000106 	br	23b08 <___vfprintf_internal_r+0x4e0>
   23b04:	0029883a 	mov	r20,zero
   23b08:	d8c00f17 	ldw	r3,60(sp)
   23b0c:	18c00044 	addi	r3,r3,1
   23b10:	d8c00f15 	stw	r3,60(sp)
   23b14:	003ede06 	br	23690 <___vfprintf_internal_r+0x68>
   23b18:	8005883a 	mov	r2,r16
   23b1c:	dfc01a17 	ldw	ra,104(sp)
   23b20:	df001917 	ldw	fp,100(sp)
   23b24:	ddc01817 	ldw	r23,96(sp)
   23b28:	dd801717 	ldw	r22,92(sp)
   23b2c:	dd401617 	ldw	r21,88(sp)
   23b30:	dd001517 	ldw	r20,84(sp)
   23b34:	dcc01417 	ldw	r19,80(sp)
   23b38:	dc801317 	ldw	r18,76(sp)
   23b3c:	dc401217 	ldw	r17,72(sp)
   23b40:	dc001117 	ldw	r16,68(sp)
   23b44:	dec01b04 	addi	sp,sp,108
   23b48:	f800283a 	ret

00023b4c <__vfprintf_internal>:
   23b4c:	008000b4 	movhi	r2,2
   23b50:	1096b504 	addi	r2,r2,23252
   23b54:	300f883a 	mov	r7,r6
   23b58:	280d883a 	mov	r6,r5
   23b5c:	200b883a 	mov	r5,r4
   23b60:	11000017 	ldw	r4,0(r2)
   23b64:	00236281 	jmpi	23628 <___vfprintf_internal_r>

00023b68 <__sfvwrite_small_dev>:
   23b68:	2880000b 	ldhu	r2,0(r5)
   23b6c:	1080020c 	andi	r2,r2,8
   23b70:	10002126 	beq	r2,zero,23bf8 <__sfvwrite_small_dev+0x90>
   23b74:	2880008f 	ldh	r2,2(r5)
   23b78:	defffa04 	addi	sp,sp,-24
   23b7c:	dc000015 	stw	r16,0(sp)
   23b80:	dfc00515 	stw	ra,20(sp)
   23b84:	dd000415 	stw	r20,16(sp)
   23b88:	dcc00315 	stw	r19,12(sp)
   23b8c:	dc800215 	stw	r18,8(sp)
   23b90:	dc400115 	stw	r17,4(sp)
   23b94:	2821883a 	mov	r16,r5
   23b98:	10001216 	blt	r2,zero,23be4 <__sfvwrite_small_dev+0x7c>
   23b9c:	2027883a 	mov	r19,r4
   23ba0:	3025883a 	mov	r18,r6
   23ba4:	3823883a 	mov	r17,r7
   23ba8:	05010004 	movi	r20,1024
   23bac:	04400b0e 	bge	zero,r17,23bdc <__sfvwrite_small_dev+0x74>
   23bb0:	880f883a 	mov	r7,r17
   23bb4:	a440010e 	bge	r20,r17,23bbc <__sfvwrite_small_dev+0x54>
   23bb8:	01c10004 	movi	r7,1024
   23bbc:	8140008f 	ldh	r5,2(r16)
   23bc0:	900d883a 	mov	r6,r18
   23bc4:	9809883a 	mov	r4,r19
   23bc8:	0023d280 	call	23d28 <_write_r>
   23bcc:	0080050e 	bge	zero,r2,23be4 <__sfvwrite_small_dev+0x7c>
   23bd0:	88a3c83a 	sub	r17,r17,r2
   23bd4:	90a5883a 	add	r18,r18,r2
   23bd8:	003ff406 	br	23bac <__sfvwrite_small_dev+0x44>
   23bdc:	0005883a 	mov	r2,zero
   23be0:	00000706 	br	23c00 <__sfvwrite_small_dev+0x98>
   23be4:	8080000b 	ldhu	r2,0(r16)
   23be8:	10801014 	ori	r2,r2,64
   23bec:	8080000d 	sth	r2,0(r16)
   23bf0:	00bfffc4 	movi	r2,-1
   23bf4:	00000206 	br	23c00 <__sfvwrite_small_dev+0x98>
   23bf8:	00bfffc4 	movi	r2,-1
   23bfc:	f800283a 	ret
   23c00:	dfc00517 	ldw	ra,20(sp)
   23c04:	dd000417 	ldw	r20,16(sp)
   23c08:	dcc00317 	ldw	r19,12(sp)
   23c0c:	dc800217 	ldw	r18,8(sp)
   23c10:	dc400117 	ldw	r17,4(sp)
   23c14:	dc000017 	ldw	r16,0(sp)
   23c18:	dec00604 	addi	sp,sp,24
   23c1c:	f800283a 	ret

00023c20 <__sfvwrite_small_str>:
   23c20:	2880000b 	ldhu	r2,0(r5)
   23c24:	10c0020c 	andi	r3,r2,8
   23c28:	18002026 	beq	r3,zero,23cac <__sfvwrite_small_str+0x8c>
   23c2c:	28c0008f 	ldh	r3,2(r5)
   23c30:	defffd04 	addi	sp,sp,-12
   23c34:	dc000015 	stw	r16,0(sp)
   23c38:	dfc00215 	stw	ra,8(sp)
   23c3c:	dc400115 	stw	r17,4(sp)
   23c40:	2821883a 	mov	r16,r5
   23c44:	1800150e 	bge	r3,zero,23c9c <__sfvwrite_small_str+0x7c>
   23c48:	10c0800c 	andi	r3,r2,512
   23c4c:	18001326 	beq	r3,zero,23c9c <__sfvwrite_small_str+0x7c>
   23c50:	2c400517 	ldw	r17,20(r5)
   23c54:	89c0030e 	bge	r17,r7,23c64 <__sfvwrite_small_str+0x44>
   23c58:	10c0200c 	andi	r3,r2,128
   23c5c:	18000326 	beq	r3,zero,23c6c <__sfvwrite_small_str+0x4c>
   23c60:	00000e06 	br	23c9c <__sfvwrite_small_str+0x7c>
   23c64:	3c40010e 	bge	r7,r17,23c6c <__sfvwrite_small_str+0x4c>
   23c68:	3823883a 	mov	r17,r7
   23c6c:	81000417 	ldw	r4,16(r16)
   23c70:	300b883a 	mov	r5,r6
   23c74:	880d883a 	mov	r6,r17
   23c78:	0023cc80 	call	23cc8 <memmove>
   23c7c:	80800517 	ldw	r2,20(r16)
   23c80:	1445c83a 	sub	r2,r2,r17
   23c84:	80800515 	stw	r2,20(r16)
   23c88:	80800417 	ldw	r2,16(r16)
   23c8c:	1463883a 	add	r17,r2,r17
   23c90:	84400415 	stw	r17,16(r16)
   23c94:	0005883a 	mov	r2,zero
   23c98:	00000606 	br	23cb4 <__sfvwrite_small_str+0x94>
   23c9c:	10801014 	ori	r2,r2,64
   23ca0:	8080000d 	sth	r2,0(r16)
   23ca4:	00bfffc4 	movi	r2,-1
   23ca8:	00000206 	br	23cb4 <__sfvwrite_small_str+0x94>
   23cac:	00bfffc4 	movi	r2,-1
   23cb0:	f800283a 	ret
   23cb4:	dfc00217 	ldw	ra,8(sp)
   23cb8:	dc400117 	ldw	r17,4(sp)
   23cbc:	dc000017 	ldw	r16,0(sp)
   23cc0:	dec00304 	addi	sp,sp,12
   23cc4:	f800283a 	ret

00023cc8 <memmove>:
   23cc8:	2005883a 	mov	r2,r4
   23ccc:	218f883a 	add	r7,r4,r6
   23cd0:	29000236 	bltu	r5,r4,23cdc <memmove+0x14>
   23cd4:	1007883a 	mov	r3,r2
   23cd8:	00000c06 	br	23d0c <memmove+0x44>
   23cdc:	2987883a 	add	r3,r5,r6
   23ce0:	20fffc2e 	bgeu	r4,r3,23cd4 <memmove+0xc>
   23ce4:	380b883a 	mov	r5,r7
   23ce8:	30cdc83a 	sub	r6,r6,r3
   23cec:	1989883a 	add	r4,r3,r6
   23cf0:	20000526 	beq	r4,zero,23d08 <memmove+0x40>
   23cf4:	18ffffc4 	addi	r3,r3,-1
   23cf8:	19000003 	ldbu	r4,0(r3)
   23cfc:	297fffc4 	addi	r5,r5,-1
   23d00:	29000005 	stb	r4,0(r5)
   23d04:	003ff906 	br	23cec <memmove+0x24>
   23d08:	f800283a 	ret
   23d0c:	19c00526 	beq	r3,r7,23d24 <memmove+0x5c>
   23d10:	29000003 	ldbu	r4,0(r5)
   23d14:	18c00044 	addi	r3,r3,1
   23d18:	29400044 	addi	r5,r5,1
   23d1c:	193fffc5 	stb	r4,-1(r3)
   23d20:	003ffa06 	br	23d0c <memmove+0x44>
   23d24:	f800283a 	ret

00023d28 <_write_r>:
   23d28:	defffd04 	addi	sp,sp,-12
   23d2c:	dc000015 	stw	r16,0(sp)
   23d30:	040000b4 	movhi	r16,2
   23d34:	dc400115 	stw	r17,4(sp)
   23d38:	84177704 	addi	r16,r16,24028
   23d3c:	2023883a 	mov	r17,r4
   23d40:	2809883a 	mov	r4,r5
   23d44:	300b883a 	mov	r5,r6
   23d48:	380d883a 	mov	r6,r7
   23d4c:	dfc00215 	stw	ra,8(sp)
   23d50:	80000015 	stw	zero,0(r16)
   23d54:	00240c80 	call	240c8 <write>
   23d58:	00ffffc4 	movi	r3,-1
   23d5c:	10c0031e 	bne	r2,r3,23d6c <_write_r+0x44>
   23d60:	80c00017 	ldw	r3,0(r16)
   23d64:	18000126 	beq	r3,zero,23d6c <_write_r+0x44>
   23d68:	88c00015 	stw	r3,0(r17)
   23d6c:	dfc00217 	ldw	ra,8(sp)
   23d70:	dc400117 	ldw	r17,4(sp)
   23d74:	dc000017 	ldw	r16,0(sp)
   23d78:	dec00304 	addi	sp,sp,12
   23d7c:	f800283a 	ret

00023d80 <__divsi3>:
   23d80:	20001b16 	blt	r4,zero,23df0 <__divsi3+0x70>
   23d84:	000f883a 	mov	r7,zero
   23d88:	28001616 	blt	r5,zero,23de4 <__divsi3+0x64>
   23d8c:	200d883a 	mov	r6,r4
   23d90:	29001a2e 	bgeu	r5,r4,23dfc <__divsi3+0x7c>
   23d94:	00800804 	movi	r2,32
   23d98:	00c00044 	movi	r3,1
   23d9c:	00000106 	br	23da4 <__divsi3+0x24>
   23da0:	10000d26 	beq	r2,zero,23dd8 <__divsi3+0x58>
   23da4:	294b883a 	add	r5,r5,r5
   23da8:	10bfffc4 	addi	r2,r2,-1
   23dac:	18c7883a 	add	r3,r3,r3
   23db0:	293ffb36 	bltu	r5,r4,23da0 <__divsi3+0x20>
   23db4:	0005883a 	mov	r2,zero
   23db8:	18000726 	beq	r3,zero,23dd8 <__divsi3+0x58>
   23dbc:	0005883a 	mov	r2,zero
   23dc0:	31400236 	bltu	r6,r5,23dcc <__divsi3+0x4c>
   23dc4:	314dc83a 	sub	r6,r6,r5
   23dc8:	10c4b03a 	or	r2,r2,r3
   23dcc:	1806d07a 	srli	r3,r3,1
   23dd0:	280ad07a 	srli	r5,r5,1
   23dd4:	183ffa1e 	bne	r3,zero,23dc0 <__divsi3+0x40>
   23dd8:	38000126 	beq	r7,zero,23de0 <__divsi3+0x60>
   23ddc:	0085c83a 	sub	r2,zero,r2
   23de0:	f800283a 	ret
   23de4:	014bc83a 	sub	r5,zero,r5
   23de8:	39c0005c 	xori	r7,r7,1
   23dec:	003fe706 	br	23d8c <__divsi3+0xc>
   23df0:	0109c83a 	sub	r4,zero,r4
   23df4:	01c00044 	movi	r7,1
   23df8:	003fe306 	br	23d88 <__divsi3+0x8>
   23dfc:	00c00044 	movi	r3,1
   23e00:	003fee06 	br	23dbc <__divsi3+0x3c>

00023e04 <__modsi3>:
   23e04:	20001716 	blt	r4,zero,23e64 <__modsi3+0x60>
   23e08:	000f883a 	mov	r7,zero
   23e0c:	2005883a 	mov	r2,r4
   23e10:	28001216 	blt	r5,zero,23e5c <__modsi3+0x58>
   23e14:	2900162e 	bgeu	r5,r4,23e70 <__modsi3+0x6c>
   23e18:	01800804 	movi	r6,32
   23e1c:	00c00044 	movi	r3,1
   23e20:	00000106 	br	23e28 <__modsi3+0x24>
   23e24:	30000a26 	beq	r6,zero,23e50 <__modsi3+0x4c>
   23e28:	294b883a 	add	r5,r5,r5
   23e2c:	31bfffc4 	addi	r6,r6,-1
   23e30:	18c7883a 	add	r3,r3,r3
   23e34:	293ffb36 	bltu	r5,r4,23e24 <__modsi3+0x20>
   23e38:	18000526 	beq	r3,zero,23e50 <__modsi3+0x4c>
   23e3c:	1806d07a 	srli	r3,r3,1
   23e40:	11400136 	bltu	r2,r5,23e48 <__modsi3+0x44>
   23e44:	1145c83a 	sub	r2,r2,r5
   23e48:	280ad07a 	srli	r5,r5,1
   23e4c:	183ffb1e 	bne	r3,zero,23e3c <__modsi3+0x38>
   23e50:	38000126 	beq	r7,zero,23e58 <__modsi3+0x54>
   23e54:	0085c83a 	sub	r2,zero,r2
   23e58:	f800283a 	ret
   23e5c:	014bc83a 	sub	r5,zero,r5
   23e60:	003fec06 	br	23e14 <__modsi3+0x10>
   23e64:	0109c83a 	sub	r4,zero,r4
   23e68:	01c00044 	movi	r7,1
   23e6c:	003fe706 	br	23e0c <__modsi3+0x8>
   23e70:	00c00044 	movi	r3,1
   23e74:	003ff106 	br	23e3c <__modsi3+0x38>

00023e78 <__udivsi3>:
   23e78:	200d883a 	mov	r6,r4
   23e7c:	2900152e 	bgeu	r5,r4,23ed4 <__udivsi3+0x5c>
   23e80:	28001416 	blt	r5,zero,23ed4 <__udivsi3+0x5c>
   23e84:	00800804 	movi	r2,32
   23e88:	00c00044 	movi	r3,1
   23e8c:	00000206 	br	23e98 <__udivsi3+0x20>
   23e90:	10000e26 	beq	r2,zero,23ecc <__udivsi3+0x54>
   23e94:	28000516 	blt	r5,zero,23eac <__udivsi3+0x34>
   23e98:	294b883a 	add	r5,r5,r5
   23e9c:	10bfffc4 	addi	r2,r2,-1
   23ea0:	18c7883a 	add	r3,r3,r3
   23ea4:	293ffa36 	bltu	r5,r4,23e90 <__udivsi3+0x18>
   23ea8:	18000826 	beq	r3,zero,23ecc <__udivsi3+0x54>
   23eac:	0005883a 	mov	r2,zero
   23eb0:	31400236 	bltu	r6,r5,23ebc <__udivsi3+0x44>
   23eb4:	314dc83a 	sub	r6,r6,r5
   23eb8:	10c4b03a 	or	r2,r2,r3
   23ebc:	1806d07a 	srli	r3,r3,1
   23ec0:	280ad07a 	srli	r5,r5,1
   23ec4:	183ffa1e 	bne	r3,zero,23eb0 <__udivsi3+0x38>
   23ec8:	f800283a 	ret
   23ecc:	0005883a 	mov	r2,zero
   23ed0:	f800283a 	ret
   23ed4:	00c00044 	movi	r3,1
   23ed8:	003ff406 	br	23eac <__udivsi3+0x34>

00023edc <__umodsi3>:
   23edc:	2005883a 	mov	r2,r4
   23ee0:	2900122e 	bgeu	r5,r4,23f2c <__umodsi3+0x50>
   23ee4:	28001116 	blt	r5,zero,23f2c <__umodsi3+0x50>
   23ee8:	01800804 	movi	r6,32
   23eec:	00c00044 	movi	r3,1
   23ef0:	00000206 	br	23efc <__umodsi3+0x20>
   23ef4:	30000c26 	beq	r6,zero,23f28 <__umodsi3+0x4c>
   23ef8:	28000516 	blt	r5,zero,23f10 <__umodsi3+0x34>
   23efc:	294b883a 	add	r5,r5,r5
   23f00:	31bfffc4 	addi	r6,r6,-1
   23f04:	18c7883a 	add	r3,r3,r3
   23f08:	293ffa36 	bltu	r5,r4,23ef4 <__umodsi3+0x18>
   23f0c:	18000626 	beq	r3,zero,23f28 <__umodsi3+0x4c>
   23f10:	1806d07a 	srli	r3,r3,1
   23f14:	11400136 	bltu	r2,r5,23f1c <__umodsi3+0x40>
   23f18:	1145c83a 	sub	r2,r2,r5
   23f1c:	280ad07a 	srli	r5,r5,1
   23f20:	183ffb1e 	bne	r3,zero,23f10 <__umodsi3+0x34>
   23f24:	f800283a 	ret
   23f28:	f800283a 	ret
   23f2c:	00c00044 	movi	r3,1
   23f30:	003ff706 	br	23f10 <__umodsi3+0x34>

00023f34 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23f34:	defffc04 	addi	sp,sp,-16
   23f38:	df000315 	stw	fp,12(sp)
   23f3c:	df000304 	addi	fp,sp,12
   23f40:	e13ffd15 	stw	r4,-12(fp)
   23f44:	e17ffe15 	stw	r5,-8(fp)
   23f48:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23f4c:	e0fffe17 	ldw	r3,-8(fp)
   23f50:	e0bffd17 	ldw	r2,-12(fp)
   23f54:	18800c26 	beq	r3,r2,23f88 <alt_load_section+0x54>
  {
    while( to != end )
   23f58:	00000806 	br	23f7c <alt_load_section+0x48>
    {
      *to++ = *from++;
   23f5c:	e0bffe17 	ldw	r2,-8(fp)
   23f60:	10c00104 	addi	r3,r2,4
   23f64:	e0fffe15 	stw	r3,-8(fp)
   23f68:	e0fffd17 	ldw	r3,-12(fp)
   23f6c:	19000104 	addi	r4,r3,4
   23f70:	e13ffd15 	stw	r4,-12(fp)
   23f74:	18c00017 	ldw	r3,0(r3)
   23f78:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23f7c:	e0fffe17 	ldw	r3,-8(fp)
   23f80:	e0bfff17 	ldw	r2,-4(fp)
   23f84:	18bff51e 	bne	r3,r2,23f5c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23f88:	0001883a 	nop
   23f8c:	e037883a 	mov	sp,fp
   23f90:	df000017 	ldw	fp,0(sp)
   23f94:	dec00104 	addi	sp,sp,4
   23f98:	f800283a 	ret

00023f9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23f9c:	defffe04 	addi	sp,sp,-8
   23fa0:	dfc00115 	stw	ra,4(sp)
   23fa4:	df000015 	stw	fp,0(sp)
   23fa8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23fac:	018000b4 	movhi	r6,2
   23fb0:	3196bf04 	addi	r6,r6,23292
   23fb4:	014000b4 	movhi	r5,2
   23fb8:	29560704 	addi	r5,r5,22556
   23fbc:	010000b4 	movhi	r4,2
   23fc0:	2116bf04 	addi	r4,r4,23292
   23fc4:	0023f340 	call	23f34 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23fc8:	018000b4 	movhi	r6,2
   23fcc:	31809104 	addi	r6,r6,580
   23fd0:	014000b4 	movhi	r5,2
   23fd4:	29400804 	addi	r5,r5,32
   23fd8:	010000b4 	movhi	r4,2
   23fdc:	21000804 	addi	r4,r4,32
   23fe0:	0023f340 	call	23f34 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23fe4:	018000b4 	movhi	r6,2
   23fe8:	31960704 	addi	r6,r6,22556
   23fec:	014000b4 	movhi	r5,2
   23ff0:	29557e04 	addi	r5,r5,22008
   23ff4:	010000b4 	movhi	r4,2
   23ff8:	21157e04 	addi	r4,r4,22008
   23ffc:	0023f340 	call	23f34 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   24000:	00246bc0 	call	246bc <alt_dcache_flush_all>
  alt_icache_flush_all();
   24004:	00247e80 	call	247e8 <alt_icache_flush_all>
}
   24008:	0001883a 	nop
   2400c:	e037883a 	mov	sp,fp
   24010:	dfc00117 	ldw	ra,4(sp)
   24014:	df000017 	ldw	fp,0(sp)
   24018:	dec00204 	addi	sp,sp,8
   2401c:	f800283a 	ret

00024020 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   24020:	defffd04 	addi	sp,sp,-12
   24024:	dfc00215 	stw	ra,8(sp)
   24028:	df000115 	stw	fp,4(sp)
   2402c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   24030:	0009883a 	mov	r4,zero
   24034:	00241f40 	call	241f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   24038:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2403c:	002422c0 	call	2422c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   24040:	018000b4 	movhi	r6,2
   24044:	3195fa04 	addi	r6,r6,22504
   24048:	014000b4 	movhi	r5,2
   2404c:	2955fa04 	addi	r5,r5,22504
   24050:	010000b4 	movhi	r4,2
   24054:	2115fa04 	addi	r4,r4,22504
   24058:	0024b800 	call	24b80 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2405c:	d0a0c417 	ldw	r2,-31984(gp)
   24060:	d0e0c517 	ldw	r3,-31980(gp)
   24064:	d120c617 	ldw	r4,-31976(gp)
   24068:	200d883a 	mov	r6,r4
   2406c:	180b883a 	mov	r5,r3
   24070:	1009883a 	mov	r4,r2
   24074:	00202b40 	call	202b4 <main>
   24078:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2407c:	01000044 	movi	r4,1
   24080:	00245ec0 	call	245ec <close>
  exit (result);
   24084:	e13fff17 	ldw	r4,-4(fp)
   24088:	00253e40 	call	253e4 <exit>

0002408c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2408c:	defffe04 	addi	sp,sp,-8
   24090:	dfc00115 	stw	ra,4(sp)
   24094:	df000015 	stw	fp,0(sp)
   24098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2409c:	d0a00717 	ldw	r2,-32740(gp)
   240a0:	10000326 	beq	r2,zero,240b0 <alt_get_errno+0x24>
   240a4:	d0a00717 	ldw	r2,-32740(gp)
   240a8:	103ee83a 	callr	r2
   240ac:	00000106 	br	240b4 <alt_get_errno+0x28>
   240b0:	d0a0c304 	addi	r2,gp,-31988
}
   240b4:	e037883a 	mov	sp,fp
   240b8:	dfc00117 	ldw	ra,4(sp)
   240bc:	df000017 	ldw	fp,0(sp)
   240c0:	dec00204 	addi	sp,sp,8
   240c4:	f800283a 	ret

000240c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   240c8:	defff904 	addi	sp,sp,-28
   240cc:	dfc00615 	stw	ra,24(sp)
   240d0:	df000515 	stw	fp,20(sp)
   240d4:	df000504 	addi	fp,sp,20
   240d8:	e13ffd15 	stw	r4,-12(fp)
   240dc:	e17ffe15 	stw	r5,-8(fp)
   240e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   240e4:	e0bffd17 	ldw	r2,-12(fp)
   240e8:	10000616 	blt	r2,zero,24104 <write+0x3c>
   240ec:	e0bffd17 	ldw	r2,-12(fp)
   240f0:	10c00324 	muli	r3,r2,12
   240f4:	008000b4 	movhi	r2,2
   240f8:	10965404 	addi	r2,r2,22864
   240fc:	1885883a 	add	r2,r3,r2
   24100:	00000106 	br	24108 <write+0x40>
   24104:	0005883a 	mov	r2,zero
   24108:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2410c:	e0bffb17 	ldw	r2,-20(fp)
   24110:	10002126 	beq	r2,zero,24198 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   24114:	e0bffb17 	ldw	r2,-20(fp)
   24118:	10800217 	ldw	r2,8(r2)
   2411c:	108000cc 	andi	r2,r2,3
   24120:	10001826 	beq	r2,zero,24184 <write+0xbc>
   24124:	e0bffb17 	ldw	r2,-20(fp)
   24128:	10800017 	ldw	r2,0(r2)
   2412c:	10800617 	ldw	r2,24(r2)
   24130:	10001426 	beq	r2,zero,24184 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   24134:	e0bffb17 	ldw	r2,-20(fp)
   24138:	10800017 	ldw	r2,0(r2)
   2413c:	10800617 	ldw	r2,24(r2)
   24140:	e0ffff17 	ldw	r3,-4(fp)
   24144:	180d883a 	mov	r6,r3
   24148:	e17ffe17 	ldw	r5,-8(fp)
   2414c:	e13ffb17 	ldw	r4,-20(fp)
   24150:	103ee83a 	callr	r2
   24154:	e0bffc15 	stw	r2,-16(fp)
   24158:	e0bffc17 	ldw	r2,-16(fp)
   2415c:	1000070e 	bge	r2,zero,2417c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   24160:	002408c0 	call	2408c <alt_get_errno>
   24164:	1007883a 	mov	r3,r2
   24168:	e0bffc17 	ldw	r2,-16(fp)
   2416c:	0085c83a 	sub	r2,zero,r2
   24170:	18800015 	stw	r2,0(r3)
        return -1;
   24174:	00bfffc4 	movi	r2,-1
   24178:	00000c06 	br	241ac <write+0xe4>
      }
      return rval;
   2417c:	e0bffc17 	ldw	r2,-16(fp)
   24180:	00000a06 	br	241ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   24184:	002408c0 	call	2408c <alt_get_errno>
   24188:	1007883a 	mov	r3,r2
   2418c:	00800344 	movi	r2,13
   24190:	18800015 	stw	r2,0(r3)
   24194:	00000406 	br	241a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   24198:	002408c0 	call	2408c <alt_get_errno>
   2419c:	1007883a 	mov	r3,r2
   241a0:	00801444 	movi	r2,81
   241a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   241a8:	00bfffc4 	movi	r2,-1
}
   241ac:	e037883a 	mov	sp,fp
   241b0:	dfc00117 	ldw	ra,4(sp)
   241b4:	df000017 	ldw	fp,0(sp)
   241b8:	dec00204 	addi	sp,sp,8
   241bc:	f800283a 	ret

000241c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   241c0:	defffd04 	addi	sp,sp,-12
   241c4:	dfc00215 	stw	ra,8(sp)
   241c8:	df000115 	stw	fp,4(sp)
   241cc:	df000104 	addi	fp,sp,4
   241d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   241d4:	d1600404 	addi	r5,gp,-32752
   241d8:	e13fff17 	ldw	r4,-4(fp)
   241dc:	00247440 	call	24744 <alt_dev_llist_insert>
}
   241e0:	e037883a 	mov	sp,fp
   241e4:	dfc00117 	ldw	ra,4(sp)
   241e8:	df000017 	ldw	fp,0(sp)
   241ec:	dec00204 	addi	sp,sp,8
   241f0:	f800283a 	ret

000241f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   241f4:	defffd04 	addi	sp,sp,-12
   241f8:	dfc00215 	stw	ra,8(sp)
   241fc:	df000115 	stw	fp,4(sp)
   24200:	df000104 	addi	fp,sp,4
   24204:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   24208:	00250580 	call	25058 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2420c:	00800044 	movi	r2,1
   24210:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   24214:	0001883a 	nop
   24218:	e037883a 	mov	sp,fp
   2421c:	dfc00117 	ldw	ra,4(sp)
   24220:	df000017 	ldw	fp,0(sp)
   24224:	dec00204 	addi	sp,sp,8
   24228:	f800283a 	ret

0002422c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2422c:	defffe04 	addi	sp,sp,-8
   24230:	dfc00115 	stw	ra,4(sp)
   24234:	df000015 	stw	fp,0(sp)
   24238:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   2423c:	01c0fa04 	movi	r7,1000
   24240:	000d883a 	mov	r6,zero
   24244:	000b883a 	mov	r5,zero
   24248:	01000134 	movhi	r4,4
   2424c:	21040004 	addi	r4,r4,4096
   24250:	00245340 	call	24534 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   24254:	010000b4 	movhi	r4,2
   24258:	21163f04 	addi	r4,r4,22780
   2425c:	00241c00 	call	241c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   24260:	0001883a 	nop
}
   24264:	0001883a 	nop
   24268:	e037883a 	mov	sp,fp
   2426c:	dfc00117 	ldw	ra,4(sp)
   24270:	df000017 	ldw	fp,0(sp)
   24274:	dec00204 	addi	sp,sp,8
   24278:	f800283a 	ret

0002427c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2427c:	defffa04 	addi	sp,sp,-24
   24280:	dfc00515 	stw	ra,20(sp)
   24284:	df000415 	stw	fp,16(sp)
   24288:	df000404 	addi	fp,sp,16
   2428c:	e13ffd15 	stw	r4,-12(fp)
   24290:	e17ffe15 	stw	r5,-8(fp)
   24294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24298:	e0bffd17 	ldw	r2,-12(fp)
   2429c:	10800017 	ldw	r2,0(r2)
   242a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   242a4:	e0bffc17 	ldw	r2,-16(fp)
   242a8:	10c00a04 	addi	r3,r2,40
   242ac:	e0bffd17 	ldw	r2,-12(fp)
   242b0:	10800217 	ldw	r2,8(r2)
   242b4:	100f883a 	mov	r7,r2
   242b8:	e1bfff17 	ldw	r6,-4(fp)
   242bc:	e17ffe17 	ldw	r5,-8(fp)
   242c0:	1809883a 	mov	r4,r3
   242c4:	002433c0 	call	2433c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   242c8:	e037883a 	mov	sp,fp
   242cc:	dfc00117 	ldw	ra,4(sp)
   242d0:	df000017 	ldw	fp,0(sp)
   242d4:	dec00204 	addi	sp,sp,8
   242d8:	f800283a 	ret

000242dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   242dc:	defffa04 	addi	sp,sp,-24
   242e0:	dfc00515 	stw	ra,20(sp)
   242e4:	df000415 	stw	fp,16(sp)
   242e8:	df000404 	addi	fp,sp,16
   242ec:	e13ffd15 	stw	r4,-12(fp)
   242f0:	e17ffe15 	stw	r5,-8(fp)
   242f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   242f8:	e0bffd17 	ldw	r2,-12(fp)
   242fc:	10800017 	ldw	r2,0(r2)
   24300:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24304:	e0bffc17 	ldw	r2,-16(fp)
   24308:	10c00a04 	addi	r3,r2,40
   2430c:	e0bffd17 	ldw	r2,-12(fp)
   24310:	10800217 	ldw	r2,8(r2)
   24314:	100f883a 	mov	r7,r2
   24318:	e1bfff17 	ldw	r6,-4(fp)
   2431c:	e17ffe17 	ldw	r5,-8(fp)
   24320:	1809883a 	mov	r4,r3
   24324:	00244280 	call	24428 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   24328:	e037883a 	mov	sp,fp
   2432c:	dfc00117 	ldw	ra,4(sp)
   24330:	df000017 	ldw	fp,0(sp)
   24334:	dec00204 	addi	sp,sp,8
   24338:	f800283a 	ret

0002433c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   2433c:	defff704 	addi	sp,sp,-36
   24340:	df000815 	stw	fp,32(sp)
   24344:	df000804 	addi	fp,sp,32
   24348:	e13ffc15 	stw	r4,-16(fp)
   2434c:	e17ffd15 	stw	r5,-12(fp)
   24350:	e1bffe15 	stw	r6,-8(fp)
   24354:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   24358:	e0bffc17 	ldw	r2,-16(fp)
   2435c:	10800017 	ldw	r2,0(r2)
   24360:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   24364:	e0bffd17 	ldw	r2,-12(fp)
   24368:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   2436c:	e0bffe17 	ldw	r2,-8(fp)
   24370:	e0fffd17 	ldw	r3,-12(fp)
   24374:	1885883a 	add	r2,r3,r2
   24378:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   2437c:	00001206 	br	243c8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24380:	e0bff917 	ldw	r2,-28(fp)
   24384:	10800037 	ldwio	r2,0(r2)
   24388:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   2438c:	e0bffb17 	ldw	r2,-20(fp)
   24390:	10a0000c 	andi	r2,r2,32768
   24394:	10000626 	beq	r2,zero,243b0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24398:	e0bff817 	ldw	r2,-32(fp)
   2439c:	10c00044 	addi	r3,r2,1
   243a0:	e0fff815 	stw	r3,-32(fp)
   243a4:	e0fffb17 	ldw	r3,-20(fp)
   243a8:	10c00005 	stb	r3,0(r2)
   243ac:	00000606 	br	243c8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   243b0:	e0fff817 	ldw	r3,-32(fp)
   243b4:	e0bffd17 	ldw	r2,-12(fp)
   243b8:	1880071e 	bne	r3,r2,243d8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   243bc:	e0bfff17 	ldw	r2,-4(fp)
   243c0:	1090000c 	andi	r2,r2,16384
   243c4:	1000061e 	bne	r2,zero,243e0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   243c8:	e0fff817 	ldw	r3,-32(fp)
   243cc:	e0bffa17 	ldw	r2,-24(fp)
   243d0:	18bfeb36 	bltu	r3,r2,24380 <altera_avalon_jtag_uart_read+0x44>
   243d4:	00000306 	br	243e4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   243d8:	0001883a 	nop
   243dc:	00000106 	br	243e4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   243e0:	0001883a 	nop
    
  }

  if (ptr != buffer)
   243e4:	e0fff817 	ldw	r3,-32(fp)
   243e8:	e0bffd17 	ldw	r2,-12(fp)
   243ec:	18800426 	beq	r3,r2,24400 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   243f0:	e0fff817 	ldw	r3,-32(fp)
   243f4:	e0bffd17 	ldw	r2,-12(fp)
   243f8:	1885c83a 	sub	r2,r3,r2
   243fc:	00000606 	br	24418 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   24400:	e0bfff17 	ldw	r2,-4(fp)
   24404:	1090000c 	andi	r2,r2,16384
   24408:	10000226 	beq	r2,zero,24414 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   2440c:	00bffd44 	movi	r2,-11
   24410:	00000106 	br	24418 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   24414:	00bffec4 	movi	r2,-5
}
   24418:	e037883a 	mov	sp,fp
   2441c:	df000017 	ldw	fp,0(sp)
   24420:	dec00104 	addi	sp,sp,4
   24424:	f800283a 	ret

00024428 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24428:	defff904 	addi	sp,sp,-28
   2442c:	df000615 	stw	fp,24(sp)
   24430:	df000604 	addi	fp,sp,24
   24434:	e13ffc15 	stw	r4,-16(fp)
   24438:	e17ffd15 	stw	r5,-12(fp)
   2443c:	e1bffe15 	stw	r6,-8(fp)
   24440:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   24444:	e0bffc17 	ldw	r2,-16(fp)
   24448:	10800017 	ldw	r2,0(r2)
   2444c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   24450:	e0bffe17 	ldw	r2,-8(fp)
   24454:	e0fffd17 	ldw	r3,-12(fp)
   24458:	1885883a 	add	r2,r3,r2
   2445c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   24460:	00000e06 	br	2449c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   24464:	e0bffa17 	ldw	r2,-24(fp)
   24468:	10800104 	addi	r2,r2,4
   2446c:	10800037 	ldwio	r2,0(r2)
   24470:	10bfffec 	andhi	r2,r2,65535
   24474:	10000926 	beq	r2,zero,2449c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   24478:	e0fffa17 	ldw	r3,-24(fp)
   2447c:	e0bffd17 	ldw	r2,-12(fp)
   24480:	11000044 	addi	r4,r2,1
   24484:	e13ffd15 	stw	r4,-12(fp)
   24488:	10800003 	ldbu	r2,0(r2)
   2448c:	10803fcc 	andi	r2,r2,255
   24490:	1080201c 	xori	r2,r2,128
   24494:	10bfe004 	addi	r2,r2,-128
   24498:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   2449c:	e0fffd17 	ldw	r3,-12(fp)
   244a0:	e0bffb17 	ldw	r2,-20(fp)
   244a4:	18bfef36 	bltu	r3,r2,24464 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   244a8:	e0bffe17 	ldw	r2,-8(fp)
}
   244ac:	e037883a 	mov	sp,fp
   244b0:	df000017 	ldw	fp,0(sp)
   244b4:	dec00104 	addi	sp,sp,4
   244b8:	f800283a 	ret

000244bc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   244bc:	defffa04 	addi	sp,sp,-24
   244c0:	dfc00515 	stw	ra,20(sp)
   244c4:	df000415 	stw	fp,16(sp)
   244c8:	df000404 	addi	fp,sp,16
   244cc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   244d0:	0007883a 	mov	r3,zero
   244d4:	e0bfff17 	ldw	r2,-4(fp)
   244d8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   244dc:	e0bfff17 	ldw	r2,-4(fp)
   244e0:	10800104 	addi	r2,r2,4
   244e4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   244e8:	0005303a 	rdctl	r2,status
   244ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244f0:	e0fffd17 	ldw	r3,-12(fp)
   244f4:	00bfff84 	movi	r2,-2
   244f8:	1884703a 	and	r2,r3,r2
   244fc:	1001703a 	wrctl	status,r2
  
  return context;
   24500:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24504:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   24508:	0024f500 	call	24f50 <alt_tick>
   2450c:	e0bffc17 	ldw	r2,-16(fp)
   24510:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24514:	e0bffe17 	ldw	r2,-8(fp)
   24518:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2451c:	0001883a 	nop
   24520:	e037883a 	mov	sp,fp
   24524:	dfc00117 	ldw	ra,4(sp)
   24528:	df000017 	ldw	fp,0(sp)
   2452c:	dec00204 	addi	sp,sp,8
   24530:	f800283a 	ret

00024534 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24534:	defff804 	addi	sp,sp,-32
   24538:	dfc00715 	stw	ra,28(sp)
   2453c:	df000615 	stw	fp,24(sp)
   24540:	df000604 	addi	fp,sp,24
   24544:	e13ffc15 	stw	r4,-16(fp)
   24548:	e17ffd15 	stw	r5,-12(fp)
   2454c:	e1bffe15 	stw	r6,-8(fp)
   24550:	e1ffff15 	stw	r7,-4(fp)
   24554:	e0bfff17 	ldw	r2,-4(fp)
   24558:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2455c:	d0a0c817 	ldw	r2,-31968(gp)
   24560:	1000021e 	bne	r2,zero,2456c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   24564:	e0bffb17 	ldw	r2,-20(fp)
   24568:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2456c:	e0bffc17 	ldw	r2,-16(fp)
   24570:	10800104 	addi	r2,r2,4
   24574:	00c001c4 	movi	r3,7
   24578:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2457c:	d8000015 	stw	zero,0(sp)
   24580:	e1fffc17 	ldw	r7,-16(fp)
   24584:	018000b4 	movhi	r6,2
   24588:	31912f04 	addi	r6,r6,17596
   2458c:	e17ffe17 	ldw	r5,-8(fp)
   24590:	e13ffd17 	ldw	r4,-12(fp)
   24594:	002481c0 	call	2481c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   24598:	0001883a 	nop
   2459c:	e037883a 	mov	sp,fp
   245a0:	dfc00117 	ldw	ra,4(sp)
   245a4:	df000017 	ldw	fp,0(sp)
   245a8:	dec00204 	addi	sp,sp,8
   245ac:	f800283a 	ret

000245b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   245b0:	defffe04 	addi	sp,sp,-8
   245b4:	dfc00115 	stw	ra,4(sp)
   245b8:	df000015 	stw	fp,0(sp)
   245bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   245c0:	d0a00717 	ldw	r2,-32740(gp)
   245c4:	10000326 	beq	r2,zero,245d4 <alt_get_errno+0x24>
   245c8:	d0a00717 	ldw	r2,-32740(gp)
   245cc:	103ee83a 	callr	r2
   245d0:	00000106 	br	245d8 <alt_get_errno+0x28>
   245d4:	d0a0c304 	addi	r2,gp,-31988
}
   245d8:	e037883a 	mov	sp,fp
   245dc:	dfc00117 	ldw	ra,4(sp)
   245e0:	df000017 	ldw	fp,0(sp)
   245e4:	dec00204 	addi	sp,sp,8
   245e8:	f800283a 	ret

000245ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   245ec:	defffb04 	addi	sp,sp,-20
   245f0:	dfc00415 	stw	ra,16(sp)
   245f4:	df000315 	stw	fp,12(sp)
   245f8:	df000304 	addi	fp,sp,12
   245fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   24600:	e0bfff17 	ldw	r2,-4(fp)
   24604:	10000616 	blt	r2,zero,24620 <close+0x34>
   24608:	e0bfff17 	ldw	r2,-4(fp)
   2460c:	10c00324 	muli	r3,r2,12
   24610:	008000b4 	movhi	r2,2
   24614:	10965404 	addi	r2,r2,22864
   24618:	1885883a 	add	r2,r3,r2
   2461c:	00000106 	br	24624 <close+0x38>
   24620:	0005883a 	mov	r2,zero
   24624:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   24628:	e0bffd17 	ldw	r2,-12(fp)
   2462c:	10001926 	beq	r2,zero,24694 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24630:	e0bffd17 	ldw	r2,-12(fp)
   24634:	10800017 	ldw	r2,0(r2)
   24638:	10800417 	ldw	r2,16(r2)
   2463c:	10000626 	beq	r2,zero,24658 <close+0x6c>
   24640:	e0bffd17 	ldw	r2,-12(fp)
   24644:	10800017 	ldw	r2,0(r2)
   24648:	10800417 	ldw	r2,16(r2)
   2464c:	e13ffd17 	ldw	r4,-12(fp)
   24650:	103ee83a 	callr	r2
   24654:	00000106 	br	2465c <close+0x70>
   24658:	0005883a 	mov	r2,zero
   2465c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24660:	e13fff17 	ldw	r4,-4(fp)
   24664:	0024e500 	call	24e50 <alt_release_fd>
    if (rval < 0)
   24668:	e0bffe17 	ldw	r2,-8(fp)
   2466c:	1000070e 	bge	r2,zero,2468c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   24670:	00245b00 	call	245b0 <alt_get_errno>
   24674:	1007883a 	mov	r3,r2
   24678:	e0bffe17 	ldw	r2,-8(fp)
   2467c:	0085c83a 	sub	r2,zero,r2
   24680:	18800015 	stw	r2,0(r3)
      return -1;
   24684:	00bfffc4 	movi	r2,-1
   24688:	00000706 	br	246a8 <close+0xbc>
    }
    return 0;
   2468c:	0005883a 	mov	r2,zero
   24690:	00000506 	br	246a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24694:	00245b00 	call	245b0 <alt_get_errno>
   24698:	1007883a 	mov	r3,r2
   2469c:	00801444 	movi	r2,81
   246a0:	18800015 	stw	r2,0(r3)
    return -1;
   246a4:	00bfffc4 	movi	r2,-1
  }
}
   246a8:	e037883a 	mov	sp,fp
   246ac:	dfc00117 	ldw	ra,4(sp)
   246b0:	df000017 	ldw	fp,0(sp)
   246b4:	dec00204 	addi	sp,sp,8
   246b8:	f800283a 	ret

000246bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   246bc:	deffff04 	addi	sp,sp,-4
   246c0:	df000015 	stw	fp,0(sp)
   246c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   246c8:	0001883a 	nop
   246cc:	e037883a 	mov	sp,fp
   246d0:	df000017 	ldw	fp,0(sp)
   246d4:	dec00104 	addi	sp,sp,4
   246d8:	f800283a 	ret

000246dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   246dc:	defffc04 	addi	sp,sp,-16
   246e0:	df000315 	stw	fp,12(sp)
   246e4:	df000304 	addi	fp,sp,12
   246e8:	e13ffd15 	stw	r4,-12(fp)
   246ec:	e17ffe15 	stw	r5,-8(fp)
   246f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   246f4:	e0bfff17 	ldw	r2,-4(fp)
}
   246f8:	e037883a 	mov	sp,fp
   246fc:	df000017 	ldw	fp,0(sp)
   24700:	dec00104 	addi	sp,sp,4
   24704:	f800283a 	ret

00024708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24708:	defffe04 	addi	sp,sp,-8
   2470c:	dfc00115 	stw	ra,4(sp)
   24710:	df000015 	stw	fp,0(sp)
   24714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24718:	d0a00717 	ldw	r2,-32740(gp)
   2471c:	10000326 	beq	r2,zero,2472c <alt_get_errno+0x24>
   24720:	d0a00717 	ldw	r2,-32740(gp)
   24724:	103ee83a 	callr	r2
   24728:	00000106 	br	24730 <alt_get_errno+0x28>
   2472c:	d0a0c304 	addi	r2,gp,-31988
}
   24730:	e037883a 	mov	sp,fp
   24734:	dfc00117 	ldw	ra,4(sp)
   24738:	df000017 	ldw	fp,0(sp)
   2473c:	dec00204 	addi	sp,sp,8
   24740:	f800283a 	ret

00024744 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24744:	defffa04 	addi	sp,sp,-24
   24748:	dfc00515 	stw	ra,20(sp)
   2474c:	df000415 	stw	fp,16(sp)
   24750:	df000404 	addi	fp,sp,16
   24754:	e13ffe15 	stw	r4,-8(fp)
   24758:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2475c:	e0bffe17 	ldw	r2,-8(fp)
   24760:	10000326 	beq	r2,zero,24770 <alt_dev_llist_insert+0x2c>
   24764:	e0bffe17 	ldw	r2,-8(fp)
   24768:	10800217 	ldw	r2,8(r2)
   2476c:	1000061e 	bne	r2,zero,24788 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24770:	00247080 	call	24708 <alt_get_errno>
   24774:	1007883a 	mov	r3,r2
   24778:	00800584 	movi	r2,22
   2477c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24780:	00bffa84 	movi	r2,-22
   24784:	00001306 	br	247d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24788:	e0bffe17 	ldw	r2,-8(fp)
   2478c:	e0ffff17 	ldw	r3,-4(fp)
   24790:	e0fffc15 	stw	r3,-16(fp)
   24794:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24798:	e0bffd17 	ldw	r2,-12(fp)
   2479c:	e0fffc17 	ldw	r3,-16(fp)
   247a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   247a4:	e0bffc17 	ldw	r2,-16(fp)
   247a8:	10c00017 	ldw	r3,0(r2)
   247ac:	e0bffd17 	ldw	r2,-12(fp)
   247b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   247b4:	e0bffc17 	ldw	r2,-16(fp)
   247b8:	10800017 	ldw	r2,0(r2)
   247bc:	e0fffd17 	ldw	r3,-12(fp)
   247c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   247c4:	e0bffc17 	ldw	r2,-16(fp)
   247c8:	e0fffd17 	ldw	r3,-12(fp)
   247cc:	10c00015 	stw	r3,0(r2)

  return 0;  
   247d0:	0005883a 	mov	r2,zero
}
   247d4:	e037883a 	mov	sp,fp
   247d8:	dfc00117 	ldw	ra,4(sp)
   247dc:	df000017 	ldw	fp,0(sp)
   247e0:	dec00204 	addi	sp,sp,8
   247e4:	f800283a 	ret

000247e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   247e8:	defffe04 	addi	sp,sp,-8
   247ec:	dfc00115 	stw	ra,4(sp)
   247f0:	df000015 	stw	fp,0(sp)
   247f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   247f8:	01420004 	movi	r5,2048
   247fc:	0009883a 	mov	r4,zero
   24800:	00252b80 	call	252b8 <alt_icache_flush>
#endif
}
   24804:	0001883a 	nop
   24808:	e037883a 	mov	sp,fp
   2480c:	dfc00117 	ldw	ra,4(sp)
   24810:	df000017 	ldw	fp,0(sp)
   24814:	dec00204 	addi	sp,sp,8
   24818:	f800283a 	ret

0002481c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2481c:	defff904 	addi	sp,sp,-28
   24820:	dfc00615 	stw	ra,24(sp)
   24824:	df000515 	stw	fp,20(sp)
   24828:	df000504 	addi	fp,sp,20
   2482c:	e13ffc15 	stw	r4,-16(fp)
   24830:	e17ffd15 	stw	r5,-12(fp)
   24834:	e1bffe15 	stw	r6,-8(fp)
   24838:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2483c:	e0800217 	ldw	r2,8(fp)
   24840:	d8800015 	stw	r2,0(sp)
   24844:	e1ffff17 	ldw	r7,-4(fp)
   24848:	e1bffe17 	ldw	r6,-8(fp)
   2484c:	e17ffd17 	ldw	r5,-12(fp)
   24850:	e13ffc17 	ldw	r4,-16(fp)
   24854:	00249cc0 	call	249cc <alt_iic_isr_register>
}  
   24858:	e037883a 	mov	sp,fp
   2485c:	dfc00117 	ldw	ra,4(sp)
   24860:	df000017 	ldw	fp,0(sp)
   24864:	dec00204 	addi	sp,sp,8
   24868:	f800283a 	ret

0002486c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2486c:	defff904 	addi	sp,sp,-28
   24870:	df000615 	stw	fp,24(sp)
   24874:	df000604 	addi	fp,sp,24
   24878:	e13ffe15 	stw	r4,-8(fp)
   2487c:	e17fff15 	stw	r5,-4(fp)
   24880:	e0bfff17 	ldw	r2,-4(fp)
   24884:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24888:	0005303a 	rdctl	r2,status
   2488c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24890:	e0fffb17 	ldw	r3,-20(fp)
   24894:	00bfff84 	movi	r2,-2
   24898:	1884703a 	and	r2,r3,r2
   2489c:	1001703a 	wrctl	status,r2
  
  return context;
   248a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   248a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   248a8:	00c00044 	movi	r3,1
   248ac:	e0bffa17 	ldw	r2,-24(fp)
   248b0:	1884983a 	sll	r2,r3,r2
   248b4:	1007883a 	mov	r3,r2
   248b8:	d0a0c717 	ldw	r2,-31972(gp)
   248bc:	1884b03a 	or	r2,r3,r2
   248c0:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   248c4:	d0a0c717 	ldw	r2,-31972(gp)
   248c8:	100170fa 	wrctl	ienable,r2
   248cc:	e0bffc17 	ldw	r2,-16(fp)
   248d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   248d4:	e0bffd17 	ldw	r2,-12(fp)
   248d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   248dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   248e0:	0001883a 	nop
}
   248e4:	e037883a 	mov	sp,fp
   248e8:	df000017 	ldw	fp,0(sp)
   248ec:	dec00104 	addi	sp,sp,4
   248f0:	f800283a 	ret

000248f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   248f4:	defff904 	addi	sp,sp,-28
   248f8:	df000615 	stw	fp,24(sp)
   248fc:	df000604 	addi	fp,sp,24
   24900:	e13ffe15 	stw	r4,-8(fp)
   24904:	e17fff15 	stw	r5,-4(fp)
   24908:	e0bfff17 	ldw	r2,-4(fp)
   2490c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24910:	0005303a 	rdctl	r2,status
   24914:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24918:	e0fffb17 	ldw	r3,-20(fp)
   2491c:	00bfff84 	movi	r2,-2
   24920:	1884703a 	and	r2,r3,r2
   24924:	1001703a 	wrctl	status,r2
  
  return context;
   24928:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2492c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24930:	00c00044 	movi	r3,1
   24934:	e0bffa17 	ldw	r2,-24(fp)
   24938:	1884983a 	sll	r2,r3,r2
   2493c:	0084303a 	nor	r2,zero,r2
   24940:	1007883a 	mov	r3,r2
   24944:	d0a0c717 	ldw	r2,-31972(gp)
   24948:	1884703a 	and	r2,r3,r2
   2494c:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24950:	d0a0c717 	ldw	r2,-31972(gp)
   24954:	100170fa 	wrctl	ienable,r2
   24958:	e0bffc17 	ldw	r2,-16(fp)
   2495c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24960:	e0bffd17 	ldw	r2,-12(fp)
   24964:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24968:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2496c:	0001883a 	nop
}
   24970:	e037883a 	mov	sp,fp
   24974:	df000017 	ldw	fp,0(sp)
   24978:	dec00104 	addi	sp,sp,4
   2497c:	f800283a 	ret

00024980 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24980:	defffc04 	addi	sp,sp,-16
   24984:	df000315 	stw	fp,12(sp)
   24988:	df000304 	addi	fp,sp,12
   2498c:	e13ffe15 	stw	r4,-8(fp)
   24990:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24994:	000530fa 	rdctl	r2,ienable
   24998:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2499c:	00c00044 	movi	r3,1
   249a0:	e0bfff17 	ldw	r2,-4(fp)
   249a4:	1884983a 	sll	r2,r3,r2
   249a8:	1007883a 	mov	r3,r2
   249ac:	e0bffd17 	ldw	r2,-12(fp)
   249b0:	1884703a 	and	r2,r3,r2
   249b4:	1004c03a 	cmpne	r2,r2,zero
   249b8:	10803fcc 	andi	r2,r2,255
}
   249bc:	e037883a 	mov	sp,fp
   249c0:	df000017 	ldw	fp,0(sp)
   249c4:	dec00104 	addi	sp,sp,4
   249c8:	f800283a 	ret

000249cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   249cc:	defff504 	addi	sp,sp,-44
   249d0:	dfc00a15 	stw	ra,40(sp)
   249d4:	df000915 	stw	fp,36(sp)
   249d8:	df000904 	addi	fp,sp,36
   249dc:	e13ffc15 	stw	r4,-16(fp)
   249e0:	e17ffd15 	stw	r5,-12(fp)
   249e4:	e1bffe15 	stw	r6,-8(fp)
   249e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   249ec:	00bffa84 	movi	r2,-22
   249f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   249f4:	e0bffd17 	ldw	r2,-12(fp)
   249f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   249fc:	e0bff817 	ldw	r2,-32(fp)
   24a00:	10800808 	cmpgei	r2,r2,32
   24a04:	1000271e 	bne	r2,zero,24aa4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a08:	0005303a 	rdctl	r2,status
   24a0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a10:	e0fffb17 	ldw	r3,-20(fp)
   24a14:	00bfff84 	movi	r2,-2
   24a18:	1884703a 	and	r2,r3,r2
   24a1c:	1001703a 	wrctl	status,r2
  
  return context;
   24a20:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24a24:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   24a28:	008000b4 	movhi	r2,2
   24a2c:	10977f04 	addi	r2,r2,24060
   24a30:	e0fff817 	ldw	r3,-32(fp)
   24a34:	180690fa 	slli	r3,r3,3
   24a38:	10c5883a 	add	r2,r2,r3
   24a3c:	e0fffe17 	ldw	r3,-8(fp)
   24a40:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   24a44:	008000b4 	movhi	r2,2
   24a48:	10977f04 	addi	r2,r2,24060
   24a4c:	e0fff817 	ldw	r3,-32(fp)
   24a50:	180690fa 	slli	r3,r3,3
   24a54:	10c5883a 	add	r2,r2,r3
   24a58:	10800104 	addi	r2,r2,4
   24a5c:	e0ffff17 	ldw	r3,-4(fp)
   24a60:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24a64:	e0bffe17 	ldw	r2,-8(fp)
   24a68:	10000526 	beq	r2,zero,24a80 <alt_iic_isr_register+0xb4>
   24a6c:	e0bff817 	ldw	r2,-32(fp)
   24a70:	100b883a 	mov	r5,r2
   24a74:	e13ffc17 	ldw	r4,-16(fp)
   24a78:	002486c0 	call	2486c <alt_ic_irq_enable>
   24a7c:	00000406 	br	24a90 <alt_iic_isr_register+0xc4>
   24a80:	e0bff817 	ldw	r2,-32(fp)
   24a84:	100b883a 	mov	r5,r2
   24a88:	e13ffc17 	ldw	r4,-16(fp)
   24a8c:	00248f40 	call	248f4 <alt_ic_irq_disable>
   24a90:	e0bff715 	stw	r2,-36(fp)
   24a94:	e0bffa17 	ldw	r2,-24(fp)
   24a98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24a9c:	e0bff917 	ldw	r2,-28(fp)
   24aa0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24aa4:	e0bff717 	ldw	r2,-36(fp)
}
   24aa8:	e037883a 	mov	sp,fp
   24aac:	dfc00117 	ldw	ra,4(sp)
   24ab0:	df000017 	ldw	fp,0(sp)
   24ab4:	dec00204 	addi	sp,sp,8
   24ab8:	f800283a 	ret

00024abc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24abc:	defff904 	addi	sp,sp,-28
   24ac0:	dfc00615 	stw	ra,24(sp)
   24ac4:	df000515 	stw	fp,20(sp)
   24ac8:	df000504 	addi	fp,sp,20
   24acc:	e13ffc15 	stw	r4,-16(fp)
   24ad0:	e17ffd15 	stw	r5,-12(fp)
   24ad4:	e1bffe15 	stw	r6,-8(fp)
   24ad8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   24adc:	e1bfff17 	ldw	r6,-4(fp)
   24ae0:	e17ffe17 	ldw	r5,-8(fp)
   24ae4:	e13ffd17 	ldw	r4,-12(fp)
   24ae8:	0024cfc0 	call	24cfc <open>
   24aec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   24af0:	e0bffb17 	ldw	r2,-20(fp)
   24af4:	10001c16 	blt	r2,zero,24b68 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   24af8:	008000b4 	movhi	r2,2
   24afc:	10965404 	addi	r2,r2,22864
   24b00:	e0fffb17 	ldw	r3,-20(fp)
   24b04:	18c00324 	muli	r3,r3,12
   24b08:	10c5883a 	add	r2,r2,r3
   24b0c:	10c00017 	ldw	r3,0(r2)
   24b10:	e0bffc17 	ldw	r2,-16(fp)
   24b14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24b18:	008000b4 	movhi	r2,2
   24b1c:	10965404 	addi	r2,r2,22864
   24b20:	e0fffb17 	ldw	r3,-20(fp)
   24b24:	18c00324 	muli	r3,r3,12
   24b28:	10c5883a 	add	r2,r2,r3
   24b2c:	10800104 	addi	r2,r2,4
   24b30:	10c00017 	ldw	r3,0(r2)
   24b34:	e0bffc17 	ldw	r2,-16(fp)
   24b38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   24b3c:	008000b4 	movhi	r2,2
   24b40:	10965404 	addi	r2,r2,22864
   24b44:	e0fffb17 	ldw	r3,-20(fp)
   24b48:	18c00324 	muli	r3,r3,12
   24b4c:	10c5883a 	add	r2,r2,r3
   24b50:	10800204 	addi	r2,r2,8
   24b54:	10c00017 	ldw	r3,0(r2)
   24b58:	e0bffc17 	ldw	r2,-16(fp)
   24b5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24b60:	e13ffb17 	ldw	r4,-20(fp)
   24b64:	0024e500 	call	24e50 <alt_release_fd>
  }
} 
   24b68:	0001883a 	nop
   24b6c:	e037883a 	mov	sp,fp
   24b70:	dfc00117 	ldw	ra,4(sp)
   24b74:	df000017 	ldw	fp,0(sp)
   24b78:	dec00204 	addi	sp,sp,8
   24b7c:	f800283a 	ret

00024b80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24b80:	defffb04 	addi	sp,sp,-20
   24b84:	dfc00415 	stw	ra,16(sp)
   24b88:	df000315 	stw	fp,12(sp)
   24b8c:	df000304 	addi	fp,sp,12
   24b90:	e13ffd15 	stw	r4,-12(fp)
   24b94:	e17ffe15 	stw	r5,-8(fp)
   24b98:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24b9c:	01c07fc4 	movi	r7,511
   24ba0:	01800044 	movi	r6,1
   24ba4:	e17ffd17 	ldw	r5,-12(fp)
   24ba8:	010000b4 	movhi	r4,2
   24bac:	21165704 	addi	r4,r4,22876
   24bb0:	0024abc0 	call	24abc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24bb4:	01c07fc4 	movi	r7,511
   24bb8:	000d883a 	mov	r6,zero
   24bbc:	e17ffe17 	ldw	r5,-8(fp)
   24bc0:	010000b4 	movhi	r4,2
   24bc4:	21165404 	addi	r4,r4,22864
   24bc8:	0024abc0 	call	24abc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24bcc:	01c07fc4 	movi	r7,511
   24bd0:	01800044 	movi	r6,1
   24bd4:	e17fff17 	ldw	r5,-4(fp)
   24bd8:	010000b4 	movhi	r4,2
   24bdc:	21165a04 	addi	r4,r4,22888
   24be0:	0024abc0 	call	24abc <alt_open_fd>
}  
   24be4:	0001883a 	nop
   24be8:	e037883a 	mov	sp,fp
   24bec:	dfc00117 	ldw	ra,4(sp)
   24bf0:	df000017 	ldw	fp,0(sp)
   24bf4:	dec00204 	addi	sp,sp,8
   24bf8:	f800283a 	ret

00024bfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24bfc:	defffe04 	addi	sp,sp,-8
   24c00:	dfc00115 	stw	ra,4(sp)
   24c04:	df000015 	stw	fp,0(sp)
   24c08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24c0c:	d0a00717 	ldw	r2,-32740(gp)
   24c10:	10000326 	beq	r2,zero,24c20 <alt_get_errno+0x24>
   24c14:	d0a00717 	ldw	r2,-32740(gp)
   24c18:	103ee83a 	callr	r2
   24c1c:	00000106 	br	24c24 <alt_get_errno+0x28>
   24c20:	d0a0c304 	addi	r2,gp,-31988
}
   24c24:	e037883a 	mov	sp,fp
   24c28:	dfc00117 	ldw	ra,4(sp)
   24c2c:	df000017 	ldw	fp,0(sp)
   24c30:	dec00204 	addi	sp,sp,8
   24c34:	f800283a 	ret

00024c38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24c38:	defffd04 	addi	sp,sp,-12
   24c3c:	df000215 	stw	fp,8(sp)
   24c40:	df000204 	addi	fp,sp,8
   24c44:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24c48:	e0bfff17 	ldw	r2,-4(fp)
   24c4c:	10800217 	ldw	r2,8(r2)
   24c50:	10d00034 	orhi	r3,r2,16384
   24c54:	e0bfff17 	ldw	r2,-4(fp)
   24c58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24c5c:	e03ffe15 	stw	zero,-8(fp)
   24c60:	00001d06 	br	24cd8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24c64:	008000b4 	movhi	r2,2
   24c68:	10965404 	addi	r2,r2,22864
   24c6c:	e0fffe17 	ldw	r3,-8(fp)
   24c70:	18c00324 	muli	r3,r3,12
   24c74:	10c5883a 	add	r2,r2,r3
   24c78:	10c00017 	ldw	r3,0(r2)
   24c7c:	e0bfff17 	ldw	r2,-4(fp)
   24c80:	10800017 	ldw	r2,0(r2)
   24c84:	1880111e 	bne	r3,r2,24ccc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24c88:	008000b4 	movhi	r2,2
   24c8c:	10965404 	addi	r2,r2,22864
   24c90:	e0fffe17 	ldw	r3,-8(fp)
   24c94:	18c00324 	muli	r3,r3,12
   24c98:	10c5883a 	add	r2,r2,r3
   24c9c:	10800204 	addi	r2,r2,8
   24ca0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24ca4:	1000090e 	bge	r2,zero,24ccc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24ca8:	e0bffe17 	ldw	r2,-8(fp)
   24cac:	10c00324 	muli	r3,r2,12
   24cb0:	008000b4 	movhi	r2,2
   24cb4:	10965404 	addi	r2,r2,22864
   24cb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24cbc:	e0bfff17 	ldw	r2,-4(fp)
   24cc0:	18800226 	beq	r3,r2,24ccc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24cc4:	00bffcc4 	movi	r2,-13
   24cc8:	00000806 	br	24cec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24ccc:	e0bffe17 	ldw	r2,-8(fp)
   24cd0:	10800044 	addi	r2,r2,1
   24cd4:	e0bffe15 	stw	r2,-8(fp)
   24cd8:	d0a00617 	ldw	r2,-32744(gp)
   24cdc:	1007883a 	mov	r3,r2
   24ce0:	e0bffe17 	ldw	r2,-8(fp)
   24ce4:	18bfdf2e 	bgeu	r3,r2,24c64 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24ce8:	0005883a 	mov	r2,zero
}
   24cec:	e037883a 	mov	sp,fp
   24cf0:	df000017 	ldw	fp,0(sp)
   24cf4:	dec00104 	addi	sp,sp,4
   24cf8:	f800283a 	ret

00024cfc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24cfc:	defff604 	addi	sp,sp,-40
   24d00:	dfc00915 	stw	ra,36(sp)
   24d04:	df000815 	stw	fp,32(sp)
   24d08:	df000804 	addi	fp,sp,32
   24d0c:	e13ffd15 	stw	r4,-12(fp)
   24d10:	e17ffe15 	stw	r5,-8(fp)
   24d14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24d18:	00bfffc4 	movi	r2,-1
   24d1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24d20:	00bffb44 	movi	r2,-19
   24d24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24d28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24d2c:	d1600404 	addi	r5,gp,-32752
   24d30:	e13ffd17 	ldw	r4,-12(fp)
   24d34:	002507c0 	call	2507c <alt_find_dev>
   24d38:	e0bff815 	stw	r2,-32(fp)
   24d3c:	e0bff817 	ldw	r2,-32(fp)
   24d40:	1000051e 	bne	r2,zero,24d58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24d44:	e13ffd17 	ldw	r4,-12(fp)
   24d48:	002510c0 	call	2510c <alt_find_file>
   24d4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24d50:	00800044 	movi	r2,1
   24d54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24d58:	e0bff817 	ldw	r2,-32(fp)
   24d5c:	10002926 	beq	r2,zero,24e04 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24d60:	e13ff817 	ldw	r4,-32(fp)
   24d64:	00252140 	call	25214 <alt_get_fd>
   24d68:	e0bff915 	stw	r2,-28(fp)
   24d6c:	e0bff917 	ldw	r2,-28(fp)
   24d70:	1000030e 	bge	r2,zero,24d80 <open+0x84>
    {
      status = index;
   24d74:	e0bff917 	ldw	r2,-28(fp)
   24d78:	e0bffa15 	stw	r2,-24(fp)
   24d7c:	00002306 	br	24e0c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   24d80:	e0bff917 	ldw	r2,-28(fp)
   24d84:	10c00324 	muli	r3,r2,12
   24d88:	008000b4 	movhi	r2,2
   24d8c:	10965404 	addi	r2,r2,22864
   24d90:	1885883a 	add	r2,r3,r2
   24d94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24d98:	e0fffe17 	ldw	r3,-8(fp)
   24d9c:	00900034 	movhi	r2,16384
   24da0:	10bfffc4 	addi	r2,r2,-1
   24da4:	1886703a 	and	r3,r3,r2
   24da8:	e0bffc17 	ldw	r2,-16(fp)
   24dac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24db0:	e0bffb17 	ldw	r2,-20(fp)
   24db4:	1000051e 	bne	r2,zero,24dcc <open+0xd0>
   24db8:	e13ffc17 	ldw	r4,-16(fp)
   24dbc:	0024c380 	call	24c38 <alt_file_locked>
   24dc0:	e0bffa15 	stw	r2,-24(fp)
   24dc4:	e0bffa17 	ldw	r2,-24(fp)
   24dc8:	10001016 	blt	r2,zero,24e0c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24dcc:	e0bff817 	ldw	r2,-32(fp)
   24dd0:	10800317 	ldw	r2,12(r2)
   24dd4:	10000826 	beq	r2,zero,24df8 <open+0xfc>
   24dd8:	e0bff817 	ldw	r2,-32(fp)
   24ddc:	10800317 	ldw	r2,12(r2)
   24de0:	e1ffff17 	ldw	r7,-4(fp)
   24de4:	e1bffe17 	ldw	r6,-8(fp)
   24de8:	e17ffd17 	ldw	r5,-12(fp)
   24dec:	e13ffc17 	ldw	r4,-16(fp)
   24df0:	103ee83a 	callr	r2
   24df4:	00000106 	br	24dfc <open+0x100>
   24df8:	0005883a 	mov	r2,zero
   24dfc:	e0bffa15 	stw	r2,-24(fp)
   24e00:	00000206 	br	24e0c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24e04:	00bffb44 	movi	r2,-19
   24e08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24e0c:	e0bffa17 	ldw	r2,-24(fp)
   24e10:	1000090e 	bge	r2,zero,24e38 <open+0x13c>
  {
    alt_release_fd (index);  
   24e14:	e13ff917 	ldw	r4,-28(fp)
   24e18:	0024e500 	call	24e50 <alt_release_fd>
    ALT_ERRNO = -status;
   24e1c:	0024bfc0 	call	24bfc <alt_get_errno>
   24e20:	1007883a 	mov	r3,r2
   24e24:	e0bffa17 	ldw	r2,-24(fp)
   24e28:	0085c83a 	sub	r2,zero,r2
   24e2c:	18800015 	stw	r2,0(r3)
    return -1;
   24e30:	00bfffc4 	movi	r2,-1
   24e34:	00000106 	br	24e3c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   24e38:	e0bff917 	ldw	r2,-28(fp)
}
   24e3c:	e037883a 	mov	sp,fp
   24e40:	dfc00117 	ldw	ra,4(sp)
   24e44:	df000017 	ldw	fp,0(sp)
   24e48:	dec00204 	addi	sp,sp,8
   24e4c:	f800283a 	ret

00024e50 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24e50:	defffe04 	addi	sp,sp,-8
   24e54:	df000115 	stw	fp,4(sp)
   24e58:	df000104 	addi	fp,sp,4
   24e5c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   24e60:	e0bfff17 	ldw	r2,-4(fp)
   24e64:	108000d0 	cmplti	r2,r2,3
   24e68:	10000d1e 	bne	r2,zero,24ea0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   24e6c:	008000b4 	movhi	r2,2
   24e70:	10965404 	addi	r2,r2,22864
   24e74:	e0ffff17 	ldw	r3,-4(fp)
   24e78:	18c00324 	muli	r3,r3,12
   24e7c:	10c5883a 	add	r2,r2,r3
   24e80:	10800204 	addi	r2,r2,8
   24e84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   24e88:	008000b4 	movhi	r2,2
   24e8c:	10965404 	addi	r2,r2,22864
   24e90:	e0ffff17 	ldw	r3,-4(fp)
   24e94:	18c00324 	muli	r3,r3,12
   24e98:	10c5883a 	add	r2,r2,r3
   24e9c:	10000015 	stw	zero,0(r2)
  }
}
   24ea0:	0001883a 	nop
   24ea4:	e037883a 	mov	sp,fp
   24ea8:	df000017 	ldw	fp,0(sp)
   24eac:	dec00104 	addi	sp,sp,4
   24eb0:	f800283a 	ret

00024eb4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24eb4:	defffa04 	addi	sp,sp,-24
   24eb8:	df000515 	stw	fp,20(sp)
   24ebc:	df000504 	addi	fp,sp,20
   24ec0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24ec4:	0005303a 	rdctl	r2,status
   24ec8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24ecc:	e0fffc17 	ldw	r3,-16(fp)
   24ed0:	00bfff84 	movi	r2,-2
   24ed4:	1884703a 	and	r2,r3,r2
   24ed8:	1001703a 	wrctl	status,r2
  
  return context;
   24edc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24ee0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24ee4:	e0bfff17 	ldw	r2,-4(fp)
   24ee8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24eec:	e0bffd17 	ldw	r2,-12(fp)
   24ef0:	10800017 	ldw	r2,0(r2)
   24ef4:	e0fffd17 	ldw	r3,-12(fp)
   24ef8:	18c00117 	ldw	r3,4(r3)
   24efc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24f00:	e0bffd17 	ldw	r2,-12(fp)
   24f04:	10800117 	ldw	r2,4(r2)
   24f08:	e0fffd17 	ldw	r3,-12(fp)
   24f0c:	18c00017 	ldw	r3,0(r3)
   24f10:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24f14:	e0bffd17 	ldw	r2,-12(fp)
   24f18:	e0fffd17 	ldw	r3,-12(fp)
   24f1c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24f20:	e0bffd17 	ldw	r2,-12(fp)
   24f24:	e0fffd17 	ldw	r3,-12(fp)
   24f28:	10c00015 	stw	r3,0(r2)
   24f2c:	e0bffb17 	ldw	r2,-20(fp)
   24f30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24f34:	e0bffe17 	ldw	r2,-8(fp)
   24f38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24f3c:	0001883a 	nop
   24f40:	e037883a 	mov	sp,fp
   24f44:	df000017 	ldw	fp,0(sp)
   24f48:	dec00104 	addi	sp,sp,4
   24f4c:	f800283a 	ret

00024f50 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24f50:	defffb04 	addi	sp,sp,-20
   24f54:	dfc00415 	stw	ra,16(sp)
   24f58:	df000315 	stw	fp,12(sp)
   24f5c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24f60:	d0a00917 	ldw	r2,-32732(gp)
   24f64:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24f68:	d0a0c917 	ldw	r2,-31964(gp)
   24f6c:	10800044 	addi	r2,r2,1
   24f70:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24f74:	00002e06 	br	25030 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24f78:	e0bffd17 	ldw	r2,-12(fp)
   24f7c:	10800017 	ldw	r2,0(r2)
   24f80:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24f84:	e0bffd17 	ldw	r2,-12(fp)
   24f88:	10800403 	ldbu	r2,16(r2)
   24f8c:	10803fcc 	andi	r2,r2,255
   24f90:	10000426 	beq	r2,zero,24fa4 <alt_tick+0x54>
   24f94:	d0a0c917 	ldw	r2,-31964(gp)
   24f98:	1000021e 	bne	r2,zero,24fa4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24f9c:	e0bffd17 	ldw	r2,-12(fp)
   24fa0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24fa4:	e0bffd17 	ldw	r2,-12(fp)
   24fa8:	10800217 	ldw	r2,8(r2)
   24fac:	d0e0c917 	ldw	r3,-31964(gp)
   24fb0:	18801d36 	bltu	r3,r2,25028 <alt_tick+0xd8>
   24fb4:	e0bffd17 	ldw	r2,-12(fp)
   24fb8:	10800403 	ldbu	r2,16(r2)
   24fbc:	10803fcc 	andi	r2,r2,255
   24fc0:	1000191e 	bne	r2,zero,25028 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24fc4:	e0bffd17 	ldw	r2,-12(fp)
   24fc8:	10800317 	ldw	r2,12(r2)
   24fcc:	e0fffd17 	ldw	r3,-12(fp)
   24fd0:	18c00517 	ldw	r3,20(r3)
   24fd4:	1809883a 	mov	r4,r3
   24fd8:	103ee83a 	callr	r2
   24fdc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24fe0:	e0bfff17 	ldw	r2,-4(fp)
   24fe4:	1000031e 	bne	r2,zero,24ff4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24fe8:	e13ffd17 	ldw	r4,-12(fp)
   24fec:	0024eb40 	call	24eb4 <alt_alarm_stop>
   24ff0:	00000d06 	br	25028 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24ff4:	e0bffd17 	ldw	r2,-12(fp)
   24ff8:	10c00217 	ldw	r3,8(r2)
   24ffc:	e0bfff17 	ldw	r2,-4(fp)
   25000:	1887883a 	add	r3,r3,r2
   25004:	e0bffd17 	ldw	r2,-12(fp)
   25008:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2500c:	e0bffd17 	ldw	r2,-12(fp)
   25010:	10c00217 	ldw	r3,8(r2)
   25014:	d0a0c917 	ldw	r2,-31964(gp)
   25018:	1880032e 	bgeu	r3,r2,25028 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2501c:	e0bffd17 	ldw	r2,-12(fp)
   25020:	00c00044 	movi	r3,1
   25024:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   25028:	e0bffe17 	ldw	r2,-8(fp)
   2502c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25030:	e0fffd17 	ldw	r3,-12(fp)
   25034:	d0a00904 	addi	r2,gp,-32732
   25038:	18bfcf1e 	bne	r3,r2,24f78 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2503c:	0001883a 	nop
}
   25040:	0001883a 	nop
   25044:	e037883a 	mov	sp,fp
   25048:	dfc00117 	ldw	ra,4(sp)
   2504c:	df000017 	ldw	fp,0(sp)
   25050:	dec00204 	addi	sp,sp,8
   25054:	f800283a 	ret

00025058 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   25058:	deffff04 	addi	sp,sp,-4
   2505c:	df000015 	stw	fp,0(sp)
   25060:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   25064:	000170fa 	wrctl	ienable,zero
}
   25068:	0001883a 	nop
   2506c:	e037883a 	mov	sp,fp
   25070:	df000017 	ldw	fp,0(sp)
   25074:	dec00104 	addi	sp,sp,4
   25078:	f800283a 	ret

0002507c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2507c:	defffa04 	addi	sp,sp,-24
   25080:	dfc00515 	stw	ra,20(sp)
   25084:	df000415 	stw	fp,16(sp)
   25088:	df000404 	addi	fp,sp,16
   2508c:	e13ffe15 	stw	r4,-8(fp)
   25090:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25094:	e0bfff17 	ldw	r2,-4(fp)
   25098:	10800017 	ldw	r2,0(r2)
   2509c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   250a0:	e13ffe17 	ldw	r4,-8(fp)
   250a4:	0022ff40 	call	22ff4 <strlen>
   250a8:	10800044 	addi	r2,r2,1
   250ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   250b0:	00000d06 	br	250e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   250b4:	e0bffc17 	ldw	r2,-16(fp)
   250b8:	10800217 	ldw	r2,8(r2)
   250bc:	e0fffd17 	ldw	r3,-12(fp)
   250c0:	180d883a 	mov	r6,r3
   250c4:	e17ffe17 	ldw	r5,-8(fp)
   250c8:	1009883a 	mov	r4,r2
   250cc:	00254040 	call	25404 <memcmp>
   250d0:	1000021e 	bne	r2,zero,250dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   250d4:	e0bffc17 	ldw	r2,-16(fp)
   250d8:	00000706 	br	250f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   250dc:	e0bffc17 	ldw	r2,-16(fp)
   250e0:	10800017 	ldw	r2,0(r2)
   250e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   250e8:	e0fffc17 	ldw	r3,-16(fp)
   250ec:	e0bfff17 	ldw	r2,-4(fp)
   250f0:	18bff01e 	bne	r3,r2,250b4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   250f4:	0005883a 	mov	r2,zero
}
   250f8:	e037883a 	mov	sp,fp
   250fc:	dfc00117 	ldw	ra,4(sp)
   25100:	df000017 	ldw	fp,0(sp)
   25104:	dec00204 	addi	sp,sp,8
   25108:	f800283a 	ret

0002510c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2510c:	defffb04 	addi	sp,sp,-20
   25110:	dfc00415 	stw	ra,16(sp)
   25114:	df000315 	stw	fp,12(sp)
   25118:	df000304 	addi	fp,sp,12
   2511c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25120:	d0a00217 	ldw	r2,-32760(gp)
   25124:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25128:	00003106 	br	251f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2512c:	e0bffd17 	ldw	r2,-12(fp)
   25130:	10800217 	ldw	r2,8(r2)
   25134:	1009883a 	mov	r4,r2
   25138:	0022ff40 	call	22ff4 <strlen>
   2513c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   25140:	e0bffd17 	ldw	r2,-12(fp)
   25144:	10c00217 	ldw	r3,8(r2)
   25148:	e0bffe17 	ldw	r2,-8(fp)
   2514c:	10bfffc4 	addi	r2,r2,-1
   25150:	1885883a 	add	r2,r3,r2
   25154:	10800003 	ldbu	r2,0(r2)
   25158:	10803fcc 	andi	r2,r2,255
   2515c:	1080201c 	xori	r2,r2,128
   25160:	10bfe004 	addi	r2,r2,-128
   25164:	10800bd8 	cmpnei	r2,r2,47
   25168:	1000031e 	bne	r2,zero,25178 <alt_find_file+0x6c>
    {
      len -= 1;
   2516c:	e0bffe17 	ldw	r2,-8(fp)
   25170:	10bfffc4 	addi	r2,r2,-1
   25174:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25178:	e0bffe17 	ldw	r2,-8(fp)
   2517c:	e0ffff17 	ldw	r3,-4(fp)
   25180:	1885883a 	add	r2,r3,r2
   25184:	10800003 	ldbu	r2,0(r2)
   25188:	10803fcc 	andi	r2,r2,255
   2518c:	1080201c 	xori	r2,r2,128
   25190:	10bfe004 	addi	r2,r2,-128
   25194:	10800be0 	cmpeqi	r2,r2,47
   25198:	1000081e 	bne	r2,zero,251bc <alt_find_file+0xb0>
   2519c:	e0bffe17 	ldw	r2,-8(fp)
   251a0:	e0ffff17 	ldw	r3,-4(fp)
   251a4:	1885883a 	add	r2,r3,r2
   251a8:	10800003 	ldbu	r2,0(r2)
   251ac:	10803fcc 	andi	r2,r2,255
   251b0:	1080201c 	xori	r2,r2,128
   251b4:	10bfe004 	addi	r2,r2,-128
   251b8:	10000a1e 	bne	r2,zero,251e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   251bc:	e0bffd17 	ldw	r2,-12(fp)
   251c0:	10800217 	ldw	r2,8(r2)
   251c4:	e0fffe17 	ldw	r3,-8(fp)
   251c8:	180d883a 	mov	r6,r3
   251cc:	e17fff17 	ldw	r5,-4(fp)
   251d0:	1009883a 	mov	r4,r2
   251d4:	00254040 	call	25404 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   251d8:	1000021e 	bne	r2,zero,251e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   251dc:	e0bffd17 	ldw	r2,-12(fp)
   251e0:	00000706 	br	25200 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   251e4:	e0bffd17 	ldw	r2,-12(fp)
   251e8:	10800017 	ldw	r2,0(r2)
   251ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   251f0:	e0fffd17 	ldw	r3,-12(fp)
   251f4:	d0a00204 	addi	r2,gp,-32760
   251f8:	18bfcc1e 	bne	r3,r2,2512c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   251fc:	0005883a 	mov	r2,zero
}
   25200:	e037883a 	mov	sp,fp
   25204:	dfc00117 	ldw	ra,4(sp)
   25208:	df000017 	ldw	fp,0(sp)
   2520c:	dec00204 	addi	sp,sp,8
   25210:	f800283a 	ret

00025214 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25214:	defffc04 	addi	sp,sp,-16
   25218:	df000315 	stw	fp,12(sp)
   2521c:	df000304 	addi	fp,sp,12
   25220:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   25224:	00bffa04 	movi	r2,-24
   25228:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2522c:	e03ffd15 	stw	zero,-12(fp)
   25230:	00001906 	br	25298 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   25234:	008000b4 	movhi	r2,2
   25238:	10965404 	addi	r2,r2,22864
   2523c:	e0fffd17 	ldw	r3,-12(fp)
   25240:	18c00324 	muli	r3,r3,12
   25244:	10c5883a 	add	r2,r2,r3
   25248:	10800017 	ldw	r2,0(r2)
   2524c:	10000f1e 	bne	r2,zero,2528c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   25250:	008000b4 	movhi	r2,2
   25254:	10965404 	addi	r2,r2,22864
   25258:	e0fffd17 	ldw	r3,-12(fp)
   2525c:	18c00324 	muli	r3,r3,12
   25260:	10c5883a 	add	r2,r2,r3
   25264:	e0ffff17 	ldw	r3,-4(fp)
   25268:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2526c:	d0e00617 	ldw	r3,-32744(gp)
   25270:	e0bffd17 	ldw	r2,-12(fp)
   25274:	1880020e 	bge	r3,r2,25280 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   25278:	e0bffd17 	ldw	r2,-12(fp)
   2527c:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   25280:	e0bffd17 	ldw	r2,-12(fp)
   25284:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25288:	00000606 	br	252a4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2528c:	e0bffd17 	ldw	r2,-12(fp)
   25290:	10800044 	addi	r2,r2,1
   25294:	e0bffd15 	stw	r2,-12(fp)
   25298:	e0bffd17 	ldw	r2,-12(fp)
   2529c:	10800810 	cmplti	r2,r2,32
   252a0:	103fe41e 	bne	r2,zero,25234 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   252a4:	e0bffe17 	ldw	r2,-8(fp)
}
   252a8:	e037883a 	mov	sp,fp
   252ac:	df000017 	ldw	fp,0(sp)
   252b0:	dec00104 	addi	sp,sp,4
   252b4:	f800283a 	ret

000252b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   252b8:	defffb04 	addi	sp,sp,-20
   252bc:	df000415 	stw	fp,16(sp)
   252c0:	df000404 	addi	fp,sp,16
   252c4:	e13ffe15 	stw	r4,-8(fp)
   252c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   252cc:	e0bfff17 	ldw	r2,-4(fp)
   252d0:	10820070 	cmpltui	r2,r2,2049
   252d4:	1000021e 	bne	r2,zero,252e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   252d8:	00820004 	movi	r2,2048
   252dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   252e0:	e0fffe17 	ldw	r3,-8(fp)
   252e4:	e0bfff17 	ldw	r2,-4(fp)
   252e8:	1885883a 	add	r2,r3,r2
   252ec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   252f0:	e0bffe17 	ldw	r2,-8(fp)
   252f4:	e0bffc15 	stw	r2,-16(fp)
   252f8:	00000506 	br	25310 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   252fc:	e0bffc17 	ldw	r2,-16(fp)
   25300:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   25304:	e0bffc17 	ldw	r2,-16(fp)
   25308:	10800804 	addi	r2,r2,32
   2530c:	e0bffc15 	stw	r2,-16(fp)
   25310:	e0fffc17 	ldw	r3,-16(fp)
   25314:	e0bffd17 	ldw	r2,-12(fp)
   25318:	18bff836 	bltu	r3,r2,252fc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2531c:	e0bffe17 	ldw	r2,-8(fp)
   25320:	108007cc 	andi	r2,r2,31
   25324:	10000226 	beq	r2,zero,25330 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   25328:	e0bffc17 	ldw	r2,-16(fp)
   2532c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   25330:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   25334:	0001883a 	nop
   25338:	e037883a 	mov	sp,fp
   2533c:	df000017 	ldw	fp,0(sp)
   25340:	dec00104 	addi	sp,sp,4
   25344:	f800283a 	ret

00025348 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25348:	defffe04 	addi	sp,sp,-8
   2534c:	df000115 	stw	fp,4(sp)
   25350:	df000104 	addi	fp,sp,4
   25354:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25358:	e0bfff17 	ldw	r2,-4(fp)
   2535c:	10bffe84 	addi	r2,r2,-6
   25360:	10c00428 	cmpgeui	r3,r2,16
   25364:	18001a1e 	bne	r3,zero,253d0 <alt_exception_cause_generated_bad_addr+0x88>
   25368:	100690ba 	slli	r3,r2,2
   2536c:	008000b4 	movhi	r2,2
   25370:	1094e004 	addi	r2,r2,21376
   25374:	1885883a 	add	r2,r3,r2
   25378:	10800017 	ldw	r2,0(r2)
   2537c:	1000683a 	jmp	r2
   25380:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
   25384:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
   25388:	000253d0 	cmplti	zero,zero,2383
   2538c:	000253d0 	cmplti	zero,zero,2383
   25390:	000253d0 	cmplti	zero,zero,2383
   25394:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
   25398:	000253c8 	cmpgei	zero,zero,2383
   2539c:	000253d0 	cmplti	zero,zero,2383
   253a0:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
   253a4:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
   253a8:	000253d0 	cmplti	zero,zero,2383
   253ac:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
   253b0:	000253c8 	cmpgei	zero,zero,2383
   253b4:	000253d0 	cmplti	zero,zero,2383
   253b8:	000253d0 	cmplti	zero,zero,2383
   253bc:	000253c0 	call	253c <__alt_mem_MEMOIRE_ONCHIP-0x1dac4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   253c0:	00800044 	movi	r2,1
   253c4:	00000306 	br	253d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   253c8:	0005883a 	mov	r2,zero
   253cc:	00000106 	br	253d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   253d0:	0005883a 	mov	r2,zero
  }
}
   253d4:	e037883a 	mov	sp,fp
   253d8:	df000017 	ldw	fp,0(sp)
   253dc:	dec00104 	addi	sp,sp,4
   253e0:	f800283a 	ret

000253e4 <exit>:
   253e4:	defffe04 	addi	sp,sp,-8
   253e8:	000b883a 	mov	r5,zero
   253ec:	dc000015 	stw	r16,0(sp)
   253f0:	dfc00115 	stw	ra,4(sp)
   253f4:	2021883a 	mov	r16,r4
   253f8:	00254340 	call	25434 <__call_exitprocs>
   253fc:	8009883a 	mov	r4,r16
   25400:	00255c40 	call	255c4 <_exit>

00025404 <memcmp>:
   25404:	218d883a 	add	r6,r4,r6
   25408:	21800826 	beq	r4,r6,2542c <memcmp+0x28>
   2540c:	20800003 	ldbu	r2,0(r4)
   25410:	28c00003 	ldbu	r3,0(r5)
   25414:	10c00226 	beq	r2,r3,25420 <memcmp+0x1c>
   25418:	10c5c83a 	sub	r2,r2,r3
   2541c:	f800283a 	ret
   25420:	21000044 	addi	r4,r4,1
   25424:	29400044 	addi	r5,r5,1
   25428:	003ff706 	br	25408 <memcmp+0x4>
   2542c:	0005883a 	mov	r2,zero
   25430:	f800283a 	ret

00025434 <__call_exitprocs>:
   25434:	defff504 	addi	sp,sp,-44
   25438:	dd000515 	stw	r20,20(sp)
   2543c:	050000b4 	movhi	r20,2
   25440:	dc800315 	stw	r18,12(sp)
   25444:	dfc00a15 	stw	ra,40(sp)
   25448:	df000915 	stw	fp,36(sp)
   2544c:	ddc00815 	stw	r23,32(sp)
   25450:	dd800715 	stw	r22,28(sp)
   25454:	dd400615 	stw	r21,24(sp)
   25458:	dcc00415 	stw	r19,16(sp)
   2545c:	dc400215 	stw	r17,8(sp)
   25460:	dc000115 	stw	r16,4(sp)
   25464:	d9000015 	stw	r4,0(sp)
   25468:	2825883a 	mov	r18,r5
   2546c:	a516b404 	addi	r20,r20,23248
   25470:	a4400017 	ldw	r17,0(r20)
   25474:	8cc00c17 	ldw	r19,48(r17)
   25478:	8c400c04 	addi	r17,r17,48
   2547c:	98004526 	beq	r19,zero,25594 <__call_exitprocs+0x160>
   25480:	9c000117 	ldw	r16,4(r19)
   25484:	00900034 	movhi	r2,16384
   25488:	10bfffc4 	addi	r2,r2,-1
   2548c:	9d402217 	ldw	r21,136(r19)
   25490:	85bfffc4 	addi	r22,r16,-1
   25494:	80a1883a 	add	r16,r16,r2
   25498:	8421883a 	add	r16,r16,r16
   2549c:	8421883a 	add	r16,r16,r16
   254a0:	ac2f883a 	add	r23,r21,r16
   254a4:	84000204 	addi	r16,r16,8
   254a8:	9c21883a 	add	r16,r19,r16
   254ac:	b0002716 	blt	r22,zero,2554c <__call_exitprocs+0x118>
   254b0:	90000726 	beq	r18,zero,254d0 <__call_exitprocs+0x9c>
   254b4:	a800041e 	bne	r21,zero,254c8 <__call_exitprocs+0x94>
   254b8:	b5bfffc4 	addi	r22,r22,-1
   254bc:	bdffff04 	addi	r23,r23,-4
   254c0:	843fff04 	addi	r16,r16,-4
   254c4:	003ff906 	br	254ac <__call_exitprocs+0x78>
   254c8:	b9002017 	ldw	r4,128(r23)
   254cc:	913ffa1e 	bne	r18,r4,254b8 <__call_exitprocs+0x84>
   254d0:	99000117 	ldw	r4,4(r19)
   254d4:	82000017 	ldw	r8,0(r16)
   254d8:	213fffc4 	addi	r4,r4,-1
   254dc:	b100021e 	bne	r22,r4,254e8 <__call_exitprocs+0xb4>
   254e0:	9d800115 	stw	r22,4(r19)
   254e4:	00000106 	br	254ec <__call_exitprocs+0xb8>
   254e8:	80000015 	stw	zero,0(r16)
   254ec:	403ff226 	beq	r8,zero,254b8 <__call_exitprocs+0x84>
   254f0:	9f000117 	ldw	fp,4(r19)
   254f4:	a8000526 	beq	r21,zero,2550c <__call_exitprocs+0xd8>
   254f8:	00800044 	movi	r2,1
   254fc:	1592983a 	sll	r9,r2,r22
   25500:	a9404017 	ldw	r5,256(r21)
   25504:	494a703a 	and	r5,r9,r5
   25508:	2800021e 	bne	r5,zero,25514 <__call_exitprocs+0xe0>
   2550c:	403ee83a 	callr	r8
   25510:	00000906 	br	25538 <__call_exitprocs+0x104>
   25514:	a9004117 	ldw	r4,260(r21)
   25518:	4908703a 	and	r4,r9,r4
   2551c:	2000041e 	bne	r4,zero,25530 <__call_exitprocs+0xfc>
   25520:	b9400017 	ldw	r5,0(r23)
   25524:	d9000017 	ldw	r4,0(sp)
   25528:	403ee83a 	callr	r8
   2552c:	00000206 	br	25538 <__call_exitprocs+0x104>
   25530:	b9000017 	ldw	r4,0(r23)
   25534:	403ee83a 	callr	r8
   25538:	99000117 	ldw	r4,4(r19)
   2553c:	e13fcc1e 	bne	fp,r4,25470 <__call_exitprocs+0x3c>
   25540:	89000017 	ldw	r4,0(r17)
   25544:	993fdc26 	beq	r19,r4,254b8 <__call_exitprocs+0x84>
   25548:	003fc906 	br	25470 <__call_exitprocs+0x3c>
   2554c:	00800034 	movhi	r2,0
   25550:	10800004 	addi	r2,r2,0
   25554:	10000f26 	beq	r2,zero,25594 <__call_exitprocs+0x160>
   25558:	99400117 	ldw	r5,4(r19)
   2555c:	99000017 	ldw	r4,0(r19)
   25560:	2800091e 	bne	r5,zero,25588 <__call_exitprocs+0x154>
   25564:	20000826 	beq	r4,zero,25588 <__call_exitprocs+0x154>
   25568:	89000015 	stw	r4,0(r17)
   2556c:	a8000226 	beq	r21,zero,25578 <__call_exitprocs+0x144>
   25570:	a809883a 	mov	r4,r21
   25574:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>
   25578:	9809883a 	mov	r4,r19
   2557c:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>
   25580:	8cc00017 	ldw	r19,0(r17)
   25584:	003fbd06 	br	2547c <__call_exitprocs+0x48>
   25588:	9823883a 	mov	r17,r19
   2558c:	2027883a 	mov	r19,r4
   25590:	003fba06 	br	2547c <__call_exitprocs+0x48>
   25594:	dfc00a17 	ldw	ra,40(sp)
   25598:	df000917 	ldw	fp,36(sp)
   2559c:	ddc00817 	ldw	r23,32(sp)
   255a0:	dd800717 	ldw	r22,28(sp)
   255a4:	dd400617 	ldw	r21,24(sp)
   255a8:	dd000517 	ldw	r20,20(sp)
   255ac:	dcc00417 	ldw	r19,16(sp)
   255b0:	dc800317 	ldw	r18,12(sp)
   255b4:	dc400217 	ldw	r17,8(sp)
   255b8:	dc000117 	ldw	r16,4(sp)
   255bc:	dec00b04 	addi	sp,sp,44
   255c0:	f800283a 	ret

000255c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   255c4:	defffd04 	addi	sp,sp,-12
   255c8:	df000215 	stw	fp,8(sp)
   255cc:	df000204 	addi	fp,sp,8
   255d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   255d4:	0001883a 	nop
   255d8:	e0bfff17 	ldw	r2,-4(fp)
   255dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   255e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   255e4:	10000226 	beq	r2,zero,255f0 <_exit+0x2c>
    ALT_SIM_FAIL();
   255e8:	002af070 	cmpltui	zero,zero,43969
   255ec:	00000106 	br	255f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   255f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   255f4:	003fff06 	br	255f4 <_exit+0x30>
