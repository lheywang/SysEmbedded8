
project_soft.elf:     file format elf32-littlenios2
project_soft.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00003db4 memsz 0x00003db4 flags r-x
    LOAD off    0x00004dd4 vaddr 0x00023dd4 paddr 0x00024154 align 2**12
         filesz 0x00000380 memsz 0x00000380 flags rw-
    LOAD off    0x000054d4 vaddr 0x000244d4 paddr 0x000244d4 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000354c  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000644  00023790  00023790  00004790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000380  00023dd4  00024154  00004dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  000244d4  000244d4  000054d4  2**2
                  ALLOC, SMALL_DATA
  6 .MEMOIRE_ONCHIP 00000000  0002462c  0002462c  00005154  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005154  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000820  00000000  00000000  00005178  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000beae  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003de7  00000000  00000000  00011846  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000045a8  00000000  00000000  0001562d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f50  00000000  00000000  00019bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000234f  00000000  00000000  0001ab28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000028d7  00000000  00000000  0001ce77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0001f750  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003c0  00000000  00000000  0001f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021cb6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00021cb9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021cc3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021cc4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021cc5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00021cc9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00021ccd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00021cd1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00021cdc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00021ce7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00021cf2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  00021cf8  2**0
                  CONTENTS, READONLY
 29 .jdi          00005403  00000000  00000000  00021d17  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006f68c  00000000  00000000  0002711a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00023790 l    d  .rodata	00000000 .rodata
00023dd4 l    d  .rwdata	00000000 .rwdata
000244d4 l    d  .bss	00000000 .bss
0002462c l    d  .MEMOIRE_ONCHIP	00000000 .MEMOIRE_ONCHIP
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../project_soft_bsp//obj/HAL/src/crt0.o
0002027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 buzzer.c
000203bc l     F .text	000000b0 _SONG_ISR
000244d8 l     O .bss	00000004 actual
000244dc l     O .bss	00000004 len
000244d4 l     O .bss	00000004 pad_required
000244e0 l     O .bss	00000004 data
00000000 l    df *ABS*	00000000 anissa.c
00000000 l    df *ABS*	00000000 astronomia.c
00000000 l    df *ABS*	00000000 baby-shark.c
00000000 l    df *ABS*	00000000 crazy-frog.c
00000000 l    df *ABS*	00000000 elise.c
00000000 l    df *ABS*	00000000 happy-birthday.c
00000000 l    df *ABS*	00000000 hello_world.c
00020564 l     F .text	00000020 SW_ISR
00000000 l    df *ABS*	00000000 hex.c
00023d3c l     O .rodata	00000058 chars
00000000 l    df *ABS*	00000000 ptime.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020de4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00021390 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00023e74 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00021fa8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00022140 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022274 l     F .text	00000034 alt_dev_reg
00023f54 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022570 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000227bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000228e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022b84 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00022cc4 l     F .text	0000003c alt_get_errno
00022d00 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000244f8 g     O .bss	00000004 alt_instruction_exception_handler
00022094 g     F .text	0000007c alt_main
00020c58 g     F .text	00000080 _puts_r
0002452c g     O .bss	00000100 alt_irq
00024154 g       *ABS*	00000000 __flash_rwdata_start
00020c0c g     F .text	0000004c printf
00021a9c g     F .text	00000060 memmove
00023120 g     F .text	00000024 altera_nios2_gen2_irq_init
000219f4 g     F .text	000000a8 __sfvwrite_small_str
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000244e4 g     O .bss	00000004 errno
000244f0 g     O .bss	00000004 alt_argv
0002c128 g       *ABS*	00000000 _gp
00022110 g     F .text	00000030 usleep
00020368 g     F .text	00000054 buzzer_play
00023fa8 g     O .rwdata	00000180 alt_fd_list
00023144 g     F .text	00000090 alt_find_dev
000202e8 g     F .text	00000040 buzzer_set_volume
00022c48 g     F .text	0000007c alt_io_redirect
00023790 g       *ABS*	00000000 __DTOR_END__
00020cd8 g     F .text	00000014 puts
00022ae8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000223f0 g     F .text	000000ec altera_avalon_jtag_uart_read
00020bd0 g     F .text	0000003c _printf_r
00021c4c g     F .text	00000064 .hidden __udivsi3
000202c0 g     F .text	00000028 buzzer_set_note
00023a5c g     O .rodata	000000d4 crazy_frog_data
00023380 g     F .text	00000090 alt_icache_flush
00020b28 g     F .text	000000a8 time_print
00023a34 g     O .rodata	00000028 CrazyFrog
00024144 g     O .rwdata	00000004 alt_max_fd
00023b30 g     O .rodata	000000d4 elise_data
00024128 g     O .rwdata	00000004 _global_impure_ptr
0002462c g       *ABS*	00000000 __bss_end
00021eb8 g     F .text	000000f0 alt_iic_isr_register
00023018 g     F .text	00000108 alt_tick
00021e6c g     F .text	0000004c alt_ic_irq_enabled
00023dd4 g     O .rwdata	00000028 Astronomia
00022f7c g     F .text	0000009c alt_alarm_stop
000244e8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00023f80 g     O .rwdata	00000028 alt_dev_null
000228c8 g     F .text	00000020 alt_dcache_flush_all
00024154 g       *ABS*	00000000 __ram_rwdata_end
0002413c g     O .rwdata	00000008 alt_dev_list
0002217c g     F .text	000000f8 write
00023dd4 g       *ABS*	00000000 __ram_rodata_end
00021cb0 g     F .text	00000058 .hidden __umodsi3
0002462c g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00023790 g       *ABS*	00000000 __CTOR_LIST__
0003e000 g       *ABS*	00000000 __alt_stack_pointer
000225e8 g     F .text	0000007c alt_avalon_timer_sc_init
000224dc g     F .text	00000094 altera_avalon_jtag_uart_write
00023e4c g     O .rwdata	00000028 HappyBirthday
000213fc g     F .text	00000524 ___vfprintf_internal_r
00020cec g     F .text	00000064 _sprintf_r
000235cc g     F .text	00000190 __call_exitprocs
00020244 g     F .text	0000003c _start
000244fc g     O .bss	00000004 _alt_tick_rate
00023c04 g     O .rodata	000000d4 happy_birthday_data
00024500 g     O .bss	00000004 _alt_nticks
000222e0 g     F .text	00000050 alt_sys_init
00023474 g     F .text	00000158 __register_exitproc
00023dd4 g       *ABS*	00000000 __ram_rwdata_start
00023790 g       *ABS*	00000000 __ram_rodata_start
00022330 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000232dc g     F .text	000000a4 alt_get_fd
00020328 g     F .text	00000040 buzzer_set_duration
00022664 g     F .text	00000158 alt_busy_sleep
00023444 g     F .text	00000030 memcmp
0002462c g       *ABS*	00000000 __alt_stack_base
000206bc g     F .text	00000248 char27seg
000231d4 g     F .text	00000108 alt_find_file
00022950 g     F .text	000000a4 alt_dev_llist_insert
00020e50 g     F .text	00000524 ___svfprintf_internal_r
0002193c g     F .text	000000b8 __sfvwrite_small_dev
000244d4 g       *ABS*	00000000 __bss_start
0002388c g     O .rodata	000000d4 astronomia_data
00020584 g     F .text	00000138 main
000244f4 g     O .bss	00000004 alt_envp
00022390 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024148 g     O .rwdata	00000004 alt_errno
000202a4 g     F .text	0000001c buzzer_disable
00020904 g     F .text	000001b8 hex_display
000237b8 g     O .rodata	000000d4 anissa_data
00023790 g     O .rodata	00000028 Anissa
00021b54 g     F .text	00000084 .hidden __divsi3
00023790 g       *ABS*	00000000 __CTOR_END__
00023790 g       *ABS*	00000000 __flash_rodata_start
00023790 g       *ABS*	00000000 __DTOR_LIST__
000222a8 g     F .text	00000038 alt_irq_init
00022f18 g     F .text	00000064 alt_release_fd
00020d50 g     F .text	00000078 sprintf
00023410 g     F .text	00000014 atexit
00021afc g     F .text	00000058 _write_r
00020000 g       *ABS*	00000000 __alt_mem_MEMOIRE_ONCHIP
0002412c g     O .rwdata	00000004 _impure_ptr
0002046c g     F .text	000000d4 buzzer_play_song
000244ec g     O .bss	00000004 alt_argc
00022a54 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00023dfc g     O .rwdata	00000028 BabySHark
00024134 g     O .rwdata	00000008 alt_fs_list
00021374 g     F .text	0000001c __vfprintf_internal_unused
00023e24 g     O .rwdata	00000028 Elise
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020280 g     F .text	00000024 buzzer_enable
00021d08 g     F .text	00000050 alt_ic_isr_register
00024154 g       *ABS*	00000000 _edata
00020abc g     F .text	0000006c time_increment
0002462c g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
00021de0 g     F .text	0000008c alt_ic_irq_disable
00024504 g     O .bss	00000028 defsong
00023424 g     F .text	00000020 exit
00021bd8 g     F .text	00000074 .hidden __modsi3
0003e000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002375c g     F .text	00000034 _exit
00023960 g     O .rodata	000000d4 baby_shark_data
00020dc8 g     F .text	0000001c strlen
00022dc4 g     F .text	00000154 open
00022ab4 g     F .text	00000034 alt_icache_flush_all
00020540 g     F .text	00000024 buzzer_stop_song
00024130 g     O .rwdata	00000004 alt_priority_mask
00021d58 g     F .text	00000088 alt_ic_irq_enable
00021920 g     F .text	0000001c __vfprintf_internal
0002414c g     O .rwdata	00000008 alt_alarm_list
000229f4 g     F .text	00000060 _do_ctors
000227f8 g     F .text	000000d0 close
00022010 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	10914b04 	addi	r2,r2,17708
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	10914b04 	addi	r2,r2,17708
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a0f417 	ldw	r2,-31792(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a0f417 	ldw	r2,-31792(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20244:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20248:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
   2024c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20250:	d6b04a14 	ori	gp,gp,49448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20258:	10913514 	ori	r2,r2,17620

    movhi r3, %hi(__bss_end)
   2025c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20260:	18d18b14 	ori	r3,r3,17964

    beq r2, r3, 1f
   20264:	10c00326 	beq	r2,r3,20274 <_start+0x30>

0:
    stw zero, (r2)
   20268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20270:	10fffd36 	bltu	r2,r3,20268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20274:	00220100 	call	22010 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20278:	00220940 	call	22094 <alt_main>

0002027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2027c:	003fff06 	br	2027c <alt_after_alt_main>

00020280 <buzzer_enable>:
 * BUZZER MANAGEMENT
 */
int buzzer_enable()
{
	// Set the bit 31 to 0 to enable
	uint32_t tmp_reg = PWM_IORD_ODATA;
   20280:	00c00134 	movhi	r3,4
   20284:	18c42404 	addi	r3,r3,4240
   20288:	19000037 	ldwio	r4,0(r3)
	tmp_reg &= 0x7FFFFFFF;
	PWM_IOWR_DATA(tmp_reg);
   2028c:	00a00034 	movhi	r2,32768
   20290:	10bfffc4 	addi	r2,r2,-1
   20294:	2084703a 	and	r2,r4,r2
   20298:	18800035 	stwio	r2,0(r3)

	return 0;
}
   2029c:	0005883a 	mov	r2,zero
   202a0:	f800283a 	ret

000202a4 <buzzer_disable>:

int buzzer_disable()
{
	// Set the bit 31 to 1 to disable
	uint32_t tmp_reg = PWM_IORD_ODATA;
   202a4:	00c00134 	movhi	r3,4
   202a8:	18c42404 	addi	r3,r3,4240
   202ac:	18800037 	ldwio	r2,0(r3)
	tmp_reg |= 0x80000000;
	PWM_IOWR_DATA(tmp_reg);
   202b0:	10a00034 	orhi	r2,r2,32768
   202b4:	18800035 	stwio	r2,0(r3)

	return 0;
}
   202b8:	0005883a 	mov	r2,zero
   202bc:	f800283a 	ret

000202c0 <buzzer_set_note>:
 * NOTES MANAGEMENT
 */
int buzzer_set_note(enum note freq)
{
	// Set the 8 LSB
	uint32_t tmp_reg = PWM_IORD_ODATA;
   202c0:	00c00134 	movhi	r3,4
   202c4:	18c42404 	addi	r3,r3,4240
   202c8:	19400037 	ldwio	r5,0(r3)
	uint8_t tmp_val = freq & 0xFF;

	// Bit masking to configure the 8 LSBS.
	tmp_reg &= 0xFFFFFF00;
   202cc:	00bfc004 	movi	r2,-256
   202d0:	2884703a 	and	r2,r5,r2
	tmp_reg |= tmp_val;

	// Write
	PWM_IOWR_DATA(tmp_reg);
   202d4:	21003fcc 	andi	r4,r4,255
   202d8:	2088b03a 	or	r4,r4,r2
   202dc:	19000035 	stwio	r4,0(r3)

	return 0;
}
   202e0:	0005883a 	mov	r2,zero
   202e4:	f800283a 	ret

000202e8 <buzzer_set_volume>:

int buzzer_set_volume(int volume)
{
	// Inputs checks
	if ((volume > 255) | (volume < 0))
   202e8:	00803fc4 	movi	r2,255
   202ec:	11000c36 	bltu	r2,r4,20320 <buzzer_set_volume+0x38>
	{
		return -1;
	}

	// Set the 15-8 LSB
	uint32_t tmp_reg = PWM_IORD_ODATA;
   202f0:	00c00134 	movhi	r3,4
   202f4:	18c42404 	addi	r3,r3,4240
   202f8:	19400037 	ldwio	r5,0(r3)
	uint8_t tmp_val = volume & 0xFF;

	// Bit masking to configure the 15-8 LSBS.
	tmp_reg &= 0xFFFF00FF;
   202fc:	00bffff4 	movhi	r2,65535
   20300:	10803fc4 	addi	r2,r2,255
   20304:	2884703a 	and	r2,r5,r2
	tmp_reg |= (tmp_val << 8);

	// Write
	PWM_IOWR_DATA(tmp_reg);
   20308:	21003fcc 	andi	r4,r4,255
   2030c:	2008923a 	slli	r4,r4,8
   20310:	2088b03a 	or	r4,r4,r2
   20314:	19000035 	stwio	r4,0(r3)

	return 0;
   20318:	0005883a 	mov	r2,zero
   2031c:	f800283a 	ret
int buzzer_set_volume(int volume)
{
	// Inputs checks
	if ((volume > 255) | (volume < 0))
	{
		return -1;
   20320:	00bfffc4 	movi	r2,-1

	// Write
	PWM_IOWR_DATA(tmp_reg);

	return 0;
}
   20324:	f800283a 	ret

00020328 <buzzer_set_duration>:

int buzzer_set_duration(int ms)
{
	// Inputs checks
	if ((ms > 255) | (ms < 0))
   20328:	00803fc4 	movi	r2,255
   2032c:	11000c36 	bltu	r2,r4,20360 <buzzer_set_duration+0x38>
	{
		return -1;
	}

	// Set the 23-16 LSB
	uint32_t tmp_reg = PWM_IORD_ODATA;
   20330:	00c00134 	movhi	r3,4
   20334:	18c42404 	addi	r3,r3,4240
   20338:	19400037 	ldwio	r5,0(r3)
	uint8_t tmp_val = ms & 0xFF;

	// Bit masking to configure the 23-16 LSBS.
	tmp_reg &= 0xFF00FFFF;
   2033c:	00bfc074 	movhi	r2,65281
   20340:	10bfffc4 	addi	r2,r2,-1
   20344:	2884703a 	and	r2,r5,r2
	tmp_reg |= (tmp_val << 16);

	// Write
	PWM_IOWR_DATA(tmp_reg);
   20348:	21003fcc 	andi	r4,r4,255
   2034c:	2008943a 	slli	r4,r4,16
   20350:	2088b03a 	or	r4,r4,r2
   20354:	19000035 	stwio	r4,0(r3)

	return 0;
   20358:	0005883a 	mov	r2,zero
   2035c:	f800283a 	ret
int buzzer_set_duration(int ms)
{
	// Inputs checks
	if ((ms > 255) | (ms < 0))
	{
		return -1;
   20360:	00bfffc4 	movi	r2,-1

	// Write
	PWM_IOWR_DATA(tmp_reg);

	return 0;
}
   20364:	f800283a 	ret

00020368 <buzzer_play>:

/*
 * BUZZER TRIGGERS EVENTS
 */
int buzzer_play()
{
   20368:	defffd04 	addi	sp,sp,-12
   2036c:	dfc00215 	stw	ra,8(sp)
   20370:	dc400115 	stw	r17,4(sp)
   20374:	dc000015 	stw	r16,0(sp)
	// Set the bit 30 to 1 to trigger start.
	uint32_t tmp_reg = PWM_IORD_ODATA;
   20378:	04000134 	movhi	r16,4
   2037c:	84042404 	addi	r16,r16,4240
   20380:	84400037 	ldwio	r17,0(r16)
	tmp_reg |= 0x40000000;
	PWM_IOWR_DATA(tmp_reg);
   20384:	88900034 	orhi	r2,r17,16384
   20388:	80800035 	stwio	r2,0(r16)

	usleep(1); // 1 microsecond to let the hardware register the event.
   2038c:	01000044 	movi	r4,1
   20390:	00221100 	call	22110 <usleep>

	// Set back the bit 30 to 0 to re-arm the device
	tmp_reg &= 0xBFFFFFFF;
	PWM_IOWR_DATA(tmp_reg);
   20394:	00b00034 	movhi	r2,49152
   20398:	10bfffc4 	addi	r2,r2,-1
   2039c:	8884703a 	and	r2,r17,r2
   203a0:	80800035 	stwio	r2,0(r16)

	return 0;
}
   203a4:	0005883a 	mov	r2,zero
   203a8:	dfc00217 	ldw	ra,8(sp)
   203ac:	dc400117 	ldw	r17,4(sp)
   203b0:	dc000017 	ldw	r16,0(sp)
   203b4:	dec00304 	addi	sp,sp,12
   203b8:	f800283a 	ret

000203bc <_SONG_ISR>:
 * ISR
 */
static void _SONG_ISR(void *context)
{
	// Handle the interrupt source
    PWM_IOWR_SDATA(PWM_IORD_EDGE);
   203bc:	00800134 	movhi	r2,4
   203c0:	10841f04 	addi	r2,r2,4220
   203c4:	11000037 	ldwio	r4,0(r2)
   203c8:	00c00134 	movhi	r3,4
   203cc:	18c41c04 	addi	r3,r3,4208
   203d0:	19000035 	stwio	r4,0(r3)
    PWM_IOWR_EDGE(0x00);
   203d4:	10000035 	stwio	zero,0(r2)

    // Check if we're at the end
    if (actual == len)
   203d8:	d0a0ec17 	ldw	r2,-31824(gp)
   203dc:	d0e0ed17 	ldw	r3,-31820(gp)
   203e0:	10c02126 	beq	r2,r3,20468 <_SONG_ISR+0xac>

/*
 * ISR
 */
static void _SONG_ISR(void *context)
{
   203e4:	defffe04 	addi	sp,sp,-8
   203e8:	dfc00115 	stw	ra,4(sp)
   203ec:	dc000015 	stw	r16,0(sp)

    // One note over two, we insert a small delay between them.
    // This make the listening for fluent.
    // This is done by requesting a note for a duration INTERVAL
    // at volume 0;
    if (pad_required == 1)
   203f0:	d120eb17 	ldw	r4,-31828(gp)
   203f4:	00c00044 	movi	r3,1
   203f8:	20c0061e 	bne	r4,r3,20414 <_SONG_ISR+0x58>
    {
    	buzzer_set_duration(INTERVAL);
   203fc:	01000084 	movi	r4,2
   20400:	00203280 	call	20328 <buzzer_set_duration>
    	buzzer_set_volume(0);
   20404:	0009883a 	mov	r4,zero
   20408:	00202e80 	call	202e8 <buzzer_set_volume>
    	pad_required = 0;
   2040c:	d020eb15 	stw	zero,-31828(gp)
   20410:	00001106 	br	20458 <_SONG_ISR+0x9c>
    }
    else
    {
		int reg = data[actual];
   20414:	1085883a 	add	r2,r2,r2
   20418:	1085883a 	add	r2,r2,r2
   2041c:	d0e0ee17 	ldw	r3,-31816(gp)
   20420:	1885883a 	add	r2,r3,r2
		buzzer_set_duration((reg & 0x00FF0000) >> 16);
   20424:	14000017 	ldw	r16,0(r2)
   20428:	11000083 	ldbu	r4,2(r2)
   2042c:	00203280 	call	20328 <buzzer_set_duration>
		buzzer_set_volume((reg & 0x0000FF00) >> 8);
   20430:	813fc00c 	andi	r4,r16,65280
   20434:	2009d23a 	srai	r4,r4,8
   20438:	00202e80 	call	202e8 <buzzer_set_volume>
		buzzer_set_note((reg & 0x000000FF));
   2043c:	81003fcc 	andi	r4,r16,255
   20440:	00202c00 	call	202c0 <buzzer_set_note>
		actual += 1;
   20444:	d0a0ec17 	ldw	r2,-31824(gp)
   20448:	10800044 	addi	r2,r2,1
   2044c:	d0a0ec15 	stw	r2,-31824(gp)
		pad_required = 1;
   20450:	00800044 	movi	r2,1
   20454:	d0a0eb15 	stw	r2,-31828(gp)
    }

    // Play
    buzzer_play();
   20458:	00203680 	call	20368 <buzzer_play>

	return;
}
   2045c:	dfc00117 	ldw	ra,4(sp)
   20460:	dc000017 	ldw	r16,0(sp)
   20464:	dec00204 	addi	sp,sp,8
   20468:	f800283a 	ret

0002046c <buzzer_play_song>:
/*
 * BUZZER SONG INTERFACE
 */
int buzzer_play_song(const struct song *Song)
{
	if (Song == NULL)
   2046c:	20002e26 	beq	r4,zero,20528 <buzzer_play_song+0xbc>

/*
 * BUZZER SONG INTERFACE
 */
int buzzer_play_song(const struct song *Song)
{
   20470:	defffd04 	addi	sp,sp,-12
   20474:	dfc00215 	stw	ra,8(sp)
   20478:	dc000115 	stw	r16,4(sp)
	{
		return -1;
	}

	// Copy the data to our local expression.
	data = (int *)Song->notes;
   2047c:	20800917 	ldw	r2,36(r4)
   20480:	d0a0ee15 	stw	r2,-31816(gp)
	len = (int)Song->len;
   20484:	20800817 	ldw	r2,32(r4)
   20488:	d0a0ed15 	stw	r2,-31820(gp)
	actual = 0;
   2048c:	d020ec15 	stw	zero,-31824(gp)

	// Initialize the buzzer
	buzzer_enable();
   20490:	00202800 	call	20280 <buzzer_enable>

	// Initialize the interrupts for the PWM to see
	PWM_IOWR_MASK(0x40); // --> Only the END NOTE FLAG
   20494:	00800134 	movhi	r2,4
   20498:	10841e04 	addi	r2,r2,4216
   2049c:	00c01004 	movi	r3,64
   204a0:	10c00035 	stwio	r3,0(r2)
	PWM_IOWR_EDGE(0x00);
   204a4:	0005883a 	mov	r2,zero
   204a8:	00c00134 	movhi	r3,4
   204ac:	18c41f04 	addi	r3,r3,4220
   204b0:	18800035 	stwio	r2,0(r3)
	PWM_IOWR_SDATA(0x00);
   204b4:	00c00134 	movhi	r3,4
   204b8:	18c41c04 	addi	r3,r3,4208
   204bc:	18800035 	stwio	r2,0(r3)
  	alt_ic_isr_register(PWM_STATUS_IRQ_INTERRUPT_CONTROLLER_ID,
   204c0:	d8000015 	stw	zero,0(sp)
   204c4:	000f883a 	mov	r7,zero
   204c8:	018000b4 	movhi	r6,2
   204cc:	3180ef04 	addi	r6,r6,956
   204d0:	01400144 	movi	r5,5
   204d4:	0009883a 	mov	r4,zero
   204d8:	0021d080 	call	21d08 <alt_ic_isr_register>
						(void *)_SONG_ISR,
						NULL,
						0x00);

  	// Start the play of the first note
  	int reg = data[actual];
   204dc:	d0a0ec17 	ldw	r2,-31824(gp)
   204e0:	1085883a 	add	r2,r2,r2
   204e4:	1085883a 	add	r2,r2,r2
   204e8:	d0e0ee17 	ldw	r3,-31816(gp)
   204ec:	1885883a 	add	r2,r3,r2
	buzzer_set_duration((reg & 0x00FF0000) >> 16);
   204f0:	14000017 	ldw	r16,0(r2)
   204f4:	11000083 	ldbu	r4,2(r2)
   204f8:	00203280 	call	20328 <buzzer_set_duration>
	buzzer_set_volume((reg & 0x0000FF00) >> 8);
   204fc:	813fc00c 	andi	r4,r16,65280
   20500:	2009d23a 	srai	r4,r4,8
   20504:	00202e80 	call	202e8 <buzzer_set_volume>
	buzzer_set_note((reg & 0x000000FF));
   20508:	81003fcc 	andi	r4,r16,255
   2050c:	00202c00 	call	202c0 <buzzer_set_note>
	actual += 1;
   20510:	d0a0ec17 	ldw	r2,-31824(gp)
   20514:	10800044 	addi	r2,r2,1
   20518:	d0a0ec15 	stw	r2,-31824(gp)
	buzzer_play();
   2051c:	00203680 	call	20368 <buzzer_play>

	// Exit.
	return 0;
   20520:	0005883a 	mov	r2,zero
   20524:	00000206 	br	20530 <buzzer_play_song+0xc4>
 */
int buzzer_play_song(const struct song *Song)
{
	if (Song == NULL)
	{
		return -1;
   20528:	00bfffc4 	movi	r2,-1
   2052c:	f800283a 	ret
	actual += 1;
	buzzer_play();

	// Exit.
	return 0;
}
   20530:	dfc00217 	ldw	ra,8(sp)
   20534:	dc000117 	ldw	r16,4(sp)
   20538:	dec00304 	addi	sp,sp,12
   2053c:	f800283a 	ret

00020540 <buzzer_stop_song>:

int buzzer_stop_song()
{
   20540:	deffff04 	addi	sp,sp,-4
   20544:	dfc00015 	stw	ra,0(sp)
	// We wont serve anymore interrupts. So, the song will stop at the end of the actual note.
	alt_ic_irq_disable(	PWM_STATUS_IRQ_INTERRUPT_CONTROLLER_ID,
   20548:	01400144 	movi	r5,5
   2054c:	0009883a 	mov	r4,zero
   20550:	0021de00 	call	21de0 <alt_ic_irq_disable>
						PWM_STATUS_IRQ);
	return 0;
}
   20554:	0005883a 	mov	r2,zero
   20558:	dfc00017 	ldw	ra,0(sp)
   2055c:	dec00104 	addi	sp,sp,4
   20560:	f800283a 	ret

00020564 <SW_ISR>:
#include <unistd.h>

static void SW_ISR(void *context)
{
	int button_position;
	button_position = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BOUTONS_POUSSOIRS_BASE);
   20564:	00800134 	movhi	r2,4
   20568:	10842304 	addi	r2,r2,4236
   2056c:	10c00037 	ldwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(BOUTONS_POUSSOIRS_BASE, button_position);
   20570:	01000134 	movhi	r4,4
   20574:	21042004 	addi	r4,r4,4224
   20578:	20c00035 	stwio	r3,0(r4)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BOUTONS_POUSSOIRS_BASE, button_position);
   2057c:	10c00035 	stwio	r3,0(r2)
   20580:	f800283a 	ret

00020584 <main>:
	return;
}

int main()
{
   20584:	defff704 	addi	sp,sp,-36
   20588:	dfc00815 	stw	ra,32(sp)
   2058c:	dd800715 	stw	r22,28(sp)
   20590:	dd400615 	stw	r21,24(sp)
   20594:	dd000515 	stw	r20,20(sp)
   20598:	dcc00415 	stw	r19,16(sp)
   2059c:	dc800315 	stw	r18,12(sp)
   205a0:	dc400215 	stw	r17,8(sp)
   205a4:	dc000115 	stw	r16,4(sp)
  printf("Hello from Nios II!\n\n\r");
   205a8:	010000b4 	movhi	r4,2
   205ac:	210f3604 	addi	r4,r4,15576
   205b0:	0020c0c0 	call	20c0c <printf>

  BP_IOWR_MASK(0x3);
   205b4:	00800134 	movhi	r2,4
   205b8:	10842204 	addi	r2,r2,4232
   205bc:	00c000c4 	movi	r3,3
   205c0:	10c00035 	stwio	r3,0(r2)
  BP_IOWR_DATA(0x00);
   205c4:	0005883a 	mov	r2,zero
   205c8:	00c00134 	movhi	r3,4
   205cc:	18c42004 	addi	r3,r3,4224
   205d0:	18800035 	stwio	r2,0(r3)
  BP_IOWR_EDGE(0x00);
   205d4:	00c00134 	movhi	r3,4
   205d8:	18c42304 	addi	r3,r3,4236
   205dc:	18800035 	stwio	r2,0(r3)
  alt_ic_isr_register(BOUTONS_POUSSOIRS_IRQ_INTERRUPT_CONTROLLER_ID, BOUTONS_POUSSOIRS_IRQ, (void *)SW_ISR, NULL, 0x00);
   205e0:	d8000015 	stw	zero,0(sp)
   205e4:	000f883a 	mov	r7,zero
   205e8:	018000b4 	movhi	r6,2
   205ec:	31815904 	addi	r6,r6,1380
   205f0:	01400104 	movi	r5,4
   205f4:	0009883a 	mov	r4,zero
   205f8:	0021d080 	call	21d08 <alt_ic_isr_register>


  // Launch a music
  buzzer_play_song(&CrazyFrog);
   205fc:	010000b4 	movhi	r4,2
   20600:	210e8d04 	addi	r4,r4,14900
   20604:	002046c0 	call	2046c <buzzer_play_song>

  // Hex displaying
  hex_display("cccccc", 6, 0);
   20608:	000d883a 	mov	r6,zero
   2060c:	01400184 	movi	r5,6
   20610:	010000b4 	movhi	r4,2
   20614:	210f3c04 	addi	r4,r4,15600
   20618:	00209040 	call	20904 <hex_display>

  int cnt = 0;
   2061c:	0021883a 	mov	r16,zero
  while(1)
  {
	  usleep(1000 * 1000);
	  printf("Looping... %d\n\r", cnt++);
   20620:	058000b4 	movhi	r22,2
   20624:	b58f3e04 	addi	r22,r22,15608

	  printf("Buttons : %d; Edge %d\n\r", BP_IORD_DATA, BP_IORD_EDGE);
   20628:	054000b4 	movhi	r21,2
   2062c:	ad4f4204 	addi	r21,r21,15624
	  BP_IOWR_EDGE(BP_IORD_DATA);
	  printf("Status : %d; Edge %d\n\r", IORD_ALTERA_AVALON_PIO_DATA(PWM_STATUS_BASE), IORD_ALTERA_AVALON_PIO_EDGE_CAP(PWM_STATUS_BASE));
   20630:	050000b4 	movhi	r20,2
   20634:	a50f4804 	addi	r20,r20,15648
	  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PWM_STATUS_BASE,IORD_ALTERA_AVALON_PIO_DATA(PWM_STATUS_BASE));
	  printf("\n\n");
   20638:	04c000b4 	movhi	r19,2
   2063c:	9ccf4e04 	addi	r19,r19,15672
  hex_display("cccccc", 6, 0);

  int cnt = 0;
  while(1)
  {
	  usleep(1000 * 1000);
   20640:	010003f4 	movhi	r4,15
   20644:	21109004 	addi	r4,r4,16960
   20648:	00221100 	call	22110 <usleep>
	  printf("Looping... %d\n\r", cnt++);
   2064c:	84800044 	addi	r18,r16,1
   20650:	800b883a 	mov	r5,r16
   20654:	b009883a 	mov	r4,r22
   20658:	0020c0c0 	call	20c0c <printf>

	  printf("Buttons : %d; Edge %d\n\r", BP_IORD_DATA, BP_IORD_EDGE);
   2065c:	04400134 	movhi	r17,4
   20660:	8c442004 	addi	r17,r17,4224
   20664:	89400037 	ldwio	r5,0(r17)
   20668:	04000134 	movhi	r16,4
   2066c:	84042304 	addi	r16,r16,4236
   20670:	81800037 	ldwio	r6,0(r16)
   20674:	a809883a 	mov	r4,r21
   20678:	0020c0c0 	call	20c0c <printf>
	  BP_IOWR_EDGE(BP_IORD_DATA);
   2067c:	88800037 	ldwio	r2,0(r17)
   20680:	80800035 	stwio	r2,0(r16)
	  printf("Status : %d; Edge %d\n\r", IORD_ALTERA_AVALON_PIO_DATA(PWM_STATUS_BASE), IORD_ALTERA_AVALON_PIO_EDGE_CAP(PWM_STATUS_BASE));
   20684:	04400134 	movhi	r17,4
   20688:	8c441c04 	addi	r17,r17,4208
   2068c:	89400037 	ldwio	r5,0(r17)
   20690:	04000134 	movhi	r16,4
   20694:	84041f04 	addi	r16,r16,4220
   20698:	81800037 	ldwio	r6,0(r16)
   2069c:	a009883a 	mov	r4,r20
   206a0:	0020c0c0 	call	20c0c <printf>
	  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PWM_STATUS_BASE,IORD_ALTERA_AVALON_PIO_DATA(PWM_STATUS_BASE));
   206a4:	88800037 	ldwio	r2,0(r17)
   206a8:	80800035 	stwio	r2,0(r16)
	  printf("\n\n");
   206ac:	9809883a 	mov	r4,r19
   206b0:	0020cd80 	call	20cd8 <puts>

  int cnt = 0;
  while(1)
  {
	  usleep(1000 * 1000);
	  printf("Looping... %d\n\r", cnt++);
   206b4:	9021883a 	mov	r16,r18
   206b8:	003fe106 	br	20640 <main+0xbc>

000206bc <char27seg>:
 */

// Local function to convert from one base to the other !
int char27seg(char in, int * val)
{
	*val = 0; // Clear the value
   206bc:	28000015 	stw	zero,0(r5)

	switch (in)
   206c0:	20bff4c4 	addi	r2,r4,-45
   206c4:	10c03fcc 	andi	r3,r2,255
   206c8:	01801204 	movi	r6,72
   206cc:	30c08b36 	bltu	r6,r3,208fc <char27seg+0x240>
   206d0:	180490ba 	slli	r2,r3,2
   206d4:	00c000b4 	movhi	r3,2
   206d8:	18c1ba04 	addi	r3,r3,1768
   206dc:	10c5883a 	add	r2,r2,r3
   206e0:	10800017 	ldw	r2,0(r2)
   206e4:	1000683a 	jmp	r2
   206e8:	000208c8 	cmpgei	zero,zero,2083
   206ec:	000208c8 	cmpgei	zero,zero,2083
   206f0:	000208fc 	xorhi	zero,zero,2083
   206f4:	0002080c 	andi	zero,zero,2080
   206f8:	0002080c 	andi	zero,zero,2080
   206fc:	0002080c 	andi	zero,zero,2080
   20700:	0002080c 	andi	zero,zero,2080
   20704:	0002080c 	andi	zero,zero,2080
   20708:	0002080c 	andi	zero,zero,2080
   2070c:	0002080c 	andi	zero,zero,2080
   20710:	0002080c 	andi	zero,zero,2080
   20714:	0002080c 	andi	zero,zero,2080
   20718:	0002080c 	andi	zero,zero,2080
   2071c:	000208fc 	xorhi	zero,zero,2083
   20720:	000208fc 	xorhi	zero,zero,2083
   20724:	000208fc 	xorhi	zero,zero,2083
   20728:	000208fc 	xorhi	zero,zero,2083
   2072c:	000208fc 	xorhi	zero,zero,2083
   20730:	000208fc 	xorhi	zero,zero,2083
   20734:	000208fc 	xorhi	zero,zero,2083
   20738:	000208fc 	xorhi	zero,zero,2083
   2073c:	000208fc 	xorhi	zero,zero,2083
   20740:	000208fc 	xorhi	zero,zero,2083
   20744:	000208fc 	xorhi	zero,zero,2083
   20748:	000208fc 	xorhi	zero,zero,2083
   2074c:	000208fc 	xorhi	zero,zero,2083
   20750:	000208fc 	xorhi	zero,zero,2083
   20754:	000208fc 	xorhi	zero,zero,2083
   20758:	000208fc 	xorhi	zero,zero,2083
   2075c:	000208fc 	xorhi	zero,zero,2083
   20760:	000208fc 	xorhi	zero,zero,2083
   20764:	000208fc 	xorhi	zero,zero,2083
   20768:	000208fc 	xorhi	zero,zero,2083
   2076c:	000208fc 	xorhi	zero,zero,2083
   20770:	000208fc 	xorhi	zero,zero,2083
   20774:	000208fc 	xorhi	zero,zero,2083
   20778:	000208fc 	xorhi	zero,zero,2083
   2077c:	000208fc 	xorhi	zero,zero,2083
   20780:	000208fc 	xorhi	zero,zero,2083
   20784:	000208fc 	xorhi	zero,zero,2083
   20788:	000208fc 	xorhi	zero,zero,2083
   2078c:	000208fc 	xorhi	zero,zero,2083
   20790:	000208fc 	xorhi	zero,zero,2083
   20794:	000208fc 	xorhi	zero,zero,2083
   20798:	000208fc 	xorhi	zero,zero,2083
   2079c:	000208fc 	xorhi	zero,zero,2083
   207a0:	000208fc 	xorhi	zero,zero,2083
   207a4:	000208fc 	xorhi	zero,zero,2083
   207a8:	000208fc 	xorhi	zero,zero,2083
   207ac:	000208fc 	xorhi	zero,zero,2083
   207b0:	000208fc 	xorhi	zero,zero,2083
   207b4:	000208fc 	xorhi	zero,zero,2083
   207b8:	00020840 	call	2084 <__alt_mem_MEMOIRE_ONCHIP-0x1df7c>
   207bc:	00020840 	call	2084 <__alt_mem_MEMOIRE_ONCHIP-0x1df7c>
   207c0:	00020840 	call	2084 <__alt_mem_MEMOIRE_ONCHIP-0x1df7c>
   207c4:	00020840 	call	2084 <__alt_mem_MEMOIRE_ONCHIP-0x1df7c>
   207c8:	00020840 	call	2084 <__alt_mem_MEMOIRE_ONCHIP-0x1df7c>
   207cc:	00020840 	call	2084 <__alt_mem_MEMOIRE_ONCHIP-0x1df7c>
   207d0:	000208fc 	xorhi	zero,zero,2083
   207d4:	00020874 	movhi	zero,2081
   207d8:	00020874 	movhi	zero,2081
   207dc:	000208fc 	xorhi	zero,zero,2083
   207e0:	000208fc 	xorhi	zero,zero,2083
   207e4:	000208fc 	xorhi	zero,zero,2083
   207e8:	000208fc 	xorhi	zero,zero,2083
   207ec:	000208fc 	xorhi	zero,zero,2083
   207f0:	000208a8 	cmpgeui	zero,zero,2082
   207f4:	000208fc 	xorhi	zero,zero,2083
   207f8:	000208fc 	xorhi	zero,zero,2083
   207fc:	000208fc 	xorhi	zero,zero,2083
   20800:	000208fc 	xorhi	zero,zero,2083
   20804:	000208fc 	xorhi	zero,zero,2083
   20808:	000208b8 	rdprs	zero,zero,2082
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		*val = chars[(in - 0x30) + 0];
   2080c:	21003fcc 	andi	r4,r4,255
   20810:	2100201c 	xori	r4,r4,128
   20814:	213fe004 	addi	r4,r4,-128
   20818:	213ff404 	addi	r4,r4,-48
   2081c:	2109883a 	add	r4,r4,r4
   20820:	2109883a 	add	r4,r4,r4
   20824:	008000b4 	movhi	r2,2
   20828:	108f4f04 	addi	r2,r2,15676
   2082c:	1109883a 	add	r4,r2,r4
   20830:	20800017 	ldw	r2,0(r4)
   20834:	28800015 	stw	r2,0(r5)
		return 0;
   20838:	0005883a 	mov	r2,zero
   2083c:	f800283a 	ret
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
		*val = chars[(in - 0x61) + 10];
   20840:	21003fcc 	andi	r4,r4,255
   20844:	2100201c 	xori	r4,r4,128
   20848:	213fe004 	addi	r4,r4,-128
   2084c:	213fea44 	addi	r4,r4,-87
   20850:	2109883a 	add	r4,r4,r4
   20854:	2109883a 	add	r4,r4,r4
   20858:	008000b4 	movhi	r2,2
   2085c:	108f4f04 	addi	r2,r2,15676
   20860:	1109883a 	add	r4,r2,r4
   20864:	20800017 	ldw	r2,0(r4)
   20868:	28800015 	stw	r2,0(r5)
		return 0;
   2086c:	0005883a 	mov	r2,zero
   20870:	f800283a 	ret
		break;

	// Handling another group of letters
	case 'h':
	case 'i':
		*val = chars[(in - 0x68) + 16];
   20874:	21003fcc 	andi	r4,r4,255
   20878:	2100201c 	xori	r4,r4,128
   2087c:	213fe004 	addi	r4,r4,-128
   20880:	213fea04 	addi	r4,r4,-88
   20884:	2109883a 	add	r4,r4,r4
   20888:	2109883a 	add	r4,r4,r4
   2088c:	008000b4 	movhi	r2,2
   20890:	108f4f04 	addi	r2,r2,15676
   20894:	1109883a 	add	r4,r2,r4
   20898:	20800017 	ldw	r2,0(r4)
   2089c:	28800015 	stw	r2,0(r5)
		return 0;
   208a0:	0005883a 	mov	r2,zero
   208a4:	f800283a 	ret
		break;

	// Last chars...
	case 'o':
		*val = chars[18];
   208a8:	008028c4 	movi	r2,163
   208ac:	28800015 	stw	r2,0(r5)
		return 0;
   208b0:	0005883a 	mov	r2,zero
   208b4:	f800283a 	ret
		break;

	case 'u':
		*val = chars[19];
   208b8:	008038c4 	movi	r2,227
   208bc:	28800015 	stw	r2,0(r5)
		return 0;
   208c0:	0005883a 	mov	r2,zero
   208c4:	f800283a 	ret
		break;

	// Handling two special chars
	case '-':
	case '.':
		*val = chars[(in - 0x2D) + 20];
   208c8:	21003fcc 	andi	r4,r4,255
   208cc:	2100201c 	xori	r4,r4,128
   208d0:	213fe004 	addi	r4,r4,-128
   208d4:	213ff9c4 	addi	r4,r4,-25
   208d8:	2109883a 	add	r4,r4,r4
   208dc:	2109883a 	add	r4,r4,r4
   208e0:	008000b4 	movhi	r2,2
   208e4:	108f4f04 	addi	r2,r2,15676
   208e8:	1109883a 	add	r4,r2,r4
   208ec:	20800017 	ldw	r2,0(r4)
   208f0:	28800015 	stw	r2,0(r5)
		return 0;
   208f4:	0005883a 	mov	r2,zero
   208f8:	f800283a 	ret
		break;

	default:
		*val = 0b00000000; // ALL
		return -1;
   208fc:	00bfffc4 	movi	r2,-1
	}

	return -1;
}
   20900:	f800283a 	ret

00020904 <hex_display>:

int hex_display(char* values, int len, int first)
{
	// First, ensure the operation is possible
	if ((first + len) > HEX_NB)
   20904:	3145883a 	add	r2,r6,r5
   20908:	00c00184 	movi	r3,6
   2090c:	18805916 	blt	r3,r2,20a74 <hex_display+0x170>
	{
		return -1;
	}
	if (len > HEX_NB)
   20910:	19405a16 	blt	r3,r5,20a7c <hex_display+0x178>
	{
		return -1;
	}
	if ((first > HEX_NB - 1) | (first < 0))
   20914:	00c00144 	movi	r3,5
   20918:	19805a36 	bltu	r3,r6,20a84 <hex_display+0x180>

	return -1;
}

int hex_display(char* values, int len, int first)
{
   2091c:	defff204 	addi	sp,sp,-56
   20920:	dfc00d15 	stw	ra,52(sp)
   20924:	df000c15 	stw	fp,48(sp)
   20928:	ddc00b15 	stw	r23,44(sp)
   2092c:	dd800a15 	stw	r22,40(sp)
   20930:	dd400915 	stw	r21,36(sp)
   20934:	dd000815 	stw	r20,32(sp)
   20938:	dcc00715 	stw	r19,28(sp)
   2093c:	dc800615 	stw	r18,24(sp)
   20940:	dc400515 	stw	r17,20(sp)
   20944:	dc000415 	stw	r16,16(sp)
	{
		return -1;
	}

	// Copy the data
	char buf[] = {'\0', '\0', '\0', '\0', '\0', '\0'};
   20948:	d8000005 	stb	zero,0(sp)
   2094c:	d8000045 	stb	zero,1(sp)
   20950:	d8000085 	stb	zero,2(sp)
   20954:	d80000c5 	stb	zero,3(sp)
   20958:	d8000105 	stb	zero,4(sp)
   2095c:	d8000145 	stb	zero,5(sp)
	for (int k = first; k < first + len; k++)
   20960:	3080080e 	bge	r6,r2,20984 <hex_display+0x80>
   20964:	2005883a 	mov	r2,r4
   20968:	d98d883a 	add	r6,sp,r6
   2096c:	2149883a 	add	r4,r4,r5
	{
		buf[k] = values[k - first];
   20970:	10c00003 	ldbu	r3,0(r2)
   20974:	30c00005 	stb	r3,0(r6)
   20978:	10800044 	addi	r2,r2,1
   2097c:	31800044 	addi	r6,r6,1
		return -1;
	}

	// Copy the data
	char buf[] = {'\0', '\0', '\0', '\0', '\0', '\0'};
	for (int k = first; k < first + len; k++)
   20980:	113ffb1e 	bne	r2,r4,20970 <hex_display+0x6c>
	{
		buf[k] = values[k - first];
	}

	// Temp variables
	int tmp = 0;
   20984:	d8000215 	stw	zero,8(sp)
	int err = 0;

	// 64 bits variable that represent the whole port
	uint64_t bits = 0;
	uint64_t mask = 0;
	uint64_t actual = ((uint64_t)HEX2_IORD_DATA << 32) | (uint64_t)HEX_IORD_DATA;
   20988:	00800134 	movhi	r2,4
   2098c:	10842804 	addi	r2,r2,4256
   20990:	15400037 	ldwio	r21,0(r2)
   20994:	00800134 	movhi	r2,4
   20998:	10842c04 	addi	r2,r2,4272
   2099c:	17000037 	ldwio	fp,0(r2)
   209a0:	e005d7fa 	srai	r2,fp,31
   209a4:	a884b03a 	or	r2,r21,r2
   209a8:	d8800315 	stw	r2,12(sp)
   209ac:	d829883a 	mov	r20,sp
   209b0:	ddc00184 	addi	r23,sp,6
	int tmp = 0;
	int err = 0;

	// 64 bits variable that represent the whole port
	uint64_t bits = 0;
	uint64_t mask = 0;
   209b4:	0027883a 	mov	r19,zero
   209b8:	002b883a 	mov	r21,zero
	// Temp variables
	int tmp = 0;
	int err = 0;

	// 64 bits variable that represent the whole port
	uint64_t bits = 0;
   209bc:	0023883a 	mov	r17,zero
   209c0:	0021883a 	mov	r16,zero
		buf[k] = values[k - first];
	}

	// Temp variables
	int tmp = 0;
	int err = 0;
   209c4:	002d883a 	mov	r22,zero
	uint64_t actual = ((uint64_t)HEX2_IORD_DATA << 32) | (uint64_t)HEX_IORD_DATA;

	for (int k = 0; k < HEX_NB; k++)
	{
		// Get the associated char (and return if a char is not handled !)
		if (char27seg(buf[k], &tmp) < 0)
   209c8:	a4800003 	ldbu	r18,0(r20)
   209cc:	d9400204 	addi	r5,sp,8
   209d0:	91003fcc 	andi	r4,r18,255
   209d4:	2100201c 	xori	r4,r4,128
   209d8:	213fe004 	addi	r4,r4,-128
   209dc:	00206bc0 	call	206bc <char27seg>
   209e0:	1000010e 	bge	r2,zero,209e8 <hex_display+0xe4>
		{
			err += 1;
   209e4:	b5800044 	addi	r22,r22,1
		}

		// Clear the bits to write and write
		bits = bits << 8;
   209e8:	8804d63a 	srli	r2,r17,24
   209ec:	8020923a 	slli	r16,r16,8
   209f0:	1420b03a 	or	r16,r2,r16
   209f4:	8822923a 	slli	r17,r17,8
		mask = mask << 8;
   209f8:	9806d63a 	srli	r3,r19,24
   209fc:	a804923a 	slli	r2,r21,8
   20a00:	1884b03a 	or	r2,r3,r2
   20a04:	9826923a 	slli	r19,r19,8
   20a08:	102b883a 	mov	r21,r2

		bits |= tmp;
   20a0c:	d8c00217 	ldw	r3,8(sp)
   20a10:	1809d7fa 	srai	r4,r3,31
   20a14:	1c62b03a 	or	r17,r3,r17
   20a18:	2420b03a 	or	r16,r4,r16

		if (buf[k] == 0x00)
   20a1c:	94803fcc 	andi	r18,r18,255
   20a20:	9480201c 	xori	r18,r18,128
   20a24:	94bfe004 	addi	r18,r18,-128
   20a28:	9000011e 	bne	r18,zero,20a30 <hex_display+0x12c>
		{
			mask |= 0xFF;
   20a2c:	9cc03fd4 	ori	r19,r19,255
   20a30:	a5000044 	addi	r20,r20,1
	// 64 bits variable that represent the whole port
	uint64_t bits = 0;
	uint64_t mask = 0;
	uint64_t actual = ((uint64_t)HEX2_IORD_DATA << 32) | (uint64_t)HEX_IORD_DATA;

	for (int k = 0; k < HEX_NB; k++)
   20a34:	a5ffe41e 	bne	r20,r23,209c8 <hex_display+0xc4>
   20a38:	e478f03a 	xor	fp,fp,r17
   20a3c:	d8c00317 	ldw	r3,12(sp)
   20a40:	1c04f03a 	xor	r2,r3,r16
   20a44:	e4e6703a 	and	r19,fp,r19
   20a48:	156a703a 	and	r21,r2,r21
	// Inverting the mask and getting the masked bits (mask contain 1 where char are)
	mask = ~mask;
	bits &= mask;

	// Finally, getting the final bit stream
	bits = actual | bits;
   20a4c:	9c66f03a 	xor	r19,r19,r17
   20a50:	ac2af03a 	xor	r21,r21,r16

	// Writing the new value
	HEX2_IOWR_DATA((bits & 0xFFFFFFFF00000000) >> 32); // HEX 5 and 4 (16 LSB are ignored)
   20a54:	00800134 	movhi	r2,4
   20a58:	10842804 	addi	r2,r2,4256
   20a5c:	15400035 	stwio	r21,0(r2)
	HEX_IOWR_DATA( bits & 0xFFFFFFFF); // HEX 3 to 0;
   20a60:	00800134 	movhi	r2,4
   20a64:	10842c04 	addi	r2,r2,4272
   20a68:	14c00035 	stwio	r19,0(r2)

	return err;
   20a6c:	b005883a 	mov	r2,r22
   20a70:	00000606 	br	20a8c <hex_display+0x188>
int hex_display(char* values, int len, int first)
{
	// First, ensure the operation is possible
	if ((first + len) > HEX_NB)
	{
		return -1;
   20a74:	00bfffc4 	movi	r2,-1
	// Writing the new value
	HEX2_IOWR_DATA((bits & 0xFFFFFFFF00000000) >> 32); // HEX 5 and 4 (16 LSB are ignored)
	HEX_IOWR_DATA( bits & 0xFFFFFFFF); // HEX 3 to 0;

	return err;
}
   20a78:	f800283a 	ret
	{
		return -1;
	}
	if (len > HEX_NB)
	{
		return -1;
   20a7c:	00bfffc4 	movi	r2,-1
   20a80:	f800283a 	ret
	}
	if ((first > HEX_NB - 1) | (first < 0))
	{
		return -1;
   20a84:	00bfffc4 	movi	r2,-1
   20a88:	f800283a 	ret
	// Writing the new value
	HEX2_IOWR_DATA((bits & 0xFFFFFFFF00000000) >> 32); // HEX 5 and 4 (16 LSB are ignored)
	HEX_IOWR_DATA( bits & 0xFFFFFFFF); // HEX 3 to 0;

	return err;
}
   20a8c:	dfc00d17 	ldw	ra,52(sp)
   20a90:	df000c17 	ldw	fp,48(sp)
   20a94:	ddc00b17 	ldw	r23,44(sp)
   20a98:	dd800a17 	ldw	r22,40(sp)
   20a9c:	dd400917 	ldw	r21,36(sp)
   20aa0:	dd000817 	ldw	r20,32(sp)
   20aa4:	dcc00717 	ldw	r19,28(sp)
   20aa8:	dc800617 	ldw	r18,24(sp)
   20aac:	dc400517 	ldw	r17,20(sp)
   20ab0:	dc000417 	ldw	r16,16(sp)
   20ab4:	dec00e04 	addi	sp,sp,56
   20ab8:	f800283a 	ret

00020abc <time_increment>:
 *  =======================================================================
 */

int time_increment(struct time * const hour){
	// Input checks
	if (hour == NULL)
   20abc:	20001826 	beq	r4,zero,20b20 <time_increment+0x64>
	{
		return -1;
	}

	// Increment seconds
	hour->second += 1;
   20ac0:	20800217 	ldw	r2,8(r4)
   20ac4:	10800044 	addi	r2,r2,1

	// Check if a minute is elapsed
	if (hour->second > 59)
   20ac8:	00c00ec4 	movi	r3,59
   20acc:	18800216 	blt	r3,r2,20ad8 <time_increment+0x1c>
	{
		return -1;
	}

	// Increment seconds
	hour->second += 1;
   20ad0:	20800215 	stw	r2,8(r4)
   20ad4:	00000406 	br	20ae8 <time_increment+0x2c>

	// Check if a minute is elapsed
	if (hour->second > 59)
	{
		hour->second = 0;
   20ad8:	20000215 	stw	zero,8(r4)
		hour->minute += 1;
   20adc:	20800117 	ldw	r2,4(r4)
   20ae0:	10800044 	addi	r2,r2,1
   20ae4:	20800115 	stw	r2,4(r4)
	}

	// Check if an hour is elapsed
	if (hour->minute > 59)
   20ae8:	20800117 	ldw	r2,4(r4)
   20aec:	00c00ec4 	movi	r3,59
   20af0:	1880040e 	bge	r3,r2,20b04 <time_increment+0x48>
	{
		hour->minute = 0;
   20af4:	20000115 	stw	zero,4(r4)
		hour->hour += 1;
   20af8:	20800017 	ldw	r2,0(r4)
   20afc:	10800044 	addi	r2,r2,1
   20b00:	20800015 	stw	r2,0(r4)
	}

	// Check if a day is elapsed (and output an overflow)
	if (hour->hour > 23)
   20b04:	20c00017 	ldw	r3,0(r4)
	{
		hour->hour = 0;
		return -2;
	}

	return 0;
   20b08:	0005883a 	mov	r2,zero
		hour->minute = 0;
		hour->hour += 1;
	}

	// Check if a day is elapsed (and output an overflow)
	if (hour->hour > 23)
   20b0c:	014005c4 	movi	r5,23
   20b10:	28c0040e 	bge	r5,r3,20b24 <time_increment+0x68>
	{
		hour->hour = 0;
   20b14:	20000015 	stw	zero,0(r4)
		return -2;
   20b18:	00bfff84 	movi	r2,-2
   20b1c:	f800283a 	ret

int time_increment(struct time * const hour){
	// Input checks
	if (hour == NULL)
	{
		return -1;
   20b20:	00bfffc4 	movi	r2,-1
		hour->hour = 0;
		return -2;
	}

	return 0;
}
   20b24:	f800283a 	ret

00020b28 <time_print>:

int time_print(const struct time * const hour, char buf[6]){
	// Input checks
	if (hour == NULL)
   20b28:	20001e26 	beq	r4,zero,20ba4 <time_print+0x7c>
	}

	return 0;
}

int time_print(const struct time * const hour, char buf[6]){
   20b2c:	defffe04 	addi	sp,sp,-8
   20b30:	dfc00115 	stw	ra,4(sp)
   20b34:	dc000015 	stw	r16,0(sp)
   20b38:	2021883a 	mov	r16,r4
	 */

	buf = "......"; // empty char (. is not handled by the hex.h lib).

	int val = 0;
	val = sprintf(&buf[0], "%d", hour->hour);
   20b3c:	21800017 	ldw	r6,0(r4)
   20b40:	014000b4 	movhi	r5,2
   20b44:	294f6504 	addi	r5,r5,15764
   20b48:	010000b4 	movhi	r4,2
   20b4c:	210f6604 	addi	r4,r4,15768
   20b50:	0020d500 	call	20d50 <sprintf>
	if (val > 2)
   20b54:	00c00084 	movi	r3,2
   20b58:	18801416 	blt	r3,r2,20bac <time_print+0x84>
	{
		return -2;
	}
	val = sprintf(&buf[2], "%d", hour->minute);
   20b5c:	81800117 	ldw	r6,4(r16)
   20b60:	014000b4 	movhi	r5,2
   20b64:	294f6504 	addi	r5,r5,15764
   20b68:	010000b4 	movhi	r4,2
   20b6c:	210f6684 	addi	r4,r4,15770
   20b70:	0020d500 	call	20d50 <sprintf>
	if (val > 2)
   20b74:	00c00084 	movi	r3,2
   20b78:	18800e16 	blt	r3,r2,20bb4 <time_print+0x8c>
	{
		return -2;
	}
	val = sprintf(&buf[4], "%d", hour->second);
   20b7c:	81800217 	ldw	r6,8(r16)
   20b80:	014000b4 	movhi	r5,2
   20b84:	294f6504 	addi	r5,r5,15764
   20b88:	010000b4 	movhi	r4,2
   20b8c:	210f6704 	addi	r4,r4,15772
   20b90:	0020d500 	call	20d50 <sprintf>
	if (val > 2)
   20b94:	00c00084 	movi	r3,2
   20b98:	18800816 	blt	r3,r2,20bbc <time_print+0x94>
	{
		return -2;
	}

	return 0;
   20b9c:	0005883a 	mov	r2,zero
   20ba0:	00000706 	br	20bc0 <time_print+0x98>

int time_print(const struct time * const hour, char buf[6]){
	// Input checks
	if (hour == NULL)
	{
		return -1;
   20ba4:	00bfffc4 	movi	r2,-1
	{
		return -2;
	}

	return 0;
}
   20ba8:	f800283a 	ret

	int val = 0;
	val = sprintf(&buf[0], "%d", hour->hour);
	if (val > 2)
	{
		return -2;
   20bac:	00bfff84 	movi	r2,-2
   20bb0:	00000306 	br	20bc0 <time_print+0x98>
	}
	val = sprintf(&buf[2], "%d", hour->minute);
	if (val > 2)
	{
		return -2;
   20bb4:	00bfff84 	movi	r2,-2
   20bb8:	00000106 	br	20bc0 <time_print+0x98>
	}
	val = sprintf(&buf[4], "%d", hour->second);
	if (val > 2)
	{
		return -2;
   20bbc:	00bfff84 	movi	r2,-2
	}

	return 0;
}
   20bc0:	dfc00117 	ldw	ra,4(sp)
   20bc4:	dc000017 	ldw	r16,0(sp)
   20bc8:	dec00204 	addi	sp,sp,8
   20bcc:	f800283a 	ret

00020bd0 <_printf_r>:
   20bd0:	defffd04 	addi	sp,sp,-12
   20bd4:	dfc00015 	stw	ra,0(sp)
   20bd8:	d9800115 	stw	r6,4(sp)
   20bdc:	d9c00215 	stw	r7,8(sp)
   20be0:	20c00217 	ldw	r3,8(r4)
   20be4:	018000b4 	movhi	r6,2
   20be8:	31864f04 	addi	r6,r6,6460
   20bec:	19800115 	stw	r6,4(r3)
   20bf0:	280d883a 	mov	r6,r5
   20bf4:	21400217 	ldw	r5,8(r4)
   20bf8:	d9c00104 	addi	r7,sp,4
   20bfc:	00213fc0 	call	213fc <___vfprintf_internal_r>
   20c00:	dfc00017 	ldw	ra,0(sp)
   20c04:	dec00304 	addi	sp,sp,12
   20c08:	f800283a 	ret

00020c0c <printf>:
   20c0c:	defffc04 	addi	sp,sp,-16
   20c10:	dfc00015 	stw	ra,0(sp)
   20c14:	d9400115 	stw	r5,4(sp)
   20c18:	d9800215 	stw	r6,8(sp)
   20c1c:	d9c00315 	stw	r7,12(sp)
   20c20:	008000b4 	movhi	r2,2
   20c24:	10904b04 	addi	r2,r2,16684
   20c28:	10800017 	ldw	r2,0(r2)
   20c2c:	014000b4 	movhi	r5,2
   20c30:	29464f04 	addi	r5,r5,6460
   20c34:	10c00217 	ldw	r3,8(r2)
   20c38:	d9800104 	addi	r6,sp,4
   20c3c:	19400115 	stw	r5,4(r3)
   20c40:	200b883a 	mov	r5,r4
   20c44:	11000217 	ldw	r4,8(r2)
   20c48:	00219200 	call	21920 <__vfprintf_internal>
   20c4c:	dfc00017 	ldw	ra,0(sp)
   20c50:	dec00404 	addi	sp,sp,16
   20c54:	f800283a 	ret

00020c58 <_puts_r>:
   20c58:	defffd04 	addi	sp,sp,-12
   20c5c:	dc000015 	stw	r16,0(sp)
   20c60:	2021883a 	mov	r16,r4
   20c64:	2809883a 	mov	r4,r5
   20c68:	dfc00215 	stw	ra,8(sp)
   20c6c:	dc400115 	stw	r17,4(sp)
   20c70:	2823883a 	mov	r17,r5
   20c74:	0020dc80 	call	20dc8 <strlen>
   20c78:	81400217 	ldw	r5,8(r16)
   20c7c:	010000b4 	movhi	r4,2
   20c80:	21064f04 	addi	r4,r4,6460
   20c84:	29000115 	stw	r4,4(r5)
   20c88:	100f883a 	mov	r7,r2
   20c8c:	880d883a 	mov	r6,r17
   20c90:	8009883a 	mov	r4,r16
   20c94:	002193c0 	call	2193c <__sfvwrite_small_dev>
   20c98:	00ffffc4 	movi	r3,-1
   20c9c:	10c00926 	beq	r2,r3,20cc4 <_puts_r+0x6c>
   20ca0:	81400217 	ldw	r5,8(r16)
   20ca4:	018000b4 	movhi	r6,2
   20ca8:	01c00044 	movi	r7,1
   20cac:	28800117 	ldw	r2,4(r5)
   20cb0:	318f4e04 	addi	r6,r6,15672
   20cb4:	8009883a 	mov	r4,r16
   20cb8:	103ee83a 	callr	r2
   20cbc:	10bfffe0 	cmpeqi	r2,r2,-1
   20cc0:	0085c83a 	sub	r2,zero,r2
   20cc4:	dfc00217 	ldw	ra,8(sp)
   20cc8:	dc400117 	ldw	r17,4(sp)
   20ccc:	dc000017 	ldw	r16,0(sp)
   20cd0:	dec00304 	addi	sp,sp,12
   20cd4:	f800283a 	ret

00020cd8 <puts>:
   20cd8:	008000b4 	movhi	r2,2
   20cdc:	10904b04 	addi	r2,r2,16684
   20ce0:	200b883a 	mov	r5,r4
   20ce4:	11000017 	ldw	r4,0(r2)
   20ce8:	0020c581 	jmpi	20c58 <_puts_r>

00020cec <_sprintf_r>:
   20cec:	defff704 	addi	sp,sp,-36
   20cf0:	dfc00715 	stw	ra,28(sp)
   20cf4:	d9c00815 	stw	r7,32(sp)
   20cf8:	00808204 	movi	r2,520
   20cfc:	d880000d 	sth	r2,0(sp)
   20d00:	00a00034 	movhi	r2,32768
   20d04:	10bfffc4 	addi	r2,r2,-1
   20d08:	d8800515 	stw	r2,20(sp)
   20d0c:	d8800315 	stw	r2,12(sp)
   20d10:	00bfffc4 	movi	r2,-1
   20d14:	d880008d 	sth	r2,2(sp)
   20d18:	008000b4 	movhi	r2,2
   20d1c:	d9400415 	stw	r5,16(sp)
   20d20:	d9400215 	stw	r5,8(sp)
   20d24:	10867d04 	addi	r2,r2,6644
   20d28:	d9c00804 	addi	r7,sp,32
   20d2c:	d80b883a 	mov	r5,sp
   20d30:	d8800115 	stw	r2,4(sp)
   20d34:	d8000615 	stw	zero,24(sp)
   20d38:	0020e500 	call	20e50 <___svfprintf_internal_r>
   20d3c:	d8c00417 	ldw	r3,16(sp)
   20d40:	18000005 	stb	zero,0(r3)
   20d44:	dfc00717 	ldw	ra,28(sp)
   20d48:	dec00904 	addi	sp,sp,36
   20d4c:	f800283a 	ret

00020d50 <sprintf>:
   20d50:	defff604 	addi	sp,sp,-40
   20d54:	dfc00715 	stw	ra,28(sp)
   20d58:	d9800815 	stw	r6,32(sp)
   20d5c:	d9c00915 	stw	r7,36(sp)
   20d60:	00808204 	movi	r2,520
   20d64:	d880000d 	sth	r2,0(sp)
   20d68:	00a00034 	movhi	r2,32768
   20d6c:	10bfffc4 	addi	r2,r2,-1
   20d70:	d8800515 	stw	r2,20(sp)
   20d74:	d8800315 	stw	r2,12(sp)
   20d78:	00bfffc4 	movi	r2,-1
   20d7c:	d880008d 	sth	r2,2(sp)
   20d80:	008000b4 	movhi	r2,2
   20d84:	10867d04 	addi	r2,r2,6644
   20d88:	d8800115 	stw	r2,4(sp)
   20d8c:	008000b4 	movhi	r2,2
   20d90:	10904b04 	addi	r2,r2,16684
   20d94:	d9000415 	stw	r4,16(sp)
   20d98:	d9000215 	stw	r4,8(sp)
   20d9c:	11000017 	ldw	r4,0(r2)
   20da0:	280d883a 	mov	r6,r5
   20da4:	d9c00804 	addi	r7,sp,32
   20da8:	d80b883a 	mov	r5,sp
   20dac:	d8000615 	stw	zero,24(sp)
   20db0:	0020e500 	call	20e50 <___svfprintf_internal_r>
   20db4:	d8c00417 	ldw	r3,16(sp)
   20db8:	18000005 	stb	zero,0(r3)
   20dbc:	dfc00717 	ldw	ra,28(sp)
   20dc0:	dec00a04 	addi	sp,sp,40
   20dc4:	f800283a 	ret

00020dc8 <strlen>:
   20dc8:	2005883a 	mov	r2,r4
   20dcc:	10c00007 	ldb	r3,0(r2)
   20dd0:	18000226 	beq	r3,zero,20ddc <strlen+0x14>
   20dd4:	10800044 	addi	r2,r2,1
   20dd8:	003ffc06 	br	20dcc <strlen+0x4>
   20ddc:	1105c83a 	sub	r2,r2,r4
   20de0:	f800283a 	ret

00020de4 <print_repeat>:
   20de4:	defffb04 	addi	sp,sp,-20
   20de8:	dc800315 	stw	r18,12(sp)
   20dec:	dc400215 	stw	r17,8(sp)
   20df0:	dc000115 	stw	r16,4(sp)
   20df4:	dfc00415 	stw	ra,16(sp)
   20df8:	2025883a 	mov	r18,r4
   20dfc:	2823883a 	mov	r17,r5
   20e00:	d9800005 	stb	r6,0(sp)
   20e04:	3821883a 	mov	r16,r7
   20e08:	04000a0e 	bge	zero,r16,20e34 <print_repeat+0x50>
   20e0c:	88800117 	ldw	r2,4(r17)
   20e10:	01c00044 	movi	r7,1
   20e14:	d80d883a 	mov	r6,sp
   20e18:	880b883a 	mov	r5,r17
   20e1c:	9009883a 	mov	r4,r18
   20e20:	103ee83a 	callr	r2
   20e24:	843fffc4 	addi	r16,r16,-1
   20e28:	103ff726 	beq	r2,zero,20e08 <print_repeat+0x24>
   20e2c:	00bfffc4 	movi	r2,-1
   20e30:	00000106 	br	20e38 <print_repeat+0x54>
   20e34:	0005883a 	mov	r2,zero
   20e38:	dfc00417 	ldw	ra,16(sp)
   20e3c:	dc800317 	ldw	r18,12(sp)
   20e40:	dc400217 	ldw	r17,8(sp)
   20e44:	dc000117 	ldw	r16,4(sp)
   20e48:	dec00504 	addi	sp,sp,20
   20e4c:	f800283a 	ret

00020e50 <___svfprintf_internal_r>:
   20e50:	deffe504 	addi	sp,sp,-108
   20e54:	d8c00804 	addi	r3,sp,32
   20e58:	df001915 	stw	fp,100(sp)
   20e5c:	ddc01815 	stw	r23,96(sp)
   20e60:	dd801715 	stw	r22,92(sp)
   20e64:	dd401615 	stw	r21,88(sp)
   20e68:	dd001515 	stw	r20,84(sp)
   20e6c:	dcc01415 	stw	r19,80(sp)
   20e70:	dc801315 	stw	r18,76(sp)
   20e74:	dc401215 	stw	r17,72(sp)
   20e78:	dc001115 	stw	r16,68(sp)
   20e7c:	dfc01a15 	stw	ra,104(sp)
   20e80:	2027883a 	mov	r19,r4
   20e84:	2839883a 	mov	fp,r5
   20e88:	382d883a 	mov	r22,r7
   20e8c:	d9800f15 	stw	r6,60(sp)
   20e90:	0021883a 	mov	r16,zero
   20e94:	d8000e15 	stw	zero,56(sp)
   20e98:	002f883a 	mov	r23,zero
   20e9c:	002b883a 	mov	r21,zero
   20ea0:	0025883a 	mov	r18,zero
   20ea4:	0023883a 	mov	r17,zero
   20ea8:	d8000c15 	stw	zero,48(sp)
   20eac:	d8000b15 	stw	zero,44(sp)
   20eb0:	0029883a 	mov	r20,zero
   20eb4:	d8c00915 	stw	r3,36(sp)
   20eb8:	d8c00f17 	ldw	r3,60(sp)
   20ebc:	19000003 	ldbu	r4,0(r3)
   20ec0:	20803fcc 	andi	r2,r4,255
   20ec4:	1080201c 	xori	r2,r2,128
   20ec8:	10bfe004 	addi	r2,r2,-128
   20ecc:	10011c26 	beq	r2,zero,21340 <___svfprintf_internal_r+0x4f0>
   20ed0:	00c00044 	movi	r3,1
   20ed4:	a0c01426 	beq	r20,r3,20f28 <___svfprintf_internal_r+0xd8>
   20ed8:	1d000216 	blt	r3,r20,20ee4 <___svfprintf_internal_r+0x94>
   20edc:	a0000626 	beq	r20,zero,20ef8 <___svfprintf_internal_r+0xa8>
   20ee0:	00011306 	br	21330 <___svfprintf_internal_r+0x4e0>
   20ee4:	01400084 	movi	r5,2
   20ee8:	a1401d26 	beq	r20,r5,20f60 <___svfprintf_internal_r+0x110>
   20eec:	014000c4 	movi	r5,3
   20ef0:	a1402926 	beq	r20,r5,20f98 <___svfprintf_internal_r+0x148>
   20ef4:	00010e06 	br	21330 <___svfprintf_internal_r+0x4e0>
   20ef8:	01400944 	movi	r5,37
   20efc:	1140fb26 	beq	r2,r5,212ec <___svfprintf_internal_r+0x49c>
   20f00:	e0800117 	ldw	r2,4(fp)
   20f04:	d9000005 	stb	r4,0(sp)
   20f08:	01c00044 	movi	r7,1
   20f0c:	d80d883a 	mov	r6,sp
   20f10:	e00b883a 	mov	r5,fp
   20f14:	9809883a 	mov	r4,r19
   20f18:	103ee83a 	callr	r2
   20f1c:	1000d61e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   20f20:	84000044 	addi	r16,r16,1
   20f24:	00010206 	br	21330 <___svfprintf_internal_r+0x4e0>
   20f28:	01400c04 	movi	r5,48
   20f2c:	1140f826 	beq	r2,r5,21310 <___svfprintf_internal_r+0x4c0>
   20f30:	01400944 	movi	r5,37
   20f34:	11400a1e 	bne	r2,r5,20f60 <___svfprintf_internal_r+0x110>
   20f38:	d8800005 	stb	r2,0(sp)
   20f3c:	e0800117 	ldw	r2,4(fp)
   20f40:	a00f883a 	mov	r7,r20
   20f44:	d80d883a 	mov	r6,sp
   20f48:	e00b883a 	mov	r5,fp
   20f4c:	9809883a 	mov	r4,r19
   20f50:	103ee83a 	callr	r2
   20f54:	1000c81e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   20f58:	84000044 	addi	r16,r16,1
   20f5c:	0000f306 	br	2132c <___svfprintf_internal_r+0x4dc>
   20f60:	217ff404 	addi	r5,r4,-48
   20f64:	29403fcc 	andi	r5,r5,255
   20f68:	00c00244 	movi	r3,9
   20f6c:	19400736 	bltu	r3,r5,20f8c <___svfprintf_internal_r+0x13c>
   20f70:	00bfffc4 	movi	r2,-1
   20f74:	88800226 	beq	r17,r2,20f80 <___svfprintf_internal_r+0x130>
   20f78:	8c4002a4 	muli	r17,r17,10
   20f7c:	00000106 	br	20f84 <___svfprintf_internal_r+0x134>
   20f80:	0023883a 	mov	r17,zero
   20f84:	2c63883a 	add	r17,r5,r17
   20f88:	0000e206 	br	21314 <___svfprintf_internal_r+0x4c4>
   20f8c:	01400b84 	movi	r5,46
   20f90:	1140e426 	beq	r2,r5,21324 <___svfprintf_internal_r+0x4d4>
   20f94:	05000084 	movi	r20,2
   20f98:	213ff404 	addi	r4,r4,-48
   20f9c:	21003fcc 	andi	r4,r4,255
   20fa0:	00c00244 	movi	r3,9
   20fa4:	19000736 	bltu	r3,r4,20fc4 <___svfprintf_internal_r+0x174>
   20fa8:	00bfffc4 	movi	r2,-1
   20fac:	90800226 	beq	r18,r2,20fb8 <___svfprintf_internal_r+0x168>
   20fb0:	948002a4 	muli	r18,r18,10
   20fb4:	00000106 	br	20fbc <___svfprintf_internal_r+0x16c>
   20fb8:	0025883a 	mov	r18,zero
   20fbc:	24a5883a 	add	r18,r4,r18
   20fc0:	0000db06 	br	21330 <___svfprintf_internal_r+0x4e0>
   20fc4:	00c01b04 	movi	r3,108
   20fc8:	10c0d426 	beq	r2,r3,2131c <___svfprintf_internal_r+0x4cc>
   20fcc:	013fffc4 	movi	r4,-1
   20fd0:	91000226 	beq	r18,r4,20fdc <___svfprintf_internal_r+0x18c>
   20fd4:	d8000b15 	stw	zero,44(sp)
   20fd8:	00000106 	br	20fe0 <___svfprintf_internal_r+0x190>
   20fdc:	04800044 	movi	r18,1
   20fe0:	01001a44 	movi	r4,105
   20fe4:	11001626 	beq	r2,r4,21040 <___svfprintf_internal_r+0x1f0>
   20fe8:	20800916 	blt	r4,r2,21010 <___svfprintf_internal_r+0x1c0>
   20fec:	010018c4 	movi	r4,99
   20ff0:	11008a26 	beq	r2,r4,2121c <___svfprintf_internal_r+0x3cc>
   20ff4:	01001904 	movi	r4,100
   20ff8:	11001126 	beq	r2,r4,21040 <___svfprintf_internal_r+0x1f0>
   20ffc:	01001604 	movi	r4,88
   21000:	1100ca1e 	bne	r2,r4,2132c <___svfprintf_internal_r+0x4dc>
   21004:	00c00044 	movi	r3,1
   21008:	d8c00e15 	stw	r3,56(sp)
   2100c:	00001406 	br	21060 <___svfprintf_internal_r+0x210>
   21010:	01001cc4 	movi	r4,115
   21014:	11009a26 	beq	r2,r4,21280 <___svfprintf_internal_r+0x430>
   21018:	20800416 	blt	r4,r2,2102c <___svfprintf_internal_r+0x1dc>
   2101c:	01001bc4 	movi	r4,111
   21020:	1100c21e 	bne	r2,r4,2132c <___svfprintf_internal_r+0x4dc>
   21024:	05400204 	movi	r21,8
   21028:	00000e06 	br	21064 <___svfprintf_internal_r+0x214>
   2102c:	01001d44 	movi	r4,117
   21030:	11000c26 	beq	r2,r4,21064 <___svfprintf_internal_r+0x214>
   21034:	01001e04 	movi	r4,120
   21038:	11000926 	beq	r2,r4,21060 <___svfprintf_internal_r+0x210>
   2103c:	0000bb06 	br	2132c <___svfprintf_internal_r+0x4dc>
   21040:	b5000104 	addi	r20,r22,4
   21044:	b8000726 	beq	r23,zero,21064 <___svfprintf_internal_r+0x214>
   21048:	dd000d15 	stw	r20,52(sp)
   2104c:	b5800017 	ldw	r22,0(r22)
   21050:	b000080e 	bge	r22,zero,21074 <___svfprintf_internal_r+0x224>
   21054:	05adc83a 	sub	r22,zero,r22
   21058:	02800044 	movi	r10,1
   2105c:	00000606 	br	21078 <___svfprintf_internal_r+0x228>
   21060:	05400404 	movi	r21,16
   21064:	b0c00104 	addi	r3,r22,4
   21068:	d8c00d15 	stw	r3,52(sp)
   2106c:	b5800017 	ldw	r22,0(r22)
   21070:	002f883a 	mov	r23,zero
   21074:	0015883a 	mov	r10,zero
   21078:	d829883a 	mov	r20,sp
   2107c:	b0001426 	beq	r22,zero,210d0 <___svfprintf_internal_r+0x280>
   21080:	b009883a 	mov	r4,r22
   21084:	a80b883a 	mov	r5,r21
   21088:	da801015 	stw	r10,64(sp)
   2108c:	0021c4c0 	call	21c4c <__udivsi3>
   21090:	1549383a 	mul	r4,r2,r21
   21094:	00c00244 	movi	r3,9
   21098:	da801017 	ldw	r10,64(sp)
   2109c:	b12dc83a 	sub	r22,r22,r4
   210a0:	1d800216 	blt	r3,r22,210ac <___svfprintf_internal_r+0x25c>
   210a4:	b5800c04 	addi	r22,r22,48
   210a8:	00000506 	br	210c0 <___svfprintf_internal_r+0x270>
   210ac:	d8c00e17 	ldw	r3,56(sp)
   210b0:	18000226 	beq	r3,zero,210bc <___svfprintf_internal_r+0x26c>
   210b4:	b5800dc4 	addi	r22,r22,55
   210b8:	00000106 	br	210c0 <___svfprintf_internal_r+0x270>
   210bc:	b58015c4 	addi	r22,r22,87
   210c0:	a5800005 	stb	r22,0(r20)
   210c4:	a5000044 	addi	r20,r20,1
   210c8:	102d883a 	mov	r22,r2
   210cc:	003feb06 	br	2107c <___svfprintf_internal_r+0x22c>
   210d0:	a6c7c83a 	sub	r3,r20,sp
   210d4:	d8c00a15 	stw	r3,40(sp)
   210d8:	90c5c83a 	sub	r2,r18,r3
   210dc:	00800a0e 	bge	zero,r2,21108 <___svfprintf_internal_r+0x2b8>
   210e0:	a085883a 	add	r2,r20,r2
   210e4:	01400c04 	movi	r5,48
   210e8:	d8c00917 	ldw	r3,36(sp)
   210ec:	a009883a 	mov	r4,r20
   210f0:	a0c0032e 	bgeu	r20,r3,21100 <___svfprintf_internal_r+0x2b0>
   210f4:	a5000044 	addi	r20,r20,1
   210f8:	21400005 	stb	r5,0(r4)
   210fc:	a0bffa1e 	bne	r20,r2,210e8 <___svfprintf_internal_r+0x298>
   21100:	a6c7c83a 	sub	r3,r20,sp
   21104:	d8c00a15 	stw	r3,40(sp)
   21108:	d8c00a17 	ldw	r3,40(sp)
   2110c:	50d3883a 	add	r9,r10,r3
   21110:	d8c00b17 	ldw	r3,44(sp)
   21114:	8a6dc83a 	sub	r22,r17,r9
   21118:	18001726 	beq	r3,zero,21178 <___svfprintf_internal_r+0x328>
   2111c:	50000a26 	beq	r10,zero,21148 <___svfprintf_internal_r+0x2f8>
   21120:	00800b44 	movi	r2,45
   21124:	d8800805 	stb	r2,32(sp)
   21128:	e0800117 	ldw	r2,4(fp)
   2112c:	01c00044 	movi	r7,1
   21130:	d9800804 	addi	r6,sp,32
   21134:	e00b883a 	mov	r5,fp
   21138:	9809883a 	mov	r4,r19
   2113c:	103ee83a 	callr	r2
   21140:	10004d1e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   21144:	84000044 	addi	r16,r16,1
   21148:	0580070e 	bge	zero,r22,21168 <___svfprintf_internal_r+0x318>
   2114c:	b00f883a 	mov	r7,r22
   21150:	01800c04 	movi	r6,48
   21154:	e00b883a 	mov	r5,fp
   21158:	9809883a 	mov	r4,r19
   2115c:	0020de40 	call	20de4 <print_repeat>
   21160:	1000451e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   21164:	85a1883a 	add	r16,r16,r22
   21168:	d8c00a17 	ldw	r3,40(sp)
   2116c:	a013883a 	mov	r9,r20
   21170:	1d2dc83a 	sub	r22,r3,r20
   21174:	00002206 	br	21200 <___svfprintf_internal_r+0x3b0>
   21178:	0580090e 	bge	zero,r22,211a0 <___svfprintf_internal_r+0x350>
   2117c:	b00f883a 	mov	r7,r22
   21180:	01800804 	movi	r6,32
   21184:	e00b883a 	mov	r5,fp
   21188:	9809883a 	mov	r4,r19
   2118c:	da801015 	stw	r10,64(sp)
   21190:	0020de40 	call	20de4 <print_repeat>
   21194:	da801017 	ldw	r10,64(sp)
   21198:	1000371e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   2119c:	85a1883a 	add	r16,r16,r22
   211a0:	503ff126 	beq	r10,zero,21168 <___svfprintf_internal_r+0x318>
   211a4:	00800b44 	movi	r2,45
   211a8:	d8800805 	stb	r2,32(sp)
   211ac:	e0800117 	ldw	r2,4(fp)
   211b0:	01c00044 	movi	r7,1
   211b4:	d9800804 	addi	r6,sp,32
   211b8:	e00b883a 	mov	r5,fp
   211bc:	9809883a 	mov	r4,r19
   211c0:	103ee83a 	callr	r2
   211c4:	10002c1e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   211c8:	84000044 	addi	r16,r16,1
   211cc:	003fe606 	br	21168 <___svfprintf_internal_r+0x318>
   211d0:	4a7fffc4 	addi	r9,r9,-1
   211d4:	48800003 	ldbu	r2,0(r9)
   211d8:	01c00044 	movi	r7,1
   211dc:	d9800804 	addi	r6,sp,32
   211e0:	d8800805 	stb	r2,32(sp)
   211e4:	e0800117 	ldw	r2,4(fp)
   211e8:	e00b883a 	mov	r5,fp
   211ec:	da401015 	stw	r9,64(sp)
   211f0:	9809883a 	mov	r4,r19
   211f4:	103ee83a 	callr	r2
   211f8:	da401017 	ldw	r9,64(sp)
   211fc:	10001e1e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   21200:	8245c83a 	sub	r2,r16,r9
   21204:	4d89883a 	add	r4,r9,r22
   21208:	a085883a 	add	r2,r20,r2
   2120c:	013ff016 	blt	zero,r4,211d0 <___svfprintf_internal_r+0x380>
   21210:	1021883a 	mov	r16,r2
   21214:	dd800d17 	ldw	r22,52(sp)
   21218:	00004406 	br	2132c <___svfprintf_internal_r+0x4dc>
   2121c:	00800044 	movi	r2,1
   21220:	1440080e 	bge	r2,r17,21244 <___svfprintf_internal_r+0x3f4>
   21224:	8d3fffc4 	addi	r20,r17,-1
   21228:	a00f883a 	mov	r7,r20
   2122c:	01800804 	movi	r6,32
   21230:	e00b883a 	mov	r5,fp
   21234:	9809883a 	mov	r4,r19
   21238:	0020de40 	call	20de4 <print_repeat>
   2123c:	10000e1e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   21240:	8521883a 	add	r16,r16,r20
   21244:	b0800017 	ldw	r2,0(r22)
   21248:	01c00044 	movi	r7,1
   2124c:	d80d883a 	mov	r6,sp
   21250:	d8800005 	stb	r2,0(sp)
   21254:	e0800117 	ldw	r2,4(fp)
   21258:	e00b883a 	mov	r5,fp
   2125c:	9809883a 	mov	r4,r19
   21260:	b5000104 	addi	r20,r22,4
   21264:	103ee83a 	callr	r2
   21268:	1000031e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   2126c:	84000044 	addi	r16,r16,1
   21270:	a02d883a 	mov	r22,r20
   21274:	00002d06 	br	2132c <___svfprintf_internal_r+0x4dc>
   21278:	00bfffc4 	movi	r2,-1
   2127c:	00003106 	br	21344 <___svfprintf_internal_r+0x4f4>
   21280:	b5000017 	ldw	r20,0(r22)
   21284:	b0c00104 	addi	r3,r22,4
   21288:	d8c00a15 	stw	r3,40(sp)
   2128c:	a009883a 	mov	r4,r20
   21290:	0020dc80 	call	20dc8 <strlen>
   21294:	8893c83a 	sub	r9,r17,r2
   21298:	102d883a 	mov	r22,r2
   2129c:	0240090e 	bge	zero,r9,212c4 <___svfprintf_internal_r+0x474>
   212a0:	480f883a 	mov	r7,r9
   212a4:	01800804 	movi	r6,32
   212a8:	e00b883a 	mov	r5,fp
   212ac:	9809883a 	mov	r4,r19
   212b0:	da401015 	stw	r9,64(sp)
   212b4:	0020de40 	call	20de4 <print_repeat>
   212b8:	da401017 	ldw	r9,64(sp)
   212bc:	103fee1e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   212c0:	8261883a 	add	r16,r16,r9
   212c4:	e0800117 	ldw	r2,4(fp)
   212c8:	b00f883a 	mov	r7,r22
   212cc:	a00d883a 	mov	r6,r20
   212d0:	e00b883a 	mov	r5,fp
   212d4:	9809883a 	mov	r4,r19
   212d8:	103ee83a 	callr	r2
   212dc:	103fe61e 	bne	r2,zero,21278 <___svfprintf_internal_r+0x428>
   212e0:	85a1883a 	add	r16,r16,r22
   212e4:	dd800a17 	ldw	r22,40(sp)
   212e8:	00001006 	br	2132c <___svfprintf_internal_r+0x4dc>
   212ec:	05c00044 	movi	r23,1
   212f0:	04bfffc4 	movi	r18,-1
   212f4:	d8000e15 	stw	zero,56(sp)
   212f8:	05400284 	movi	r21,10
   212fc:	9023883a 	mov	r17,r18
   21300:	d8000c15 	stw	zero,48(sp)
   21304:	d8000b15 	stw	zero,44(sp)
   21308:	b829883a 	mov	r20,r23
   2130c:	00000806 	br	21330 <___svfprintf_internal_r+0x4e0>
   21310:	dd000b15 	stw	r20,44(sp)
   21314:	05000084 	movi	r20,2
   21318:	00000506 	br	21330 <___svfprintf_internal_r+0x4e0>
   2131c:	00c00044 	movi	r3,1
   21320:	d8c00c15 	stw	r3,48(sp)
   21324:	050000c4 	movi	r20,3
   21328:	00000106 	br	21330 <___svfprintf_internal_r+0x4e0>
   2132c:	0029883a 	mov	r20,zero
   21330:	d8c00f17 	ldw	r3,60(sp)
   21334:	18c00044 	addi	r3,r3,1
   21338:	d8c00f15 	stw	r3,60(sp)
   2133c:	003ede06 	br	20eb8 <___svfprintf_internal_r+0x68>
   21340:	8005883a 	mov	r2,r16
   21344:	dfc01a17 	ldw	ra,104(sp)
   21348:	df001917 	ldw	fp,100(sp)
   2134c:	ddc01817 	ldw	r23,96(sp)
   21350:	dd801717 	ldw	r22,92(sp)
   21354:	dd401617 	ldw	r21,88(sp)
   21358:	dd001517 	ldw	r20,84(sp)
   2135c:	dcc01417 	ldw	r19,80(sp)
   21360:	dc801317 	ldw	r18,76(sp)
   21364:	dc401217 	ldw	r17,72(sp)
   21368:	dc001117 	ldw	r16,68(sp)
   2136c:	dec01b04 	addi	sp,sp,108
   21370:	f800283a 	ret

00021374 <__vfprintf_internal_unused>:
   21374:	008000b4 	movhi	r2,2
   21378:	10904b04 	addi	r2,r2,16684
   2137c:	300f883a 	mov	r7,r6
   21380:	280d883a 	mov	r6,r5
   21384:	200b883a 	mov	r5,r4
   21388:	11000017 	ldw	r4,0(r2)
   2138c:	0020e501 	jmpi	20e50 <___svfprintf_internal_r>

00021390 <print_repeat>:
   21390:	defffb04 	addi	sp,sp,-20
   21394:	dc800315 	stw	r18,12(sp)
   21398:	dc400215 	stw	r17,8(sp)
   2139c:	dc000115 	stw	r16,4(sp)
   213a0:	dfc00415 	stw	ra,16(sp)
   213a4:	2025883a 	mov	r18,r4
   213a8:	2823883a 	mov	r17,r5
   213ac:	d9800005 	stb	r6,0(sp)
   213b0:	3821883a 	mov	r16,r7
   213b4:	04000a0e 	bge	zero,r16,213e0 <print_repeat+0x50>
   213b8:	88800117 	ldw	r2,4(r17)
   213bc:	01c00044 	movi	r7,1
   213c0:	d80d883a 	mov	r6,sp
   213c4:	880b883a 	mov	r5,r17
   213c8:	9009883a 	mov	r4,r18
   213cc:	103ee83a 	callr	r2
   213d0:	843fffc4 	addi	r16,r16,-1
   213d4:	103ff726 	beq	r2,zero,213b4 <print_repeat+0x24>
   213d8:	00bfffc4 	movi	r2,-1
   213dc:	00000106 	br	213e4 <print_repeat+0x54>
   213e0:	0005883a 	mov	r2,zero
   213e4:	dfc00417 	ldw	ra,16(sp)
   213e8:	dc800317 	ldw	r18,12(sp)
   213ec:	dc400217 	ldw	r17,8(sp)
   213f0:	dc000117 	ldw	r16,4(sp)
   213f4:	dec00504 	addi	sp,sp,20
   213f8:	f800283a 	ret

000213fc <___vfprintf_internal_r>:
   213fc:	deffe504 	addi	sp,sp,-108
   21400:	d8c00804 	addi	r3,sp,32
   21404:	df001915 	stw	fp,100(sp)
   21408:	ddc01815 	stw	r23,96(sp)
   2140c:	dd801715 	stw	r22,92(sp)
   21410:	dd401615 	stw	r21,88(sp)
   21414:	dd001515 	stw	r20,84(sp)
   21418:	dcc01415 	stw	r19,80(sp)
   2141c:	dc801315 	stw	r18,76(sp)
   21420:	dc401215 	stw	r17,72(sp)
   21424:	dc001115 	stw	r16,68(sp)
   21428:	dfc01a15 	stw	ra,104(sp)
   2142c:	2027883a 	mov	r19,r4
   21430:	2839883a 	mov	fp,r5
   21434:	382d883a 	mov	r22,r7
   21438:	d9800f15 	stw	r6,60(sp)
   2143c:	0021883a 	mov	r16,zero
   21440:	d8000e15 	stw	zero,56(sp)
   21444:	002f883a 	mov	r23,zero
   21448:	002b883a 	mov	r21,zero
   2144c:	0025883a 	mov	r18,zero
   21450:	0023883a 	mov	r17,zero
   21454:	d8000c15 	stw	zero,48(sp)
   21458:	d8000b15 	stw	zero,44(sp)
   2145c:	0029883a 	mov	r20,zero
   21460:	d8c00915 	stw	r3,36(sp)
   21464:	d8c00f17 	ldw	r3,60(sp)
   21468:	19000003 	ldbu	r4,0(r3)
   2146c:	20803fcc 	andi	r2,r4,255
   21470:	1080201c 	xori	r2,r2,128
   21474:	10bfe004 	addi	r2,r2,-128
   21478:	10011c26 	beq	r2,zero,218ec <___vfprintf_internal_r+0x4f0>
   2147c:	00c00044 	movi	r3,1
   21480:	a0c01426 	beq	r20,r3,214d4 <___vfprintf_internal_r+0xd8>
   21484:	1d000216 	blt	r3,r20,21490 <___vfprintf_internal_r+0x94>
   21488:	a0000626 	beq	r20,zero,214a4 <___vfprintf_internal_r+0xa8>
   2148c:	00011306 	br	218dc <___vfprintf_internal_r+0x4e0>
   21490:	01400084 	movi	r5,2
   21494:	a1401d26 	beq	r20,r5,2150c <___vfprintf_internal_r+0x110>
   21498:	014000c4 	movi	r5,3
   2149c:	a1402926 	beq	r20,r5,21544 <___vfprintf_internal_r+0x148>
   214a0:	00010e06 	br	218dc <___vfprintf_internal_r+0x4e0>
   214a4:	01400944 	movi	r5,37
   214a8:	1140fb26 	beq	r2,r5,21898 <___vfprintf_internal_r+0x49c>
   214ac:	e0800117 	ldw	r2,4(fp)
   214b0:	d9000005 	stb	r4,0(sp)
   214b4:	01c00044 	movi	r7,1
   214b8:	d80d883a 	mov	r6,sp
   214bc:	e00b883a 	mov	r5,fp
   214c0:	9809883a 	mov	r4,r19
   214c4:	103ee83a 	callr	r2
   214c8:	1000d61e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   214cc:	84000044 	addi	r16,r16,1
   214d0:	00010206 	br	218dc <___vfprintf_internal_r+0x4e0>
   214d4:	01400c04 	movi	r5,48
   214d8:	1140f826 	beq	r2,r5,218bc <___vfprintf_internal_r+0x4c0>
   214dc:	01400944 	movi	r5,37
   214e0:	11400a1e 	bne	r2,r5,2150c <___vfprintf_internal_r+0x110>
   214e4:	d8800005 	stb	r2,0(sp)
   214e8:	e0800117 	ldw	r2,4(fp)
   214ec:	a00f883a 	mov	r7,r20
   214f0:	d80d883a 	mov	r6,sp
   214f4:	e00b883a 	mov	r5,fp
   214f8:	9809883a 	mov	r4,r19
   214fc:	103ee83a 	callr	r2
   21500:	1000c81e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   21504:	84000044 	addi	r16,r16,1
   21508:	0000f306 	br	218d8 <___vfprintf_internal_r+0x4dc>
   2150c:	217ff404 	addi	r5,r4,-48
   21510:	29403fcc 	andi	r5,r5,255
   21514:	00c00244 	movi	r3,9
   21518:	19400736 	bltu	r3,r5,21538 <___vfprintf_internal_r+0x13c>
   2151c:	00bfffc4 	movi	r2,-1
   21520:	88800226 	beq	r17,r2,2152c <___vfprintf_internal_r+0x130>
   21524:	8c4002a4 	muli	r17,r17,10
   21528:	00000106 	br	21530 <___vfprintf_internal_r+0x134>
   2152c:	0023883a 	mov	r17,zero
   21530:	2c63883a 	add	r17,r5,r17
   21534:	0000e206 	br	218c0 <___vfprintf_internal_r+0x4c4>
   21538:	01400b84 	movi	r5,46
   2153c:	1140e426 	beq	r2,r5,218d0 <___vfprintf_internal_r+0x4d4>
   21540:	05000084 	movi	r20,2
   21544:	213ff404 	addi	r4,r4,-48
   21548:	21003fcc 	andi	r4,r4,255
   2154c:	00c00244 	movi	r3,9
   21550:	19000736 	bltu	r3,r4,21570 <___vfprintf_internal_r+0x174>
   21554:	00bfffc4 	movi	r2,-1
   21558:	90800226 	beq	r18,r2,21564 <___vfprintf_internal_r+0x168>
   2155c:	948002a4 	muli	r18,r18,10
   21560:	00000106 	br	21568 <___vfprintf_internal_r+0x16c>
   21564:	0025883a 	mov	r18,zero
   21568:	24a5883a 	add	r18,r4,r18
   2156c:	0000db06 	br	218dc <___vfprintf_internal_r+0x4e0>
   21570:	00c01b04 	movi	r3,108
   21574:	10c0d426 	beq	r2,r3,218c8 <___vfprintf_internal_r+0x4cc>
   21578:	013fffc4 	movi	r4,-1
   2157c:	91000226 	beq	r18,r4,21588 <___vfprintf_internal_r+0x18c>
   21580:	d8000b15 	stw	zero,44(sp)
   21584:	00000106 	br	2158c <___vfprintf_internal_r+0x190>
   21588:	04800044 	movi	r18,1
   2158c:	01001a44 	movi	r4,105
   21590:	11001626 	beq	r2,r4,215ec <___vfprintf_internal_r+0x1f0>
   21594:	20800916 	blt	r4,r2,215bc <___vfprintf_internal_r+0x1c0>
   21598:	010018c4 	movi	r4,99
   2159c:	11008a26 	beq	r2,r4,217c8 <___vfprintf_internal_r+0x3cc>
   215a0:	01001904 	movi	r4,100
   215a4:	11001126 	beq	r2,r4,215ec <___vfprintf_internal_r+0x1f0>
   215a8:	01001604 	movi	r4,88
   215ac:	1100ca1e 	bne	r2,r4,218d8 <___vfprintf_internal_r+0x4dc>
   215b0:	00c00044 	movi	r3,1
   215b4:	d8c00e15 	stw	r3,56(sp)
   215b8:	00001406 	br	2160c <___vfprintf_internal_r+0x210>
   215bc:	01001cc4 	movi	r4,115
   215c0:	11009a26 	beq	r2,r4,2182c <___vfprintf_internal_r+0x430>
   215c4:	20800416 	blt	r4,r2,215d8 <___vfprintf_internal_r+0x1dc>
   215c8:	01001bc4 	movi	r4,111
   215cc:	1100c21e 	bne	r2,r4,218d8 <___vfprintf_internal_r+0x4dc>
   215d0:	05400204 	movi	r21,8
   215d4:	00000e06 	br	21610 <___vfprintf_internal_r+0x214>
   215d8:	01001d44 	movi	r4,117
   215dc:	11000c26 	beq	r2,r4,21610 <___vfprintf_internal_r+0x214>
   215e0:	01001e04 	movi	r4,120
   215e4:	11000926 	beq	r2,r4,2160c <___vfprintf_internal_r+0x210>
   215e8:	0000bb06 	br	218d8 <___vfprintf_internal_r+0x4dc>
   215ec:	b5000104 	addi	r20,r22,4
   215f0:	b8000726 	beq	r23,zero,21610 <___vfprintf_internal_r+0x214>
   215f4:	dd000d15 	stw	r20,52(sp)
   215f8:	b5800017 	ldw	r22,0(r22)
   215fc:	b000080e 	bge	r22,zero,21620 <___vfprintf_internal_r+0x224>
   21600:	05adc83a 	sub	r22,zero,r22
   21604:	02800044 	movi	r10,1
   21608:	00000606 	br	21624 <___vfprintf_internal_r+0x228>
   2160c:	05400404 	movi	r21,16
   21610:	b0c00104 	addi	r3,r22,4
   21614:	d8c00d15 	stw	r3,52(sp)
   21618:	b5800017 	ldw	r22,0(r22)
   2161c:	002f883a 	mov	r23,zero
   21620:	0015883a 	mov	r10,zero
   21624:	d829883a 	mov	r20,sp
   21628:	b0001426 	beq	r22,zero,2167c <___vfprintf_internal_r+0x280>
   2162c:	b009883a 	mov	r4,r22
   21630:	a80b883a 	mov	r5,r21
   21634:	da801015 	stw	r10,64(sp)
   21638:	0021c4c0 	call	21c4c <__udivsi3>
   2163c:	1549383a 	mul	r4,r2,r21
   21640:	00c00244 	movi	r3,9
   21644:	da801017 	ldw	r10,64(sp)
   21648:	b12dc83a 	sub	r22,r22,r4
   2164c:	1d800216 	blt	r3,r22,21658 <___vfprintf_internal_r+0x25c>
   21650:	b5800c04 	addi	r22,r22,48
   21654:	00000506 	br	2166c <___vfprintf_internal_r+0x270>
   21658:	d8c00e17 	ldw	r3,56(sp)
   2165c:	18000226 	beq	r3,zero,21668 <___vfprintf_internal_r+0x26c>
   21660:	b5800dc4 	addi	r22,r22,55
   21664:	00000106 	br	2166c <___vfprintf_internal_r+0x270>
   21668:	b58015c4 	addi	r22,r22,87
   2166c:	a5800005 	stb	r22,0(r20)
   21670:	a5000044 	addi	r20,r20,1
   21674:	102d883a 	mov	r22,r2
   21678:	003feb06 	br	21628 <___vfprintf_internal_r+0x22c>
   2167c:	a6c7c83a 	sub	r3,r20,sp
   21680:	d8c00a15 	stw	r3,40(sp)
   21684:	90c5c83a 	sub	r2,r18,r3
   21688:	00800a0e 	bge	zero,r2,216b4 <___vfprintf_internal_r+0x2b8>
   2168c:	a085883a 	add	r2,r20,r2
   21690:	01400c04 	movi	r5,48
   21694:	d8c00917 	ldw	r3,36(sp)
   21698:	a009883a 	mov	r4,r20
   2169c:	a0c0032e 	bgeu	r20,r3,216ac <___vfprintf_internal_r+0x2b0>
   216a0:	a5000044 	addi	r20,r20,1
   216a4:	21400005 	stb	r5,0(r4)
   216a8:	a0bffa1e 	bne	r20,r2,21694 <___vfprintf_internal_r+0x298>
   216ac:	a6c7c83a 	sub	r3,r20,sp
   216b0:	d8c00a15 	stw	r3,40(sp)
   216b4:	d8c00a17 	ldw	r3,40(sp)
   216b8:	50d3883a 	add	r9,r10,r3
   216bc:	d8c00b17 	ldw	r3,44(sp)
   216c0:	8a6dc83a 	sub	r22,r17,r9
   216c4:	18001726 	beq	r3,zero,21724 <___vfprintf_internal_r+0x328>
   216c8:	50000a26 	beq	r10,zero,216f4 <___vfprintf_internal_r+0x2f8>
   216cc:	00800b44 	movi	r2,45
   216d0:	d8800805 	stb	r2,32(sp)
   216d4:	e0800117 	ldw	r2,4(fp)
   216d8:	01c00044 	movi	r7,1
   216dc:	d9800804 	addi	r6,sp,32
   216e0:	e00b883a 	mov	r5,fp
   216e4:	9809883a 	mov	r4,r19
   216e8:	103ee83a 	callr	r2
   216ec:	10004d1e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   216f0:	84000044 	addi	r16,r16,1
   216f4:	0580070e 	bge	zero,r22,21714 <___vfprintf_internal_r+0x318>
   216f8:	b00f883a 	mov	r7,r22
   216fc:	01800c04 	movi	r6,48
   21700:	e00b883a 	mov	r5,fp
   21704:	9809883a 	mov	r4,r19
   21708:	00213900 	call	21390 <print_repeat>
   2170c:	1000451e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   21710:	85a1883a 	add	r16,r16,r22
   21714:	d8c00a17 	ldw	r3,40(sp)
   21718:	a013883a 	mov	r9,r20
   2171c:	1d2dc83a 	sub	r22,r3,r20
   21720:	00002206 	br	217ac <___vfprintf_internal_r+0x3b0>
   21724:	0580090e 	bge	zero,r22,2174c <___vfprintf_internal_r+0x350>
   21728:	b00f883a 	mov	r7,r22
   2172c:	01800804 	movi	r6,32
   21730:	e00b883a 	mov	r5,fp
   21734:	9809883a 	mov	r4,r19
   21738:	da801015 	stw	r10,64(sp)
   2173c:	00213900 	call	21390 <print_repeat>
   21740:	da801017 	ldw	r10,64(sp)
   21744:	1000371e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   21748:	85a1883a 	add	r16,r16,r22
   2174c:	503ff126 	beq	r10,zero,21714 <___vfprintf_internal_r+0x318>
   21750:	00800b44 	movi	r2,45
   21754:	d8800805 	stb	r2,32(sp)
   21758:	e0800117 	ldw	r2,4(fp)
   2175c:	01c00044 	movi	r7,1
   21760:	d9800804 	addi	r6,sp,32
   21764:	e00b883a 	mov	r5,fp
   21768:	9809883a 	mov	r4,r19
   2176c:	103ee83a 	callr	r2
   21770:	10002c1e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   21774:	84000044 	addi	r16,r16,1
   21778:	003fe606 	br	21714 <___vfprintf_internal_r+0x318>
   2177c:	4a7fffc4 	addi	r9,r9,-1
   21780:	48800003 	ldbu	r2,0(r9)
   21784:	01c00044 	movi	r7,1
   21788:	d9800804 	addi	r6,sp,32
   2178c:	d8800805 	stb	r2,32(sp)
   21790:	e0800117 	ldw	r2,4(fp)
   21794:	e00b883a 	mov	r5,fp
   21798:	da401015 	stw	r9,64(sp)
   2179c:	9809883a 	mov	r4,r19
   217a0:	103ee83a 	callr	r2
   217a4:	da401017 	ldw	r9,64(sp)
   217a8:	10001e1e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   217ac:	8245c83a 	sub	r2,r16,r9
   217b0:	4d89883a 	add	r4,r9,r22
   217b4:	a085883a 	add	r2,r20,r2
   217b8:	013ff016 	blt	zero,r4,2177c <___vfprintf_internal_r+0x380>
   217bc:	1021883a 	mov	r16,r2
   217c0:	dd800d17 	ldw	r22,52(sp)
   217c4:	00004406 	br	218d8 <___vfprintf_internal_r+0x4dc>
   217c8:	00800044 	movi	r2,1
   217cc:	1440080e 	bge	r2,r17,217f0 <___vfprintf_internal_r+0x3f4>
   217d0:	8d3fffc4 	addi	r20,r17,-1
   217d4:	a00f883a 	mov	r7,r20
   217d8:	01800804 	movi	r6,32
   217dc:	e00b883a 	mov	r5,fp
   217e0:	9809883a 	mov	r4,r19
   217e4:	00213900 	call	21390 <print_repeat>
   217e8:	10000e1e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   217ec:	8521883a 	add	r16,r16,r20
   217f0:	b0800017 	ldw	r2,0(r22)
   217f4:	01c00044 	movi	r7,1
   217f8:	d80d883a 	mov	r6,sp
   217fc:	d8800005 	stb	r2,0(sp)
   21800:	e0800117 	ldw	r2,4(fp)
   21804:	e00b883a 	mov	r5,fp
   21808:	9809883a 	mov	r4,r19
   2180c:	b5000104 	addi	r20,r22,4
   21810:	103ee83a 	callr	r2
   21814:	1000031e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   21818:	84000044 	addi	r16,r16,1
   2181c:	a02d883a 	mov	r22,r20
   21820:	00002d06 	br	218d8 <___vfprintf_internal_r+0x4dc>
   21824:	00bfffc4 	movi	r2,-1
   21828:	00003106 	br	218f0 <___vfprintf_internal_r+0x4f4>
   2182c:	b5000017 	ldw	r20,0(r22)
   21830:	b0c00104 	addi	r3,r22,4
   21834:	d8c00a15 	stw	r3,40(sp)
   21838:	a009883a 	mov	r4,r20
   2183c:	0020dc80 	call	20dc8 <strlen>
   21840:	8893c83a 	sub	r9,r17,r2
   21844:	102d883a 	mov	r22,r2
   21848:	0240090e 	bge	zero,r9,21870 <___vfprintf_internal_r+0x474>
   2184c:	480f883a 	mov	r7,r9
   21850:	01800804 	movi	r6,32
   21854:	e00b883a 	mov	r5,fp
   21858:	9809883a 	mov	r4,r19
   2185c:	da401015 	stw	r9,64(sp)
   21860:	00213900 	call	21390 <print_repeat>
   21864:	da401017 	ldw	r9,64(sp)
   21868:	103fee1e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   2186c:	8261883a 	add	r16,r16,r9
   21870:	e0800117 	ldw	r2,4(fp)
   21874:	b00f883a 	mov	r7,r22
   21878:	a00d883a 	mov	r6,r20
   2187c:	e00b883a 	mov	r5,fp
   21880:	9809883a 	mov	r4,r19
   21884:	103ee83a 	callr	r2
   21888:	103fe61e 	bne	r2,zero,21824 <___vfprintf_internal_r+0x428>
   2188c:	85a1883a 	add	r16,r16,r22
   21890:	dd800a17 	ldw	r22,40(sp)
   21894:	00001006 	br	218d8 <___vfprintf_internal_r+0x4dc>
   21898:	05c00044 	movi	r23,1
   2189c:	04bfffc4 	movi	r18,-1
   218a0:	d8000e15 	stw	zero,56(sp)
   218a4:	05400284 	movi	r21,10
   218a8:	9023883a 	mov	r17,r18
   218ac:	d8000c15 	stw	zero,48(sp)
   218b0:	d8000b15 	stw	zero,44(sp)
   218b4:	b829883a 	mov	r20,r23
   218b8:	00000806 	br	218dc <___vfprintf_internal_r+0x4e0>
   218bc:	dd000b15 	stw	r20,44(sp)
   218c0:	05000084 	movi	r20,2
   218c4:	00000506 	br	218dc <___vfprintf_internal_r+0x4e0>
   218c8:	00c00044 	movi	r3,1
   218cc:	d8c00c15 	stw	r3,48(sp)
   218d0:	050000c4 	movi	r20,3
   218d4:	00000106 	br	218dc <___vfprintf_internal_r+0x4e0>
   218d8:	0029883a 	mov	r20,zero
   218dc:	d8c00f17 	ldw	r3,60(sp)
   218e0:	18c00044 	addi	r3,r3,1
   218e4:	d8c00f15 	stw	r3,60(sp)
   218e8:	003ede06 	br	21464 <___vfprintf_internal_r+0x68>
   218ec:	8005883a 	mov	r2,r16
   218f0:	dfc01a17 	ldw	ra,104(sp)
   218f4:	df001917 	ldw	fp,100(sp)
   218f8:	ddc01817 	ldw	r23,96(sp)
   218fc:	dd801717 	ldw	r22,92(sp)
   21900:	dd401617 	ldw	r21,88(sp)
   21904:	dd001517 	ldw	r20,84(sp)
   21908:	dcc01417 	ldw	r19,80(sp)
   2190c:	dc801317 	ldw	r18,76(sp)
   21910:	dc401217 	ldw	r17,72(sp)
   21914:	dc001117 	ldw	r16,68(sp)
   21918:	dec01b04 	addi	sp,sp,108
   2191c:	f800283a 	ret

00021920 <__vfprintf_internal>:
   21920:	008000b4 	movhi	r2,2
   21924:	10904b04 	addi	r2,r2,16684
   21928:	300f883a 	mov	r7,r6
   2192c:	280d883a 	mov	r6,r5
   21930:	200b883a 	mov	r5,r4
   21934:	11000017 	ldw	r4,0(r2)
   21938:	00213fc1 	jmpi	213fc <___vfprintf_internal_r>

0002193c <__sfvwrite_small_dev>:
   2193c:	2880000b 	ldhu	r2,0(r5)
   21940:	1080020c 	andi	r2,r2,8
   21944:	10002126 	beq	r2,zero,219cc <__sfvwrite_small_dev+0x90>
   21948:	2880008f 	ldh	r2,2(r5)
   2194c:	defffa04 	addi	sp,sp,-24
   21950:	dc000015 	stw	r16,0(sp)
   21954:	dfc00515 	stw	ra,20(sp)
   21958:	dd000415 	stw	r20,16(sp)
   2195c:	dcc00315 	stw	r19,12(sp)
   21960:	dc800215 	stw	r18,8(sp)
   21964:	dc400115 	stw	r17,4(sp)
   21968:	2821883a 	mov	r16,r5
   2196c:	10001216 	blt	r2,zero,219b8 <__sfvwrite_small_dev+0x7c>
   21970:	2027883a 	mov	r19,r4
   21974:	3025883a 	mov	r18,r6
   21978:	3823883a 	mov	r17,r7
   2197c:	05010004 	movi	r20,1024
   21980:	04400b0e 	bge	zero,r17,219b0 <__sfvwrite_small_dev+0x74>
   21984:	880f883a 	mov	r7,r17
   21988:	a440010e 	bge	r20,r17,21990 <__sfvwrite_small_dev+0x54>
   2198c:	01c10004 	movi	r7,1024
   21990:	8140008f 	ldh	r5,2(r16)
   21994:	900d883a 	mov	r6,r18
   21998:	9809883a 	mov	r4,r19
   2199c:	0021afc0 	call	21afc <_write_r>
   219a0:	0080050e 	bge	zero,r2,219b8 <__sfvwrite_small_dev+0x7c>
   219a4:	88a3c83a 	sub	r17,r17,r2
   219a8:	90a5883a 	add	r18,r18,r2
   219ac:	003ff406 	br	21980 <__sfvwrite_small_dev+0x44>
   219b0:	0005883a 	mov	r2,zero
   219b4:	00000706 	br	219d4 <__sfvwrite_small_dev+0x98>
   219b8:	8080000b 	ldhu	r2,0(r16)
   219bc:	10801014 	ori	r2,r2,64
   219c0:	8080000d 	sth	r2,0(r16)
   219c4:	00bfffc4 	movi	r2,-1
   219c8:	00000206 	br	219d4 <__sfvwrite_small_dev+0x98>
   219cc:	00bfffc4 	movi	r2,-1
   219d0:	f800283a 	ret
   219d4:	dfc00517 	ldw	ra,20(sp)
   219d8:	dd000417 	ldw	r20,16(sp)
   219dc:	dcc00317 	ldw	r19,12(sp)
   219e0:	dc800217 	ldw	r18,8(sp)
   219e4:	dc400117 	ldw	r17,4(sp)
   219e8:	dc000017 	ldw	r16,0(sp)
   219ec:	dec00604 	addi	sp,sp,24
   219f0:	f800283a 	ret

000219f4 <__sfvwrite_small_str>:
   219f4:	2880000b 	ldhu	r2,0(r5)
   219f8:	10c0020c 	andi	r3,r2,8
   219fc:	18002026 	beq	r3,zero,21a80 <__sfvwrite_small_str+0x8c>
   21a00:	28c0008f 	ldh	r3,2(r5)
   21a04:	defffd04 	addi	sp,sp,-12
   21a08:	dc000015 	stw	r16,0(sp)
   21a0c:	dfc00215 	stw	ra,8(sp)
   21a10:	dc400115 	stw	r17,4(sp)
   21a14:	2821883a 	mov	r16,r5
   21a18:	1800150e 	bge	r3,zero,21a70 <__sfvwrite_small_str+0x7c>
   21a1c:	10c0800c 	andi	r3,r2,512
   21a20:	18001326 	beq	r3,zero,21a70 <__sfvwrite_small_str+0x7c>
   21a24:	2c400517 	ldw	r17,20(r5)
   21a28:	89c0030e 	bge	r17,r7,21a38 <__sfvwrite_small_str+0x44>
   21a2c:	10c0200c 	andi	r3,r2,128
   21a30:	18000326 	beq	r3,zero,21a40 <__sfvwrite_small_str+0x4c>
   21a34:	00000e06 	br	21a70 <__sfvwrite_small_str+0x7c>
   21a38:	3c40010e 	bge	r7,r17,21a40 <__sfvwrite_small_str+0x4c>
   21a3c:	3823883a 	mov	r17,r7
   21a40:	81000417 	ldw	r4,16(r16)
   21a44:	300b883a 	mov	r5,r6
   21a48:	880d883a 	mov	r6,r17
   21a4c:	0021a9c0 	call	21a9c <memmove>
   21a50:	80800517 	ldw	r2,20(r16)
   21a54:	1445c83a 	sub	r2,r2,r17
   21a58:	80800515 	stw	r2,20(r16)
   21a5c:	80800417 	ldw	r2,16(r16)
   21a60:	1463883a 	add	r17,r2,r17
   21a64:	84400415 	stw	r17,16(r16)
   21a68:	0005883a 	mov	r2,zero
   21a6c:	00000606 	br	21a88 <__sfvwrite_small_str+0x94>
   21a70:	10801014 	ori	r2,r2,64
   21a74:	8080000d 	sth	r2,0(r16)
   21a78:	00bfffc4 	movi	r2,-1
   21a7c:	00000206 	br	21a88 <__sfvwrite_small_str+0x94>
   21a80:	00bfffc4 	movi	r2,-1
   21a84:	f800283a 	ret
   21a88:	dfc00217 	ldw	ra,8(sp)
   21a8c:	dc400117 	ldw	r17,4(sp)
   21a90:	dc000017 	ldw	r16,0(sp)
   21a94:	dec00304 	addi	sp,sp,12
   21a98:	f800283a 	ret

00021a9c <memmove>:
   21a9c:	2005883a 	mov	r2,r4
   21aa0:	218f883a 	add	r7,r4,r6
   21aa4:	29000236 	bltu	r5,r4,21ab0 <memmove+0x14>
   21aa8:	1007883a 	mov	r3,r2
   21aac:	00000c06 	br	21ae0 <memmove+0x44>
   21ab0:	2987883a 	add	r3,r5,r6
   21ab4:	20fffc2e 	bgeu	r4,r3,21aa8 <memmove+0xc>
   21ab8:	380b883a 	mov	r5,r7
   21abc:	30cdc83a 	sub	r6,r6,r3
   21ac0:	1989883a 	add	r4,r3,r6
   21ac4:	20000526 	beq	r4,zero,21adc <memmove+0x40>
   21ac8:	18ffffc4 	addi	r3,r3,-1
   21acc:	19000003 	ldbu	r4,0(r3)
   21ad0:	297fffc4 	addi	r5,r5,-1
   21ad4:	29000005 	stb	r4,0(r5)
   21ad8:	003ff906 	br	21ac0 <memmove+0x24>
   21adc:	f800283a 	ret
   21ae0:	19c00526 	beq	r3,r7,21af8 <memmove+0x5c>
   21ae4:	29000003 	ldbu	r4,0(r5)
   21ae8:	18c00044 	addi	r3,r3,1
   21aec:	29400044 	addi	r5,r5,1
   21af0:	193fffc5 	stb	r4,-1(r3)
   21af4:	003ffa06 	br	21ae0 <memmove+0x44>
   21af8:	f800283a 	ret

00021afc <_write_r>:
   21afc:	defffd04 	addi	sp,sp,-12
   21b00:	dc000015 	stw	r16,0(sp)
   21b04:	040000b4 	movhi	r16,2
   21b08:	dc400115 	stw	r17,4(sp)
   21b0c:	84113904 	addi	r16,r16,17636
   21b10:	2023883a 	mov	r17,r4
   21b14:	2809883a 	mov	r4,r5
   21b18:	300b883a 	mov	r5,r6
   21b1c:	380d883a 	mov	r6,r7
   21b20:	dfc00215 	stw	ra,8(sp)
   21b24:	80000015 	stw	zero,0(r16)
   21b28:	002217c0 	call	2217c <write>
   21b2c:	00ffffc4 	movi	r3,-1
   21b30:	10c0031e 	bne	r2,r3,21b40 <_write_r+0x44>
   21b34:	80c00017 	ldw	r3,0(r16)
   21b38:	18000126 	beq	r3,zero,21b40 <_write_r+0x44>
   21b3c:	88c00015 	stw	r3,0(r17)
   21b40:	dfc00217 	ldw	ra,8(sp)
   21b44:	dc400117 	ldw	r17,4(sp)
   21b48:	dc000017 	ldw	r16,0(sp)
   21b4c:	dec00304 	addi	sp,sp,12
   21b50:	f800283a 	ret

00021b54 <__divsi3>:
   21b54:	20001b16 	blt	r4,zero,21bc4 <__divsi3+0x70>
   21b58:	000f883a 	mov	r7,zero
   21b5c:	28001616 	blt	r5,zero,21bb8 <__divsi3+0x64>
   21b60:	200d883a 	mov	r6,r4
   21b64:	29001a2e 	bgeu	r5,r4,21bd0 <__divsi3+0x7c>
   21b68:	00800804 	movi	r2,32
   21b6c:	00c00044 	movi	r3,1
   21b70:	00000106 	br	21b78 <__divsi3+0x24>
   21b74:	10000d26 	beq	r2,zero,21bac <__divsi3+0x58>
   21b78:	294b883a 	add	r5,r5,r5
   21b7c:	10bfffc4 	addi	r2,r2,-1
   21b80:	18c7883a 	add	r3,r3,r3
   21b84:	293ffb36 	bltu	r5,r4,21b74 <__divsi3+0x20>
   21b88:	0005883a 	mov	r2,zero
   21b8c:	18000726 	beq	r3,zero,21bac <__divsi3+0x58>
   21b90:	0005883a 	mov	r2,zero
   21b94:	31400236 	bltu	r6,r5,21ba0 <__divsi3+0x4c>
   21b98:	314dc83a 	sub	r6,r6,r5
   21b9c:	10c4b03a 	or	r2,r2,r3
   21ba0:	1806d07a 	srli	r3,r3,1
   21ba4:	280ad07a 	srli	r5,r5,1
   21ba8:	183ffa1e 	bne	r3,zero,21b94 <__divsi3+0x40>
   21bac:	38000126 	beq	r7,zero,21bb4 <__divsi3+0x60>
   21bb0:	0085c83a 	sub	r2,zero,r2
   21bb4:	f800283a 	ret
   21bb8:	014bc83a 	sub	r5,zero,r5
   21bbc:	39c0005c 	xori	r7,r7,1
   21bc0:	003fe706 	br	21b60 <__divsi3+0xc>
   21bc4:	0109c83a 	sub	r4,zero,r4
   21bc8:	01c00044 	movi	r7,1
   21bcc:	003fe306 	br	21b5c <__divsi3+0x8>
   21bd0:	00c00044 	movi	r3,1
   21bd4:	003fee06 	br	21b90 <__divsi3+0x3c>

00021bd8 <__modsi3>:
   21bd8:	20001716 	blt	r4,zero,21c38 <__modsi3+0x60>
   21bdc:	000f883a 	mov	r7,zero
   21be0:	2005883a 	mov	r2,r4
   21be4:	28001216 	blt	r5,zero,21c30 <__modsi3+0x58>
   21be8:	2900162e 	bgeu	r5,r4,21c44 <__modsi3+0x6c>
   21bec:	01800804 	movi	r6,32
   21bf0:	00c00044 	movi	r3,1
   21bf4:	00000106 	br	21bfc <__modsi3+0x24>
   21bf8:	30000a26 	beq	r6,zero,21c24 <__modsi3+0x4c>
   21bfc:	294b883a 	add	r5,r5,r5
   21c00:	31bfffc4 	addi	r6,r6,-1
   21c04:	18c7883a 	add	r3,r3,r3
   21c08:	293ffb36 	bltu	r5,r4,21bf8 <__modsi3+0x20>
   21c0c:	18000526 	beq	r3,zero,21c24 <__modsi3+0x4c>
   21c10:	1806d07a 	srli	r3,r3,1
   21c14:	11400136 	bltu	r2,r5,21c1c <__modsi3+0x44>
   21c18:	1145c83a 	sub	r2,r2,r5
   21c1c:	280ad07a 	srli	r5,r5,1
   21c20:	183ffb1e 	bne	r3,zero,21c10 <__modsi3+0x38>
   21c24:	38000126 	beq	r7,zero,21c2c <__modsi3+0x54>
   21c28:	0085c83a 	sub	r2,zero,r2
   21c2c:	f800283a 	ret
   21c30:	014bc83a 	sub	r5,zero,r5
   21c34:	003fec06 	br	21be8 <__modsi3+0x10>
   21c38:	0109c83a 	sub	r4,zero,r4
   21c3c:	01c00044 	movi	r7,1
   21c40:	003fe706 	br	21be0 <__modsi3+0x8>
   21c44:	00c00044 	movi	r3,1
   21c48:	003ff106 	br	21c10 <__modsi3+0x38>

00021c4c <__udivsi3>:
   21c4c:	200d883a 	mov	r6,r4
   21c50:	2900152e 	bgeu	r5,r4,21ca8 <__udivsi3+0x5c>
   21c54:	28001416 	blt	r5,zero,21ca8 <__udivsi3+0x5c>
   21c58:	00800804 	movi	r2,32
   21c5c:	00c00044 	movi	r3,1
   21c60:	00000206 	br	21c6c <__udivsi3+0x20>
   21c64:	10000e26 	beq	r2,zero,21ca0 <__udivsi3+0x54>
   21c68:	28000516 	blt	r5,zero,21c80 <__udivsi3+0x34>
   21c6c:	294b883a 	add	r5,r5,r5
   21c70:	10bfffc4 	addi	r2,r2,-1
   21c74:	18c7883a 	add	r3,r3,r3
   21c78:	293ffa36 	bltu	r5,r4,21c64 <__udivsi3+0x18>
   21c7c:	18000826 	beq	r3,zero,21ca0 <__udivsi3+0x54>
   21c80:	0005883a 	mov	r2,zero
   21c84:	31400236 	bltu	r6,r5,21c90 <__udivsi3+0x44>
   21c88:	314dc83a 	sub	r6,r6,r5
   21c8c:	10c4b03a 	or	r2,r2,r3
   21c90:	1806d07a 	srli	r3,r3,1
   21c94:	280ad07a 	srli	r5,r5,1
   21c98:	183ffa1e 	bne	r3,zero,21c84 <__udivsi3+0x38>
   21c9c:	f800283a 	ret
   21ca0:	0005883a 	mov	r2,zero
   21ca4:	f800283a 	ret
   21ca8:	00c00044 	movi	r3,1
   21cac:	003ff406 	br	21c80 <__udivsi3+0x34>

00021cb0 <__umodsi3>:
   21cb0:	2005883a 	mov	r2,r4
   21cb4:	2900122e 	bgeu	r5,r4,21d00 <__umodsi3+0x50>
   21cb8:	28001116 	blt	r5,zero,21d00 <__umodsi3+0x50>
   21cbc:	01800804 	movi	r6,32
   21cc0:	00c00044 	movi	r3,1
   21cc4:	00000206 	br	21cd0 <__umodsi3+0x20>
   21cc8:	30000c26 	beq	r6,zero,21cfc <__umodsi3+0x4c>
   21ccc:	28000516 	blt	r5,zero,21ce4 <__umodsi3+0x34>
   21cd0:	294b883a 	add	r5,r5,r5
   21cd4:	31bfffc4 	addi	r6,r6,-1
   21cd8:	18c7883a 	add	r3,r3,r3
   21cdc:	293ffa36 	bltu	r5,r4,21cc8 <__umodsi3+0x18>
   21ce0:	18000626 	beq	r3,zero,21cfc <__umodsi3+0x4c>
   21ce4:	1806d07a 	srli	r3,r3,1
   21ce8:	11400136 	bltu	r2,r5,21cf0 <__umodsi3+0x40>
   21cec:	1145c83a 	sub	r2,r2,r5
   21cf0:	280ad07a 	srli	r5,r5,1
   21cf4:	183ffb1e 	bne	r3,zero,21ce4 <__umodsi3+0x34>
   21cf8:	f800283a 	ret
   21cfc:	f800283a 	ret
   21d00:	00c00044 	movi	r3,1
   21d04:	003ff706 	br	21ce4 <__umodsi3+0x34>

00021d08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21d08:	defff904 	addi	sp,sp,-28
   21d0c:	dfc00615 	stw	ra,24(sp)
   21d10:	df000515 	stw	fp,20(sp)
   21d14:	df000504 	addi	fp,sp,20
   21d18:	e13ffc15 	stw	r4,-16(fp)
   21d1c:	e17ffd15 	stw	r5,-12(fp)
   21d20:	e1bffe15 	stw	r6,-8(fp)
   21d24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   21d28:	e0800217 	ldw	r2,8(fp)
   21d2c:	d8800015 	stw	r2,0(sp)
   21d30:	e1ffff17 	ldw	r7,-4(fp)
   21d34:	e1bffe17 	ldw	r6,-8(fp)
   21d38:	e17ffd17 	ldw	r5,-12(fp)
   21d3c:	e13ffc17 	ldw	r4,-16(fp)
   21d40:	0021eb80 	call	21eb8 <alt_iic_isr_register>
}  
   21d44:	e037883a 	mov	sp,fp
   21d48:	dfc00117 	ldw	ra,4(sp)
   21d4c:	df000017 	ldw	fp,0(sp)
   21d50:	dec00204 	addi	sp,sp,8
   21d54:	f800283a 	ret

00021d58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   21d58:	defff904 	addi	sp,sp,-28
   21d5c:	df000615 	stw	fp,24(sp)
   21d60:	df000604 	addi	fp,sp,24
   21d64:	e13ffe15 	stw	r4,-8(fp)
   21d68:	e17fff15 	stw	r5,-4(fp)
   21d6c:	e0bfff17 	ldw	r2,-4(fp)
   21d70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21d74:	0005303a 	rdctl	r2,status
   21d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21d7c:	e0fffb17 	ldw	r3,-20(fp)
   21d80:	00bfff84 	movi	r2,-2
   21d84:	1884703a 	and	r2,r3,r2
   21d88:	1001703a 	wrctl	status,r2
  
  return context;
   21d8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21d90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   21d94:	00c00044 	movi	r3,1
   21d98:	e0bffa17 	ldw	r2,-24(fp)
   21d9c:	1884983a 	sll	r2,r3,r2
   21da0:	1007883a 	mov	r3,r2
   21da4:	d0a0f017 	ldw	r2,-31808(gp)
   21da8:	1884b03a 	or	r2,r3,r2
   21dac:	d0a0f015 	stw	r2,-31808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21db0:	d0a0f017 	ldw	r2,-31808(gp)
   21db4:	100170fa 	wrctl	ienable,r2
   21db8:	e0bffc17 	ldw	r2,-16(fp)
   21dbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21dc0:	e0bffd17 	ldw	r2,-12(fp)
   21dc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21dc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   21dcc:	0001883a 	nop
}
   21dd0:	e037883a 	mov	sp,fp
   21dd4:	df000017 	ldw	fp,0(sp)
   21dd8:	dec00104 	addi	sp,sp,4
   21ddc:	f800283a 	ret

00021de0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   21de0:	defff904 	addi	sp,sp,-28
   21de4:	df000615 	stw	fp,24(sp)
   21de8:	df000604 	addi	fp,sp,24
   21dec:	e13ffe15 	stw	r4,-8(fp)
   21df0:	e17fff15 	stw	r5,-4(fp)
   21df4:	e0bfff17 	ldw	r2,-4(fp)
   21df8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21dfc:	0005303a 	rdctl	r2,status
   21e00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21e04:	e0fffb17 	ldw	r3,-20(fp)
   21e08:	00bfff84 	movi	r2,-2
   21e0c:	1884703a 	and	r2,r3,r2
   21e10:	1001703a 	wrctl	status,r2
  
  return context;
   21e14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21e18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   21e1c:	00c00044 	movi	r3,1
   21e20:	e0bffa17 	ldw	r2,-24(fp)
   21e24:	1884983a 	sll	r2,r3,r2
   21e28:	0084303a 	nor	r2,zero,r2
   21e2c:	1007883a 	mov	r3,r2
   21e30:	d0a0f017 	ldw	r2,-31808(gp)
   21e34:	1884703a 	and	r2,r3,r2
   21e38:	d0a0f015 	stw	r2,-31808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21e3c:	d0a0f017 	ldw	r2,-31808(gp)
   21e40:	100170fa 	wrctl	ienable,r2
   21e44:	e0bffc17 	ldw	r2,-16(fp)
   21e48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e4c:	e0bffd17 	ldw	r2,-12(fp)
   21e50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21e54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   21e58:	0001883a 	nop
}
   21e5c:	e037883a 	mov	sp,fp
   21e60:	df000017 	ldw	fp,0(sp)
   21e64:	dec00104 	addi	sp,sp,4
   21e68:	f800283a 	ret

00021e6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   21e6c:	defffc04 	addi	sp,sp,-16
   21e70:	df000315 	stw	fp,12(sp)
   21e74:	df000304 	addi	fp,sp,12
   21e78:	e13ffe15 	stw	r4,-8(fp)
   21e7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21e80:	000530fa 	rdctl	r2,ienable
   21e84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   21e88:	00c00044 	movi	r3,1
   21e8c:	e0bfff17 	ldw	r2,-4(fp)
   21e90:	1884983a 	sll	r2,r3,r2
   21e94:	1007883a 	mov	r3,r2
   21e98:	e0bffd17 	ldw	r2,-12(fp)
   21e9c:	1884703a 	and	r2,r3,r2
   21ea0:	1004c03a 	cmpne	r2,r2,zero
   21ea4:	10803fcc 	andi	r2,r2,255
}
   21ea8:	e037883a 	mov	sp,fp
   21eac:	df000017 	ldw	fp,0(sp)
   21eb0:	dec00104 	addi	sp,sp,4
   21eb4:	f800283a 	ret

00021eb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21eb8:	defff504 	addi	sp,sp,-44
   21ebc:	dfc00a15 	stw	ra,40(sp)
   21ec0:	df000915 	stw	fp,36(sp)
   21ec4:	df000904 	addi	fp,sp,36
   21ec8:	e13ffc15 	stw	r4,-16(fp)
   21ecc:	e17ffd15 	stw	r5,-12(fp)
   21ed0:	e1bffe15 	stw	r6,-8(fp)
   21ed4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   21ed8:	00bffa84 	movi	r2,-22
   21edc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21ee0:	e0bffd17 	ldw	r2,-12(fp)
   21ee4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21ee8:	e0bff817 	ldw	r2,-32(fp)
   21eec:	10800808 	cmpgei	r2,r2,32
   21ef0:	1000271e 	bne	r2,zero,21f90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ef4:	0005303a 	rdctl	r2,status
   21ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21efc:	e0fffb17 	ldw	r3,-20(fp)
   21f00:	00bfff84 	movi	r2,-2
   21f04:	1884703a 	and	r2,r3,r2
   21f08:	1001703a 	wrctl	status,r2
  
  return context;
   21f0c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   21f10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   21f14:	008000b4 	movhi	r2,2
   21f18:	10914b04 	addi	r2,r2,17708
   21f1c:	e0fff817 	ldw	r3,-32(fp)
   21f20:	180690fa 	slli	r3,r3,3
   21f24:	10c5883a 	add	r2,r2,r3
   21f28:	e0fffe17 	ldw	r3,-8(fp)
   21f2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   21f30:	008000b4 	movhi	r2,2
   21f34:	10914b04 	addi	r2,r2,17708
   21f38:	e0fff817 	ldw	r3,-32(fp)
   21f3c:	180690fa 	slli	r3,r3,3
   21f40:	10c5883a 	add	r2,r2,r3
   21f44:	10800104 	addi	r2,r2,4
   21f48:	e0ffff17 	ldw	r3,-4(fp)
   21f4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21f50:	e0bffe17 	ldw	r2,-8(fp)
   21f54:	10000526 	beq	r2,zero,21f6c <alt_iic_isr_register+0xb4>
   21f58:	e0bff817 	ldw	r2,-32(fp)
   21f5c:	100b883a 	mov	r5,r2
   21f60:	e13ffc17 	ldw	r4,-16(fp)
   21f64:	0021d580 	call	21d58 <alt_ic_irq_enable>
   21f68:	00000406 	br	21f7c <alt_iic_isr_register+0xc4>
   21f6c:	e0bff817 	ldw	r2,-32(fp)
   21f70:	100b883a 	mov	r5,r2
   21f74:	e13ffc17 	ldw	r4,-16(fp)
   21f78:	0021de00 	call	21de0 <alt_ic_irq_disable>
   21f7c:	e0bff715 	stw	r2,-36(fp)
   21f80:	e0bffa17 	ldw	r2,-24(fp)
   21f84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21f88:	e0bff917 	ldw	r2,-28(fp)
   21f8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   21f90:	e0bff717 	ldw	r2,-36(fp)
}
   21f94:	e037883a 	mov	sp,fp
   21f98:	dfc00117 	ldw	ra,4(sp)
   21f9c:	df000017 	ldw	fp,0(sp)
   21fa0:	dec00204 	addi	sp,sp,8
   21fa4:	f800283a 	ret

00021fa8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   21fa8:	defffc04 	addi	sp,sp,-16
   21fac:	df000315 	stw	fp,12(sp)
   21fb0:	df000304 	addi	fp,sp,12
   21fb4:	e13ffd15 	stw	r4,-12(fp)
   21fb8:	e17ffe15 	stw	r5,-8(fp)
   21fbc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   21fc0:	e0fffe17 	ldw	r3,-8(fp)
   21fc4:	e0bffd17 	ldw	r2,-12(fp)
   21fc8:	18800c26 	beq	r3,r2,21ffc <alt_load_section+0x54>
  {
    while( to != end )
   21fcc:	00000806 	br	21ff0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   21fd0:	e0bffe17 	ldw	r2,-8(fp)
   21fd4:	10c00104 	addi	r3,r2,4
   21fd8:	e0fffe15 	stw	r3,-8(fp)
   21fdc:	e0fffd17 	ldw	r3,-12(fp)
   21fe0:	19000104 	addi	r4,r3,4
   21fe4:	e13ffd15 	stw	r4,-12(fp)
   21fe8:	18c00017 	ldw	r3,0(r3)
   21fec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   21ff0:	e0fffe17 	ldw	r3,-8(fp)
   21ff4:	e0bfff17 	ldw	r2,-4(fp)
   21ff8:	18bff51e 	bne	r3,r2,21fd0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   21ffc:	0001883a 	nop
   22000:	e037883a 	mov	sp,fp
   22004:	df000017 	ldw	fp,0(sp)
   22008:	dec00104 	addi	sp,sp,4
   2200c:	f800283a 	ret

00022010 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   22010:	defffe04 	addi	sp,sp,-8
   22014:	dfc00115 	stw	ra,4(sp)
   22018:	df000015 	stw	fp,0(sp)
   2201c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22020:	018000b4 	movhi	r6,2
   22024:	31905504 	addi	r6,r6,16724
   22028:	014000b4 	movhi	r5,2
   2202c:	294f7504 	addi	r5,r5,15828
   22030:	010000b4 	movhi	r4,2
   22034:	21105504 	addi	r4,r4,16724
   22038:	0021fa80 	call	21fa8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2203c:	018000b4 	movhi	r6,2
   22040:	31809104 	addi	r6,r6,580
   22044:	014000b4 	movhi	r5,2
   22048:	29400804 	addi	r5,r5,32
   2204c:	010000b4 	movhi	r4,2
   22050:	21000804 	addi	r4,r4,32
   22054:	0021fa80 	call	21fa8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   22058:	018000b4 	movhi	r6,2
   2205c:	318f7504 	addi	r6,r6,15828
   22060:	014000b4 	movhi	r5,2
   22064:	294de404 	addi	r5,r5,14224
   22068:	010000b4 	movhi	r4,2
   2206c:	210de404 	addi	r4,r4,14224
   22070:	0021fa80 	call	21fa8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   22074:	00228c80 	call	228c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   22078:	0022ab40 	call	22ab4 <alt_icache_flush_all>
}
   2207c:	0001883a 	nop
   22080:	e037883a 	mov	sp,fp
   22084:	dfc00117 	ldw	ra,4(sp)
   22088:	df000017 	ldw	fp,0(sp)
   2208c:	dec00204 	addi	sp,sp,8
   22090:	f800283a 	ret

00022094 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   22094:	defffd04 	addi	sp,sp,-12
   22098:	dfc00215 	stw	ra,8(sp)
   2209c:	df000115 	stw	fp,4(sp)
   220a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   220a4:	0009883a 	mov	r4,zero
   220a8:	00222a80 	call	222a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   220ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   220b0:	00222e00 	call	222e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   220b4:	018000b4 	movhi	r6,2
   220b8:	318f6804 	addi	r6,r6,15776
   220bc:	014000b4 	movhi	r5,2
   220c0:	294f6804 	addi	r5,r5,15776
   220c4:	010000b4 	movhi	r4,2
   220c8:	210f6804 	addi	r4,r4,15776
   220cc:	0022c480 	call	22c48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   220d0:	00229f40 	call	229f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   220d4:	010000b4 	movhi	r4,2
   220d8:	210a9504 	addi	r4,r4,10836
   220dc:	00234100 	call	23410 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   220e0:	d0a0f117 	ldw	r2,-31804(gp)
   220e4:	d0e0f217 	ldw	r3,-31800(gp)
   220e8:	d120f317 	ldw	r4,-31796(gp)
   220ec:	200d883a 	mov	r6,r4
   220f0:	180b883a 	mov	r5,r3
   220f4:	1009883a 	mov	r4,r2
   220f8:	00205840 	call	20584 <main>
   220fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   22100:	01000044 	movi	r4,1
   22104:	00227f80 	call	227f8 <close>
  exit (result);
   22108:	e13fff17 	ldw	r4,-4(fp)
   2210c:	00234240 	call	23424 <exit>

00022110 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   22110:	defffd04 	addi	sp,sp,-12
   22114:	dfc00215 	stw	ra,8(sp)
   22118:	df000115 	stw	fp,4(sp)
   2211c:	df000104 	addi	fp,sp,4
   22120:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   22124:	e13fff17 	ldw	r4,-4(fp)
   22128:	00226640 	call	22664 <alt_busy_sleep>
}
   2212c:	e037883a 	mov	sp,fp
   22130:	dfc00117 	ldw	ra,4(sp)
   22134:	df000017 	ldw	fp,0(sp)
   22138:	dec00204 	addi	sp,sp,8
   2213c:	f800283a 	ret

00022140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22140:	defffe04 	addi	sp,sp,-8
   22144:	dfc00115 	stw	ra,4(sp)
   22148:	df000015 	stw	fp,0(sp)
   2214c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22150:	d0a00817 	ldw	r2,-32736(gp)
   22154:	10000326 	beq	r2,zero,22164 <alt_get_errno+0x24>
   22158:	d0a00817 	ldw	r2,-32736(gp)
   2215c:	103ee83a 	callr	r2
   22160:	00000106 	br	22168 <alt_get_errno+0x28>
   22164:	d0a0ef04 	addi	r2,gp,-31812
}
   22168:	e037883a 	mov	sp,fp
   2216c:	dfc00117 	ldw	ra,4(sp)
   22170:	df000017 	ldw	fp,0(sp)
   22174:	dec00204 	addi	sp,sp,8
   22178:	f800283a 	ret

0002217c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2217c:	defff904 	addi	sp,sp,-28
   22180:	dfc00615 	stw	ra,24(sp)
   22184:	df000515 	stw	fp,20(sp)
   22188:	df000504 	addi	fp,sp,20
   2218c:	e13ffd15 	stw	r4,-12(fp)
   22190:	e17ffe15 	stw	r5,-8(fp)
   22194:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22198:	e0bffd17 	ldw	r2,-12(fp)
   2219c:	10000616 	blt	r2,zero,221b8 <write+0x3c>
   221a0:	e0bffd17 	ldw	r2,-12(fp)
   221a4:	10c00324 	muli	r3,r2,12
   221a8:	008000b4 	movhi	r2,2
   221ac:	108fea04 	addi	r2,r2,16296
   221b0:	1885883a 	add	r2,r3,r2
   221b4:	00000106 	br	221bc <write+0x40>
   221b8:	0005883a 	mov	r2,zero
   221bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   221c0:	e0bffb17 	ldw	r2,-20(fp)
   221c4:	10002126 	beq	r2,zero,2224c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   221c8:	e0bffb17 	ldw	r2,-20(fp)
   221cc:	10800217 	ldw	r2,8(r2)
   221d0:	108000cc 	andi	r2,r2,3
   221d4:	10001826 	beq	r2,zero,22238 <write+0xbc>
   221d8:	e0bffb17 	ldw	r2,-20(fp)
   221dc:	10800017 	ldw	r2,0(r2)
   221e0:	10800617 	ldw	r2,24(r2)
   221e4:	10001426 	beq	r2,zero,22238 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   221e8:	e0bffb17 	ldw	r2,-20(fp)
   221ec:	10800017 	ldw	r2,0(r2)
   221f0:	10800617 	ldw	r2,24(r2)
   221f4:	e0ffff17 	ldw	r3,-4(fp)
   221f8:	180d883a 	mov	r6,r3
   221fc:	e17ffe17 	ldw	r5,-8(fp)
   22200:	e13ffb17 	ldw	r4,-20(fp)
   22204:	103ee83a 	callr	r2
   22208:	e0bffc15 	stw	r2,-16(fp)
   2220c:	e0bffc17 	ldw	r2,-16(fp)
   22210:	1000070e 	bge	r2,zero,22230 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   22214:	00221400 	call	22140 <alt_get_errno>
   22218:	1007883a 	mov	r3,r2
   2221c:	e0bffc17 	ldw	r2,-16(fp)
   22220:	0085c83a 	sub	r2,zero,r2
   22224:	18800015 	stw	r2,0(r3)
        return -1;
   22228:	00bfffc4 	movi	r2,-1
   2222c:	00000c06 	br	22260 <write+0xe4>
      }
      return rval;
   22230:	e0bffc17 	ldw	r2,-16(fp)
   22234:	00000a06 	br	22260 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   22238:	00221400 	call	22140 <alt_get_errno>
   2223c:	1007883a 	mov	r3,r2
   22240:	00800344 	movi	r2,13
   22244:	18800015 	stw	r2,0(r3)
   22248:	00000406 	br	2225c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2224c:	00221400 	call	22140 <alt_get_errno>
   22250:	1007883a 	mov	r3,r2
   22254:	00801444 	movi	r2,81
   22258:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2225c:	00bfffc4 	movi	r2,-1
}
   22260:	e037883a 	mov	sp,fp
   22264:	dfc00117 	ldw	ra,4(sp)
   22268:	df000017 	ldw	fp,0(sp)
   2226c:	dec00204 	addi	sp,sp,8
   22270:	f800283a 	ret

00022274 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22274:	defffd04 	addi	sp,sp,-12
   22278:	dfc00215 	stw	ra,8(sp)
   2227c:	df000115 	stw	fp,4(sp)
   22280:	df000104 	addi	fp,sp,4
   22284:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   22288:	d1600504 	addi	r5,gp,-32748
   2228c:	e13fff17 	ldw	r4,-4(fp)
   22290:	00229500 	call	22950 <alt_dev_llist_insert>
}
   22294:	e037883a 	mov	sp,fp
   22298:	dfc00117 	ldw	ra,4(sp)
   2229c:	df000017 	ldw	fp,0(sp)
   222a0:	dec00204 	addi	sp,sp,8
   222a4:	f800283a 	ret

000222a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   222a8:	defffd04 	addi	sp,sp,-12
   222ac:	dfc00215 	stw	ra,8(sp)
   222b0:	df000115 	stw	fp,4(sp)
   222b4:	df000104 	addi	fp,sp,4
   222b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   222bc:	00231200 	call	23120 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   222c0:	00800044 	movi	r2,1
   222c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   222c8:	0001883a 	nop
   222cc:	e037883a 	mov	sp,fp
   222d0:	dfc00117 	ldw	ra,4(sp)
   222d4:	df000017 	ldw	fp,0(sp)
   222d8:	dec00204 	addi	sp,sp,8
   222dc:	f800283a 	ret

000222e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   222e0:	defffe04 	addi	sp,sp,-8
   222e4:	dfc00115 	stw	ra,4(sp)
   222e8:	df000015 	stw	fp,0(sp)
   222ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   222f0:	01c0fa04 	movi	r7,1000
   222f4:	01800044 	movi	r6,1
   222f8:	000b883a 	mov	r5,zero
   222fc:	01000134 	movhi	r4,4
   22300:	21041004 	addi	r4,r4,4160
   22304:	00225e80 	call	225e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( SYS_MEL, SYS_MEL);
    ALTERA_AVALON_TIMER_INIT ( SYS_SEC, SYS_SEC);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   22308:	010000b4 	movhi	r4,2
   2230c:	210fd504 	addi	r4,r4,16212
   22310:	00222740 	call	22274 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   22314:	0001883a 	nop
}
   22318:	0001883a 	nop
   2231c:	e037883a 	mov	sp,fp
   22320:	dfc00117 	ldw	ra,4(sp)
   22324:	df000017 	ldw	fp,0(sp)
   22328:	dec00204 	addi	sp,sp,8
   2232c:	f800283a 	ret

00022330 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22330:	defffa04 	addi	sp,sp,-24
   22334:	dfc00515 	stw	ra,20(sp)
   22338:	df000415 	stw	fp,16(sp)
   2233c:	df000404 	addi	fp,sp,16
   22340:	e13ffd15 	stw	r4,-12(fp)
   22344:	e17ffe15 	stw	r5,-8(fp)
   22348:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2234c:	e0bffd17 	ldw	r2,-12(fp)
   22350:	10800017 	ldw	r2,0(r2)
   22354:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22358:	e0bffc17 	ldw	r2,-16(fp)
   2235c:	10c00a04 	addi	r3,r2,40
   22360:	e0bffd17 	ldw	r2,-12(fp)
   22364:	10800217 	ldw	r2,8(r2)
   22368:	100f883a 	mov	r7,r2
   2236c:	e1bfff17 	ldw	r6,-4(fp)
   22370:	e17ffe17 	ldw	r5,-8(fp)
   22374:	1809883a 	mov	r4,r3
   22378:	00223f00 	call	223f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2237c:	e037883a 	mov	sp,fp
   22380:	dfc00117 	ldw	ra,4(sp)
   22384:	df000017 	ldw	fp,0(sp)
   22388:	dec00204 	addi	sp,sp,8
   2238c:	f800283a 	ret

00022390 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22390:	defffa04 	addi	sp,sp,-24
   22394:	dfc00515 	stw	ra,20(sp)
   22398:	df000415 	stw	fp,16(sp)
   2239c:	df000404 	addi	fp,sp,16
   223a0:	e13ffd15 	stw	r4,-12(fp)
   223a4:	e17ffe15 	stw	r5,-8(fp)
   223a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   223ac:	e0bffd17 	ldw	r2,-12(fp)
   223b0:	10800017 	ldw	r2,0(r2)
   223b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   223b8:	e0bffc17 	ldw	r2,-16(fp)
   223bc:	10c00a04 	addi	r3,r2,40
   223c0:	e0bffd17 	ldw	r2,-12(fp)
   223c4:	10800217 	ldw	r2,8(r2)
   223c8:	100f883a 	mov	r7,r2
   223cc:	e1bfff17 	ldw	r6,-4(fp)
   223d0:	e17ffe17 	ldw	r5,-8(fp)
   223d4:	1809883a 	mov	r4,r3
   223d8:	00224dc0 	call	224dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   223dc:	e037883a 	mov	sp,fp
   223e0:	dfc00117 	ldw	ra,4(sp)
   223e4:	df000017 	ldw	fp,0(sp)
   223e8:	dec00204 	addi	sp,sp,8
   223ec:	f800283a 	ret

000223f0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   223f0:	defff704 	addi	sp,sp,-36
   223f4:	df000815 	stw	fp,32(sp)
   223f8:	df000804 	addi	fp,sp,32
   223fc:	e13ffc15 	stw	r4,-16(fp)
   22400:	e17ffd15 	stw	r5,-12(fp)
   22404:	e1bffe15 	stw	r6,-8(fp)
   22408:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2240c:	e0bffc17 	ldw	r2,-16(fp)
   22410:	10800017 	ldw	r2,0(r2)
   22414:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   22418:	e0bffd17 	ldw	r2,-12(fp)
   2241c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   22420:	e0bffe17 	ldw	r2,-8(fp)
   22424:	e0fffd17 	ldw	r3,-12(fp)
   22428:	1885883a 	add	r2,r3,r2
   2242c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   22430:	00001206 	br	2247c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   22434:	e0bff917 	ldw	r2,-28(fp)
   22438:	10800037 	ldwio	r2,0(r2)
   2243c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   22440:	e0bffb17 	ldw	r2,-20(fp)
   22444:	10a0000c 	andi	r2,r2,32768
   22448:	10000626 	beq	r2,zero,22464 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2244c:	e0bff817 	ldw	r2,-32(fp)
   22450:	10c00044 	addi	r3,r2,1
   22454:	e0fff815 	stw	r3,-32(fp)
   22458:	e0fffb17 	ldw	r3,-20(fp)
   2245c:	10c00005 	stb	r3,0(r2)
   22460:	00000606 	br	2247c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   22464:	e0fff817 	ldw	r3,-32(fp)
   22468:	e0bffd17 	ldw	r2,-12(fp)
   2246c:	1880071e 	bne	r3,r2,2248c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   22470:	e0bfff17 	ldw	r2,-4(fp)
   22474:	1090000c 	andi	r2,r2,16384
   22478:	1000061e 	bne	r2,zero,22494 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   2247c:	e0fff817 	ldw	r3,-32(fp)
   22480:	e0bffa17 	ldw	r2,-24(fp)
   22484:	18bfeb36 	bltu	r3,r2,22434 <altera_avalon_jtag_uart_read+0x44>
   22488:	00000306 	br	22498 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   2248c:	0001883a 	nop
   22490:	00000106 	br	22498 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   22494:	0001883a 	nop
    
  }

  if (ptr != buffer)
   22498:	e0fff817 	ldw	r3,-32(fp)
   2249c:	e0bffd17 	ldw	r2,-12(fp)
   224a0:	18800426 	beq	r3,r2,224b4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   224a4:	e0fff817 	ldw	r3,-32(fp)
   224a8:	e0bffd17 	ldw	r2,-12(fp)
   224ac:	1885c83a 	sub	r2,r3,r2
   224b0:	00000606 	br	224cc <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   224b4:	e0bfff17 	ldw	r2,-4(fp)
   224b8:	1090000c 	andi	r2,r2,16384
   224bc:	10000226 	beq	r2,zero,224c8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   224c0:	00bffd44 	movi	r2,-11
   224c4:	00000106 	br	224cc <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   224c8:	00bffec4 	movi	r2,-5
}
   224cc:	e037883a 	mov	sp,fp
   224d0:	df000017 	ldw	fp,0(sp)
   224d4:	dec00104 	addi	sp,sp,4
   224d8:	f800283a 	ret

000224dc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   224dc:	defff904 	addi	sp,sp,-28
   224e0:	df000615 	stw	fp,24(sp)
   224e4:	df000604 	addi	fp,sp,24
   224e8:	e13ffc15 	stw	r4,-16(fp)
   224ec:	e17ffd15 	stw	r5,-12(fp)
   224f0:	e1bffe15 	stw	r6,-8(fp)
   224f4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   224f8:	e0bffc17 	ldw	r2,-16(fp)
   224fc:	10800017 	ldw	r2,0(r2)
   22500:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   22504:	e0bffe17 	ldw	r2,-8(fp)
   22508:	e0fffd17 	ldw	r3,-12(fp)
   2250c:	1885883a 	add	r2,r3,r2
   22510:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   22514:	00000e06 	br	22550 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   22518:	e0bffa17 	ldw	r2,-24(fp)
   2251c:	10800104 	addi	r2,r2,4
   22520:	10800037 	ldwio	r2,0(r2)
   22524:	10bfffec 	andhi	r2,r2,65535
   22528:	10000926 	beq	r2,zero,22550 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   2252c:	e0fffa17 	ldw	r3,-24(fp)
   22530:	e0bffd17 	ldw	r2,-12(fp)
   22534:	11000044 	addi	r4,r2,1
   22538:	e13ffd15 	stw	r4,-12(fp)
   2253c:	10800003 	ldbu	r2,0(r2)
   22540:	10803fcc 	andi	r2,r2,255
   22544:	1080201c 	xori	r2,r2,128
   22548:	10bfe004 	addi	r2,r2,-128
   2254c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   22550:	e0fffd17 	ldw	r3,-12(fp)
   22554:	e0bffb17 	ldw	r2,-20(fp)
   22558:	18bfef36 	bltu	r3,r2,22518 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   2255c:	e0bffe17 	ldw	r2,-8(fp)
}
   22560:	e037883a 	mov	sp,fp
   22564:	df000017 	ldw	fp,0(sp)
   22568:	dec00104 	addi	sp,sp,4
   2256c:	f800283a 	ret

00022570 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22570:	defffa04 	addi	sp,sp,-24
   22574:	dfc00515 	stw	ra,20(sp)
   22578:	df000415 	stw	fp,16(sp)
   2257c:	df000404 	addi	fp,sp,16
   22580:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22584:	0007883a 	mov	r3,zero
   22588:	e0bfff17 	ldw	r2,-4(fp)
   2258c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   22590:	e0bfff17 	ldw	r2,-4(fp)
   22594:	10800104 	addi	r2,r2,4
   22598:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2259c:	0005303a 	rdctl	r2,status
   225a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   225a4:	e0fffd17 	ldw	r3,-12(fp)
   225a8:	00bfff84 	movi	r2,-2
   225ac:	1884703a 	and	r2,r3,r2
   225b0:	1001703a 	wrctl	status,r2
  
  return context;
   225b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   225b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   225bc:	00230180 	call	23018 <alt_tick>
   225c0:	e0bffc17 	ldw	r2,-16(fp)
   225c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   225c8:	e0bffe17 	ldw	r2,-8(fp)
   225cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   225d0:	0001883a 	nop
   225d4:	e037883a 	mov	sp,fp
   225d8:	dfc00117 	ldw	ra,4(sp)
   225dc:	df000017 	ldw	fp,0(sp)
   225e0:	dec00204 	addi	sp,sp,8
   225e4:	f800283a 	ret

000225e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   225e8:	defff804 	addi	sp,sp,-32
   225ec:	dfc00715 	stw	ra,28(sp)
   225f0:	df000615 	stw	fp,24(sp)
   225f4:	df000604 	addi	fp,sp,24
   225f8:	e13ffc15 	stw	r4,-16(fp)
   225fc:	e17ffd15 	stw	r5,-12(fp)
   22600:	e1bffe15 	stw	r6,-8(fp)
   22604:	e1ffff15 	stw	r7,-4(fp)
   22608:	e0bfff17 	ldw	r2,-4(fp)
   2260c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22610:	d0a0f517 	ldw	r2,-31788(gp)
   22614:	1000021e 	bne	r2,zero,22620 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   22618:	e0bffb17 	ldw	r2,-20(fp)
   2261c:	d0a0f515 	stw	r2,-31788(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22620:	e0bffc17 	ldw	r2,-16(fp)
   22624:	10800104 	addi	r2,r2,4
   22628:	00c001c4 	movi	r3,7
   2262c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22630:	d8000015 	stw	zero,0(sp)
   22634:	e1fffc17 	ldw	r7,-16(fp)
   22638:	018000b4 	movhi	r6,2
   2263c:	31895c04 	addi	r6,r6,9584
   22640:	e17ffe17 	ldw	r5,-8(fp)
   22644:	e13ffd17 	ldw	r4,-12(fp)
   22648:	0021d080 	call	21d08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2264c:	0001883a 	nop
   22650:	e037883a 	mov	sp,fp
   22654:	dfc00117 	ldw	ra,4(sp)
   22658:	df000017 	ldw	fp,0(sp)
   2265c:	dec00204 	addi	sp,sp,8
   22660:	f800283a 	ret

00022664 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   22664:	defffa04 	addi	sp,sp,-24
   22668:	dfc00515 	stw	ra,20(sp)
   2266c:	df000415 	stw	fp,16(sp)
   22670:	df000404 	addi	fp,sp,16
   22674:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   22678:	008000c4 	movi	r2,3
   2267c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   22680:	e0fffd17 	ldw	r3,-12(fp)
   22684:	008003f4 	movhi	r2,15
   22688:	10909004 	addi	r2,r2,16960
   2268c:	1885383a 	mul	r2,r3,r2
   22690:	100b883a 	mov	r5,r2
   22694:	0100bef4 	movhi	r4,763
   22698:	213c2004 	addi	r4,r4,-3968
   2269c:	0021c4c0 	call	21c4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   226a0:	100b883a 	mov	r5,r2
   226a4:	01200034 	movhi	r4,32768
   226a8:	213fffc4 	addi	r4,r4,-1
   226ac:	0021c4c0 	call	21c4c <__udivsi3>
   226b0:	100b883a 	mov	r5,r2
   226b4:	e13fff17 	ldw	r4,-4(fp)
   226b8:	0021c4c0 	call	21c4c <__udivsi3>
   226bc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   226c0:	e0bffe17 	ldw	r2,-8(fp)
   226c4:	10002a26 	beq	r2,zero,22770 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   226c8:	e03ffc15 	stw	zero,-16(fp)
   226cc:	00001706 	br	2272c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   226d0:	00a00034 	movhi	r2,32768
   226d4:	10bfffc4 	addi	r2,r2,-1
   226d8:	10bfffc4 	addi	r2,r2,-1
   226dc:	103ffe1e 	bne	r2,zero,226d8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   226e0:	e0fffd17 	ldw	r3,-12(fp)
   226e4:	008003f4 	movhi	r2,15
   226e8:	10909004 	addi	r2,r2,16960
   226ec:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   226f0:	100b883a 	mov	r5,r2
   226f4:	0100bef4 	movhi	r4,763
   226f8:	213c2004 	addi	r4,r4,-3968
   226fc:	0021c4c0 	call	21c4c <__udivsi3>
   22700:	100b883a 	mov	r5,r2
   22704:	01200034 	movhi	r4,32768
   22708:	213fffc4 	addi	r4,r4,-1
   2270c:	0021c4c0 	call	21c4c <__udivsi3>
   22710:	1007883a 	mov	r3,r2
   22714:	e0bfff17 	ldw	r2,-4(fp)
   22718:	10c5c83a 	sub	r2,r2,r3
   2271c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   22720:	e0bffc17 	ldw	r2,-16(fp)
   22724:	10800044 	addi	r2,r2,1
   22728:	e0bffc15 	stw	r2,-16(fp)
   2272c:	e0fffc17 	ldw	r3,-16(fp)
   22730:	e0bffe17 	ldw	r2,-8(fp)
   22734:	18bfe616 	blt	r3,r2,226d0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22738:	e0fffd17 	ldw	r3,-12(fp)
   2273c:	008003f4 	movhi	r2,15
   22740:	10909004 	addi	r2,r2,16960
   22744:	1885383a 	mul	r2,r3,r2
   22748:	100b883a 	mov	r5,r2
   2274c:	0100bef4 	movhi	r4,763
   22750:	213c2004 	addi	r4,r4,-3968
   22754:	0021c4c0 	call	21c4c <__udivsi3>
   22758:	1007883a 	mov	r3,r2
   2275c:	e0bfff17 	ldw	r2,-4(fp)
   22760:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   22764:	10bfffc4 	addi	r2,r2,-1
   22768:	103ffe1e 	bne	r2,zero,22764 <alt_busy_sleep+0x100>
   2276c:	00000d06 	br	227a4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22770:	e0fffd17 	ldw	r3,-12(fp)
   22774:	008003f4 	movhi	r2,15
   22778:	10909004 	addi	r2,r2,16960
   2277c:	1885383a 	mul	r2,r3,r2
   22780:	100b883a 	mov	r5,r2
   22784:	0100bef4 	movhi	r4,763
   22788:	213c2004 	addi	r4,r4,-3968
   2278c:	0021c4c0 	call	21c4c <__udivsi3>
   22790:	1007883a 	mov	r3,r2
   22794:	e0bfff17 	ldw	r2,-4(fp)
   22798:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2279c:	10bfffc4 	addi	r2,r2,-1
   227a0:	00bffe16 	blt	zero,r2,2279c <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   227a4:	0005883a 	mov	r2,zero
}
   227a8:	e037883a 	mov	sp,fp
   227ac:	dfc00117 	ldw	ra,4(sp)
   227b0:	df000017 	ldw	fp,0(sp)
   227b4:	dec00204 	addi	sp,sp,8
   227b8:	f800283a 	ret

000227bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   227bc:	defffe04 	addi	sp,sp,-8
   227c0:	dfc00115 	stw	ra,4(sp)
   227c4:	df000015 	stw	fp,0(sp)
   227c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   227cc:	d0a00817 	ldw	r2,-32736(gp)
   227d0:	10000326 	beq	r2,zero,227e0 <alt_get_errno+0x24>
   227d4:	d0a00817 	ldw	r2,-32736(gp)
   227d8:	103ee83a 	callr	r2
   227dc:	00000106 	br	227e4 <alt_get_errno+0x28>
   227e0:	d0a0ef04 	addi	r2,gp,-31812
}
   227e4:	e037883a 	mov	sp,fp
   227e8:	dfc00117 	ldw	ra,4(sp)
   227ec:	df000017 	ldw	fp,0(sp)
   227f0:	dec00204 	addi	sp,sp,8
   227f4:	f800283a 	ret

000227f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   227f8:	defffb04 	addi	sp,sp,-20
   227fc:	dfc00415 	stw	ra,16(sp)
   22800:	df000315 	stw	fp,12(sp)
   22804:	df000304 	addi	fp,sp,12
   22808:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2280c:	e0bfff17 	ldw	r2,-4(fp)
   22810:	10000616 	blt	r2,zero,2282c <close+0x34>
   22814:	e0bfff17 	ldw	r2,-4(fp)
   22818:	10c00324 	muli	r3,r2,12
   2281c:	008000b4 	movhi	r2,2
   22820:	108fea04 	addi	r2,r2,16296
   22824:	1885883a 	add	r2,r3,r2
   22828:	00000106 	br	22830 <close+0x38>
   2282c:	0005883a 	mov	r2,zero
   22830:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22834:	e0bffd17 	ldw	r2,-12(fp)
   22838:	10001926 	beq	r2,zero,228a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2283c:	e0bffd17 	ldw	r2,-12(fp)
   22840:	10800017 	ldw	r2,0(r2)
   22844:	10800417 	ldw	r2,16(r2)
   22848:	10000626 	beq	r2,zero,22864 <close+0x6c>
   2284c:	e0bffd17 	ldw	r2,-12(fp)
   22850:	10800017 	ldw	r2,0(r2)
   22854:	10800417 	ldw	r2,16(r2)
   22858:	e13ffd17 	ldw	r4,-12(fp)
   2285c:	103ee83a 	callr	r2
   22860:	00000106 	br	22868 <close+0x70>
   22864:	0005883a 	mov	r2,zero
   22868:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2286c:	e13fff17 	ldw	r4,-4(fp)
   22870:	0022f180 	call	22f18 <alt_release_fd>
    if (rval < 0)
   22874:	e0bffe17 	ldw	r2,-8(fp)
   22878:	1000070e 	bge	r2,zero,22898 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2287c:	00227bc0 	call	227bc <alt_get_errno>
   22880:	1007883a 	mov	r3,r2
   22884:	e0bffe17 	ldw	r2,-8(fp)
   22888:	0085c83a 	sub	r2,zero,r2
   2288c:	18800015 	stw	r2,0(r3)
      return -1;
   22890:	00bfffc4 	movi	r2,-1
   22894:	00000706 	br	228b4 <close+0xbc>
    }
    return 0;
   22898:	0005883a 	mov	r2,zero
   2289c:	00000506 	br	228b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   228a0:	00227bc0 	call	227bc <alt_get_errno>
   228a4:	1007883a 	mov	r3,r2
   228a8:	00801444 	movi	r2,81
   228ac:	18800015 	stw	r2,0(r3)
    return -1;
   228b0:	00bfffc4 	movi	r2,-1
  }
}
   228b4:	e037883a 	mov	sp,fp
   228b8:	dfc00117 	ldw	ra,4(sp)
   228bc:	df000017 	ldw	fp,0(sp)
   228c0:	dec00204 	addi	sp,sp,8
   228c4:	f800283a 	ret

000228c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   228c8:	deffff04 	addi	sp,sp,-4
   228cc:	df000015 	stw	fp,0(sp)
   228d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   228d4:	0001883a 	nop
   228d8:	e037883a 	mov	sp,fp
   228dc:	df000017 	ldw	fp,0(sp)
   228e0:	dec00104 	addi	sp,sp,4
   228e4:	f800283a 	ret

000228e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   228e8:	defffc04 	addi	sp,sp,-16
   228ec:	df000315 	stw	fp,12(sp)
   228f0:	df000304 	addi	fp,sp,12
   228f4:	e13ffd15 	stw	r4,-12(fp)
   228f8:	e17ffe15 	stw	r5,-8(fp)
   228fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22900:	e0bfff17 	ldw	r2,-4(fp)
}
   22904:	e037883a 	mov	sp,fp
   22908:	df000017 	ldw	fp,0(sp)
   2290c:	dec00104 	addi	sp,sp,4
   22910:	f800283a 	ret

00022914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22914:	defffe04 	addi	sp,sp,-8
   22918:	dfc00115 	stw	ra,4(sp)
   2291c:	df000015 	stw	fp,0(sp)
   22920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22924:	d0a00817 	ldw	r2,-32736(gp)
   22928:	10000326 	beq	r2,zero,22938 <alt_get_errno+0x24>
   2292c:	d0a00817 	ldw	r2,-32736(gp)
   22930:	103ee83a 	callr	r2
   22934:	00000106 	br	2293c <alt_get_errno+0x28>
   22938:	d0a0ef04 	addi	r2,gp,-31812
}
   2293c:	e037883a 	mov	sp,fp
   22940:	dfc00117 	ldw	ra,4(sp)
   22944:	df000017 	ldw	fp,0(sp)
   22948:	dec00204 	addi	sp,sp,8
   2294c:	f800283a 	ret

00022950 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22950:	defffa04 	addi	sp,sp,-24
   22954:	dfc00515 	stw	ra,20(sp)
   22958:	df000415 	stw	fp,16(sp)
   2295c:	df000404 	addi	fp,sp,16
   22960:	e13ffe15 	stw	r4,-8(fp)
   22964:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22968:	e0bffe17 	ldw	r2,-8(fp)
   2296c:	10000326 	beq	r2,zero,2297c <alt_dev_llist_insert+0x2c>
   22970:	e0bffe17 	ldw	r2,-8(fp)
   22974:	10800217 	ldw	r2,8(r2)
   22978:	1000061e 	bne	r2,zero,22994 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2297c:	00229140 	call	22914 <alt_get_errno>
   22980:	1007883a 	mov	r3,r2
   22984:	00800584 	movi	r2,22
   22988:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2298c:	00bffa84 	movi	r2,-22
   22990:	00001306 	br	229e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22994:	e0bffe17 	ldw	r2,-8(fp)
   22998:	e0ffff17 	ldw	r3,-4(fp)
   2299c:	e0fffc15 	stw	r3,-16(fp)
   229a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   229a4:	e0bffd17 	ldw	r2,-12(fp)
   229a8:	e0fffc17 	ldw	r3,-16(fp)
   229ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   229b0:	e0bffc17 	ldw	r2,-16(fp)
   229b4:	10c00017 	ldw	r3,0(r2)
   229b8:	e0bffd17 	ldw	r2,-12(fp)
   229bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   229c0:	e0bffc17 	ldw	r2,-16(fp)
   229c4:	10800017 	ldw	r2,0(r2)
   229c8:	e0fffd17 	ldw	r3,-12(fp)
   229cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   229d0:	e0bffc17 	ldw	r2,-16(fp)
   229d4:	e0fffd17 	ldw	r3,-12(fp)
   229d8:	10c00015 	stw	r3,0(r2)

  return 0;  
   229dc:	0005883a 	mov	r2,zero
}
   229e0:	e037883a 	mov	sp,fp
   229e4:	dfc00117 	ldw	ra,4(sp)
   229e8:	df000017 	ldw	fp,0(sp)
   229ec:	dec00204 	addi	sp,sp,8
   229f0:	f800283a 	ret

000229f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   229f4:	defffd04 	addi	sp,sp,-12
   229f8:	dfc00215 	stw	ra,8(sp)
   229fc:	df000115 	stw	fp,4(sp)
   22a00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22a04:	008000b4 	movhi	r2,2
   22a08:	108de304 	addi	r2,r2,14220
   22a0c:	e0bfff15 	stw	r2,-4(fp)
   22a10:	00000606 	br	22a2c <_do_ctors+0x38>
        (*ctor) (); 
   22a14:	e0bfff17 	ldw	r2,-4(fp)
   22a18:	10800017 	ldw	r2,0(r2)
   22a1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22a20:	e0bfff17 	ldw	r2,-4(fp)
   22a24:	10bfff04 	addi	r2,r2,-4
   22a28:	e0bfff15 	stw	r2,-4(fp)
   22a2c:	e0ffff17 	ldw	r3,-4(fp)
   22a30:	008000b4 	movhi	r2,2
   22a34:	108de404 	addi	r2,r2,14224
   22a38:	18bff62e 	bgeu	r3,r2,22a14 <_do_ctors+0x20>
        (*ctor) (); 
}
   22a3c:	0001883a 	nop
   22a40:	e037883a 	mov	sp,fp
   22a44:	dfc00117 	ldw	ra,4(sp)
   22a48:	df000017 	ldw	fp,0(sp)
   22a4c:	dec00204 	addi	sp,sp,8
   22a50:	f800283a 	ret

00022a54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22a54:	defffd04 	addi	sp,sp,-12
   22a58:	dfc00215 	stw	ra,8(sp)
   22a5c:	df000115 	stw	fp,4(sp)
   22a60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22a64:	008000b4 	movhi	r2,2
   22a68:	108de304 	addi	r2,r2,14220
   22a6c:	e0bfff15 	stw	r2,-4(fp)
   22a70:	00000606 	br	22a8c <_do_dtors+0x38>
        (*dtor) (); 
   22a74:	e0bfff17 	ldw	r2,-4(fp)
   22a78:	10800017 	ldw	r2,0(r2)
   22a7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22a80:	e0bfff17 	ldw	r2,-4(fp)
   22a84:	10bfff04 	addi	r2,r2,-4
   22a88:	e0bfff15 	stw	r2,-4(fp)
   22a8c:	e0ffff17 	ldw	r3,-4(fp)
   22a90:	008000b4 	movhi	r2,2
   22a94:	108de404 	addi	r2,r2,14224
   22a98:	18bff62e 	bgeu	r3,r2,22a74 <_do_dtors+0x20>
        (*dtor) (); 
}
   22a9c:	0001883a 	nop
   22aa0:	e037883a 	mov	sp,fp
   22aa4:	dfc00117 	ldw	ra,4(sp)
   22aa8:	df000017 	ldw	fp,0(sp)
   22aac:	dec00204 	addi	sp,sp,8
   22ab0:	f800283a 	ret

00022ab4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22ab4:	defffe04 	addi	sp,sp,-8
   22ab8:	dfc00115 	stw	ra,4(sp)
   22abc:	df000015 	stw	fp,0(sp)
   22ac0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   22ac4:	01420004 	movi	r5,2048
   22ac8:	0009883a 	mov	r4,zero
   22acc:	00233800 	call	23380 <alt_icache_flush>
#endif
}
   22ad0:	0001883a 	nop
   22ad4:	e037883a 	mov	sp,fp
   22ad8:	dfc00117 	ldw	ra,4(sp)
   22adc:	df000017 	ldw	fp,0(sp)
   22ae0:	dec00204 	addi	sp,sp,8
   22ae4:	f800283a 	ret

00022ae8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   22ae8:	defffe04 	addi	sp,sp,-8
   22aec:	df000115 	stw	fp,4(sp)
   22af0:	df000104 	addi	fp,sp,4
   22af4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   22af8:	e0bfff17 	ldw	r2,-4(fp)
   22afc:	10bffe84 	addi	r2,r2,-6
   22b00:	10c00428 	cmpgeui	r3,r2,16
   22b04:	18001a1e 	bne	r3,zero,22b70 <alt_exception_cause_generated_bad_addr+0x88>
   22b08:	100690ba 	slli	r3,r2,2
   22b0c:	008000b4 	movhi	r2,2
   22b10:	108ac804 	addi	r2,r2,11040
   22b14:	1885883a 	add	r2,r3,r2
   22b18:	10800017 	ldw	r2,0(r2)
   22b1c:	1000683a 	jmp	r2
   22b20:	00022b60 	cmpeqi	zero,zero,2221
   22b24:	00022b60 	cmpeqi	zero,zero,2221
   22b28:	00022b70 	cmpltui	zero,zero,2221
   22b2c:	00022b70 	cmpltui	zero,zero,2221
   22b30:	00022b70 	cmpltui	zero,zero,2221
   22b34:	00022b60 	cmpeqi	zero,zero,2221
   22b38:	00022b68 	cmpgeui	zero,zero,2221
   22b3c:	00022b70 	cmpltui	zero,zero,2221
   22b40:	00022b60 	cmpeqi	zero,zero,2221
   22b44:	00022b60 	cmpeqi	zero,zero,2221
   22b48:	00022b70 	cmpltui	zero,zero,2221
   22b4c:	00022b60 	cmpeqi	zero,zero,2221
   22b50:	00022b68 	cmpgeui	zero,zero,2221
   22b54:	00022b70 	cmpltui	zero,zero,2221
   22b58:	00022b70 	cmpltui	zero,zero,2221
   22b5c:	00022b60 	cmpeqi	zero,zero,2221
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   22b60:	00800044 	movi	r2,1
   22b64:	00000306 	br	22b74 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22b68:	0005883a 	mov	r2,zero
   22b6c:	00000106 	br	22b74 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   22b70:	0005883a 	mov	r2,zero
  }
}
   22b74:	e037883a 	mov	sp,fp
   22b78:	df000017 	ldw	fp,0(sp)
   22b7c:	dec00104 	addi	sp,sp,4
   22b80:	f800283a 	ret

00022b84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22b84:	defff904 	addi	sp,sp,-28
   22b88:	dfc00615 	stw	ra,24(sp)
   22b8c:	df000515 	stw	fp,20(sp)
   22b90:	df000504 	addi	fp,sp,20
   22b94:	e13ffc15 	stw	r4,-16(fp)
   22b98:	e17ffd15 	stw	r5,-12(fp)
   22b9c:	e1bffe15 	stw	r6,-8(fp)
   22ba0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   22ba4:	e1bfff17 	ldw	r6,-4(fp)
   22ba8:	e17ffe17 	ldw	r5,-8(fp)
   22bac:	e13ffd17 	ldw	r4,-12(fp)
   22bb0:	0022dc40 	call	22dc4 <open>
   22bb4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   22bb8:	e0bffb17 	ldw	r2,-20(fp)
   22bbc:	10001c16 	blt	r2,zero,22c30 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   22bc0:	008000b4 	movhi	r2,2
   22bc4:	108fea04 	addi	r2,r2,16296
   22bc8:	e0fffb17 	ldw	r3,-20(fp)
   22bcc:	18c00324 	muli	r3,r3,12
   22bd0:	10c5883a 	add	r2,r2,r3
   22bd4:	10c00017 	ldw	r3,0(r2)
   22bd8:	e0bffc17 	ldw	r2,-16(fp)
   22bdc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22be0:	008000b4 	movhi	r2,2
   22be4:	108fea04 	addi	r2,r2,16296
   22be8:	e0fffb17 	ldw	r3,-20(fp)
   22bec:	18c00324 	muli	r3,r3,12
   22bf0:	10c5883a 	add	r2,r2,r3
   22bf4:	10800104 	addi	r2,r2,4
   22bf8:	10c00017 	ldw	r3,0(r2)
   22bfc:	e0bffc17 	ldw	r2,-16(fp)
   22c00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22c04:	008000b4 	movhi	r2,2
   22c08:	108fea04 	addi	r2,r2,16296
   22c0c:	e0fffb17 	ldw	r3,-20(fp)
   22c10:	18c00324 	muli	r3,r3,12
   22c14:	10c5883a 	add	r2,r2,r3
   22c18:	10800204 	addi	r2,r2,8
   22c1c:	10c00017 	ldw	r3,0(r2)
   22c20:	e0bffc17 	ldw	r2,-16(fp)
   22c24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22c28:	e13ffb17 	ldw	r4,-20(fp)
   22c2c:	0022f180 	call	22f18 <alt_release_fd>
  }
} 
   22c30:	0001883a 	nop
   22c34:	e037883a 	mov	sp,fp
   22c38:	dfc00117 	ldw	ra,4(sp)
   22c3c:	df000017 	ldw	fp,0(sp)
   22c40:	dec00204 	addi	sp,sp,8
   22c44:	f800283a 	ret

00022c48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22c48:	defffb04 	addi	sp,sp,-20
   22c4c:	dfc00415 	stw	ra,16(sp)
   22c50:	df000315 	stw	fp,12(sp)
   22c54:	df000304 	addi	fp,sp,12
   22c58:	e13ffd15 	stw	r4,-12(fp)
   22c5c:	e17ffe15 	stw	r5,-8(fp)
   22c60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22c64:	01c07fc4 	movi	r7,511
   22c68:	01800044 	movi	r6,1
   22c6c:	e17ffd17 	ldw	r5,-12(fp)
   22c70:	010000b4 	movhi	r4,2
   22c74:	210fed04 	addi	r4,r4,16308
   22c78:	0022b840 	call	22b84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22c7c:	01c07fc4 	movi	r7,511
   22c80:	000d883a 	mov	r6,zero
   22c84:	e17ffe17 	ldw	r5,-8(fp)
   22c88:	010000b4 	movhi	r4,2
   22c8c:	210fea04 	addi	r4,r4,16296
   22c90:	0022b840 	call	22b84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22c94:	01c07fc4 	movi	r7,511
   22c98:	01800044 	movi	r6,1
   22c9c:	e17fff17 	ldw	r5,-4(fp)
   22ca0:	010000b4 	movhi	r4,2
   22ca4:	210ff004 	addi	r4,r4,16320
   22ca8:	0022b840 	call	22b84 <alt_open_fd>
}  
   22cac:	0001883a 	nop
   22cb0:	e037883a 	mov	sp,fp
   22cb4:	dfc00117 	ldw	ra,4(sp)
   22cb8:	df000017 	ldw	fp,0(sp)
   22cbc:	dec00204 	addi	sp,sp,8
   22cc0:	f800283a 	ret

00022cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22cc4:	defffe04 	addi	sp,sp,-8
   22cc8:	dfc00115 	stw	ra,4(sp)
   22ccc:	df000015 	stw	fp,0(sp)
   22cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22cd4:	d0a00817 	ldw	r2,-32736(gp)
   22cd8:	10000326 	beq	r2,zero,22ce8 <alt_get_errno+0x24>
   22cdc:	d0a00817 	ldw	r2,-32736(gp)
   22ce0:	103ee83a 	callr	r2
   22ce4:	00000106 	br	22cec <alt_get_errno+0x28>
   22ce8:	d0a0ef04 	addi	r2,gp,-31812
}
   22cec:	e037883a 	mov	sp,fp
   22cf0:	dfc00117 	ldw	ra,4(sp)
   22cf4:	df000017 	ldw	fp,0(sp)
   22cf8:	dec00204 	addi	sp,sp,8
   22cfc:	f800283a 	ret

00022d00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22d00:	defffd04 	addi	sp,sp,-12
   22d04:	df000215 	stw	fp,8(sp)
   22d08:	df000204 	addi	fp,sp,8
   22d0c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22d10:	e0bfff17 	ldw	r2,-4(fp)
   22d14:	10800217 	ldw	r2,8(r2)
   22d18:	10d00034 	orhi	r3,r2,16384
   22d1c:	e0bfff17 	ldw	r2,-4(fp)
   22d20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22d24:	e03ffe15 	stw	zero,-8(fp)
   22d28:	00001d06 	br	22da0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22d2c:	008000b4 	movhi	r2,2
   22d30:	108fea04 	addi	r2,r2,16296
   22d34:	e0fffe17 	ldw	r3,-8(fp)
   22d38:	18c00324 	muli	r3,r3,12
   22d3c:	10c5883a 	add	r2,r2,r3
   22d40:	10c00017 	ldw	r3,0(r2)
   22d44:	e0bfff17 	ldw	r2,-4(fp)
   22d48:	10800017 	ldw	r2,0(r2)
   22d4c:	1880111e 	bne	r3,r2,22d94 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22d50:	008000b4 	movhi	r2,2
   22d54:	108fea04 	addi	r2,r2,16296
   22d58:	e0fffe17 	ldw	r3,-8(fp)
   22d5c:	18c00324 	muli	r3,r3,12
   22d60:	10c5883a 	add	r2,r2,r3
   22d64:	10800204 	addi	r2,r2,8
   22d68:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22d6c:	1000090e 	bge	r2,zero,22d94 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22d70:	e0bffe17 	ldw	r2,-8(fp)
   22d74:	10c00324 	muli	r3,r2,12
   22d78:	008000b4 	movhi	r2,2
   22d7c:	108fea04 	addi	r2,r2,16296
   22d80:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22d84:	e0bfff17 	ldw	r2,-4(fp)
   22d88:	18800226 	beq	r3,r2,22d94 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22d8c:	00bffcc4 	movi	r2,-13
   22d90:	00000806 	br	22db4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22d94:	e0bffe17 	ldw	r2,-8(fp)
   22d98:	10800044 	addi	r2,r2,1
   22d9c:	e0bffe15 	stw	r2,-8(fp)
   22da0:	d0a00717 	ldw	r2,-32740(gp)
   22da4:	1007883a 	mov	r3,r2
   22da8:	e0bffe17 	ldw	r2,-8(fp)
   22dac:	18bfdf2e 	bgeu	r3,r2,22d2c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22db0:	0005883a 	mov	r2,zero
}
   22db4:	e037883a 	mov	sp,fp
   22db8:	df000017 	ldw	fp,0(sp)
   22dbc:	dec00104 	addi	sp,sp,4
   22dc0:	f800283a 	ret

00022dc4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22dc4:	defff604 	addi	sp,sp,-40
   22dc8:	dfc00915 	stw	ra,36(sp)
   22dcc:	df000815 	stw	fp,32(sp)
   22dd0:	df000804 	addi	fp,sp,32
   22dd4:	e13ffd15 	stw	r4,-12(fp)
   22dd8:	e17ffe15 	stw	r5,-8(fp)
   22ddc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22de0:	00bfffc4 	movi	r2,-1
   22de4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22de8:	00bffb44 	movi	r2,-19
   22dec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22df0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22df4:	d1600504 	addi	r5,gp,-32748
   22df8:	e13ffd17 	ldw	r4,-12(fp)
   22dfc:	00231440 	call	23144 <alt_find_dev>
   22e00:	e0bff815 	stw	r2,-32(fp)
   22e04:	e0bff817 	ldw	r2,-32(fp)
   22e08:	1000051e 	bne	r2,zero,22e20 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22e0c:	e13ffd17 	ldw	r4,-12(fp)
   22e10:	00231d40 	call	231d4 <alt_find_file>
   22e14:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22e18:	00800044 	movi	r2,1
   22e1c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22e20:	e0bff817 	ldw	r2,-32(fp)
   22e24:	10002926 	beq	r2,zero,22ecc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22e28:	e13ff817 	ldw	r4,-32(fp)
   22e2c:	00232dc0 	call	232dc <alt_get_fd>
   22e30:	e0bff915 	stw	r2,-28(fp)
   22e34:	e0bff917 	ldw	r2,-28(fp)
   22e38:	1000030e 	bge	r2,zero,22e48 <open+0x84>
    {
      status = index;
   22e3c:	e0bff917 	ldw	r2,-28(fp)
   22e40:	e0bffa15 	stw	r2,-24(fp)
   22e44:	00002306 	br	22ed4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   22e48:	e0bff917 	ldw	r2,-28(fp)
   22e4c:	10c00324 	muli	r3,r2,12
   22e50:	008000b4 	movhi	r2,2
   22e54:	108fea04 	addi	r2,r2,16296
   22e58:	1885883a 	add	r2,r3,r2
   22e5c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22e60:	e0fffe17 	ldw	r3,-8(fp)
   22e64:	00900034 	movhi	r2,16384
   22e68:	10bfffc4 	addi	r2,r2,-1
   22e6c:	1886703a 	and	r3,r3,r2
   22e70:	e0bffc17 	ldw	r2,-16(fp)
   22e74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22e78:	e0bffb17 	ldw	r2,-20(fp)
   22e7c:	1000051e 	bne	r2,zero,22e94 <open+0xd0>
   22e80:	e13ffc17 	ldw	r4,-16(fp)
   22e84:	0022d000 	call	22d00 <alt_file_locked>
   22e88:	e0bffa15 	stw	r2,-24(fp)
   22e8c:	e0bffa17 	ldw	r2,-24(fp)
   22e90:	10001016 	blt	r2,zero,22ed4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22e94:	e0bff817 	ldw	r2,-32(fp)
   22e98:	10800317 	ldw	r2,12(r2)
   22e9c:	10000826 	beq	r2,zero,22ec0 <open+0xfc>
   22ea0:	e0bff817 	ldw	r2,-32(fp)
   22ea4:	10800317 	ldw	r2,12(r2)
   22ea8:	e1ffff17 	ldw	r7,-4(fp)
   22eac:	e1bffe17 	ldw	r6,-8(fp)
   22eb0:	e17ffd17 	ldw	r5,-12(fp)
   22eb4:	e13ffc17 	ldw	r4,-16(fp)
   22eb8:	103ee83a 	callr	r2
   22ebc:	00000106 	br	22ec4 <open+0x100>
   22ec0:	0005883a 	mov	r2,zero
   22ec4:	e0bffa15 	stw	r2,-24(fp)
   22ec8:	00000206 	br	22ed4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22ecc:	00bffb44 	movi	r2,-19
   22ed0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22ed4:	e0bffa17 	ldw	r2,-24(fp)
   22ed8:	1000090e 	bge	r2,zero,22f00 <open+0x13c>
  {
    alt_release_fd (index);  
   22edc:	e13ff917 	ldw	r4,-28(fp)
   22ee0:	0022f180 	call	22f18 <alt_release_fd>
    ALT_ERRNO = -status;
   22ee4:	0022cc40 	call	22cc4 <alt_get_errno>
   22ee8:	1007883a 	mov	r3,r2
   22eec:	e0bffa17 	ldw	r2,-24(fp)
   22ef0:	0085c83a 	sub	r2,zero,r2
   22ef4:	18800015 	stw	r2,0(r3)
    return -1;
   22ef8:	00bfffc4 	movi	r2,-1
   22efc:	00000106 	br	22f04 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   22f00:	e0bff917 	ldw	r2,-28(fp)
}
   22f04:	e037883a 	mov	sp,fp
   22f08:	dfc00117 	ldw	ra,4(sp)
   22f0c:	df000017 	ldw	fp,0(sp)
   22f10:	dec00204 	addi	sp,sp,8
   22f14:	f800283a 	ret

00022f18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   22f18:	defffe04 	addi	sp,sp,-8
   22f1c:	df000115 	stw	fp,4(sp)
   22f20:	df000104 	addi	fp,sp,4
   22f24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   22f28:	e0bfff17 	ldw	r2,-4(fp)
   22f2c:	108000d0 	cmplti	r2,r2,3
   22f30:	10000d1e 	bne	r2,zero,22f68 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   22f34:	008000b4 	movhi	r2,2
   22f38:	108fea04 	addi	r2,r2,16296
   22f3c:	e0ffff17 	ldw	r3,-4(fp)
   22f40:	18c00324 	muli	r3,r3,12
   22f44:	10c5883a 	add	r2,r2,r3
   22f48:	10800204 	addi	r2,r2,8
   22f4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   22f50:	008000b4 	movhi	r2,2
   22f54:	108fea04 	addi	r2,r2,16296
   22f58:	e0ffff17 	ldw	r3,-4(fp)
   22f5c:	18c00324 	muli	r3,r3,12
   22f60:	10c5883a 	add	r2,r2,r3
   22f64:	10000015 	stw	zero,0(r2)
  }
}
   22f68:	0001883a 	nop
   22f6c:	e037883a 	mov	sp,fp
   22f70:	df000017 	ldw	fp,0(sp)
   22f74:	dec00104 	addi	sp,sp,4
   22f78:	f800283a 	ret

00022f7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22f7c:	defffa04 	addi	sp,sp,-24
   22f80:	df000515 	stw	fp,20(sp)
   22f84:	df000504 	addi	fp,sp,20
   22f88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22f8c:	0005303a 	rdctl	r2,status
   22f90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22f94:	e0fffc17 	ldw	r3,-16(fp)
   22f98:	00bfff84 	movi	r2,-2
   22f9c:	1884703a 	and	r2,r3,r2
   22fa0:	1001703a 	wrctl	status,r2
  
  return context;
   22fa4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   22fa8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22fac:	e0bfff17 	ldw	r2,-4(fp)
   22fb0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22fb4:	e0bffd17 	ldw	r2,-12(fp)
   22fb8:	10800017 	ldw	r2,0(r2)
   22fbc:	e0fffd17 	ldw	r3,-12(fp)
   22fc0:	18c00117 	ldw	r3,4(r3)
   22fc4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22fc8:	e0bffd17 	ldw	r2,-12(fp)
   22fcc:	10800117 	ldw	r2,4(r2)
   22fd0:	e0fffd17 	ldw	r3,-12(fp)
   22fd4:	18c00017 	ldw	r3,0(r3)
   22fd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   22fdc:	e0bffd17 	ldw	r2,-12(fp)
   22fe0:	e0fffd17 	ldw	r3,-12(fp)
   22fe4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22fe8:	e0bffd17 	ldw	r2,-12(fp)
   22fec:	e0fffd17 	ldw	r3,-12(fp)
   22ff0:	10c00015 	stw	r3,0(r2)
   22ff4:	e0bffb17 	ldw	r2,-20(fp)
   22ff8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22ffc:	e0bffe17 	ldw	r2,-8(fp)
   23000:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   23004:	0001883a 	nop
   23008:	e037883a 	mov	sp,fp
   2300c:	df000017 	ldw	fp,0(sp)
   23010:	dec00104 	addi	sp,sp,4
   23014:	f800283a 	ret

00023018 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23018:	defffb04 	addi	sp,sp,-20
   2301c:	dfc00415 	stw	ra,16(sp)
   23020:	df000315 	stw	fp,12(sp)
   23024:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23028:	d0a00917 	ldw	r2,-32732(gp)
   2302c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   23030:	d0a0f617 	ldw	r2,-31784(gp)
   23034:	10800044 	addi	r2,r2,1
   23038:	d0a0f615 	stw	r2,-31784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2303c:	00002e06 	br	230f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23040:	e0bffd17 	ldw	r2,-12(fp)
   23044:	10800017 	ldw	r2,0(r2)
   23048:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2304c:	e0bffd17 	ldw	r2,-12(fp)
   23050:	10800403 	ldbu	r2,16(r2)
   23054:	10803fcc 	andi	r2,r2,255
   23058:	10000426 	beq	r2,zero,2306c <alt_tick+0x54>
   2305c:	d0a0f617 	ldw	r2,-31784(gp)
   23060:	1000021e 	bne	r2,zero,2306c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23064:	e0bffd17 	ldw	r2,-12(fp)
   23068:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2306c:	e0bffd17 	ldw	r2,-12(fp)
   23070:	10800217 	ldw	r2,8(r2)
   23074:	d0e0f617 	ldw	r3,-31784(gp)
   23078:	18801d36 	bltu	r3,r2,230f0 <alt_tick+0xd8>
   2307c:	e0bffd17 	ldw	r2,-12(fp)
   23080:	10800403 	ldbu	r2,16(r2)
   23084:	10803fcc 	andi	r2,r2,255
   23088:	1000191e 	bne	r2,zero,230f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2308c:	e0bffd17 	ldw	r2,-12(fp)
   23090:	10800317 	ldw	r2,12(r2)
   23094:	e0fffd17 	ldw	r3,-12(fp)
   23098:	18c00517 	ldw	r3,20(r3)
   2309c:	1809883a 	mov	r4,r3
   230a0:	103ee83a 	callr	r2
   230a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   230a8:	e0bfff17 	ldw	r2,-4(fp)
   230ac:	1000031e 	bne	r2,zero,230bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   230b0:	e13ffd17 	ldw	r4,-12(fp)
   230b4:	0022f7c0 	call	22f7c <alt_alarm_stop>
   230b8:	00000d06 	br	230f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   230bc:	e0bffd17 	ldw	r2,-12(fp)
   230c0:	10c00217 	ldw	r3,8(r2)
   230c4:	e0bfff17 	ldw	r2,-4(fp)
   230c8:	1887883a 	add	r3,r3,r2
   230cc:	e0bffd17 	ldw	r2,-12(fp)
   230d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   230d4:	e0bffd17 	ldw	r2,-12(fp)
   230d8:	10c00217 	ldw	r3,8(r2)
   230dc:	d0a0f617 	ldw	r2,-31784(gp)
   230e0:	1880032e 	bgeu	r3,r2,230f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   230e4:	e0bffd17 	ldw	r2,-12(fp)
   230e8:	00c00044 	movi	r3,1
   230ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   230f0:	e0bffe17 	ldw	r2,-8(fp)
   230f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   230f8:	e0fffd17 	ldw	r3,-12(fp)
   230fc:	d0a00904 	addi	r2,gp,-32732
   23100:	18bfcf1e 	bne	r3,r2,23040 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   23104:	0001883a 	nop
}
   23108:	0001883a 	nop
   2310c:	e037883a 	mov	sp,fp
   23110:	dfc00117 	ldw	ra,4(sp)
   23114:	df000017 	ldw	fp,0(sp)
   23118:	dec00204 	addi	sp,sp,8
   2311c:	f800283a 	ret

00023120 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   23120:	deffff04 	addi	sp,sp,-4
   23124:	df000015 	stw	fp,0(sp)
   23128:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2312c:	000170fa 	wrctl	ienable,zero
}
   23130:	0001883a 	nop
   23134:	e037883a 	mov	sp,fp
   23138:	df000017 	ldw	fp,0(sp)
   2313c:	dec00104 	addi	sp,sp,4
   23140:	f800283a 	ret

00023144 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   23144:	defffa04 	addi	sp,sp,-24
   23148:	dfc00515 	stw	ra,20(sp)
   2314c:	df000415 	stw	fp,16(sp)
   23150:	df000404 	addi	fp,sp,16
   23154:	e13ffe15 	stw	r4,-8(fp)
   23158:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2315c:	e0bfff17 	ldw	r2,-4(fp)
   23160:	10800017 	ldw	r2,0(r2)
   23164:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   23168:	e13ffe17 	ldw	r4,-8(fp)
   2316c:	0020dc80 	call	20dc8 <strlen>
   23170:	10800044 	addi	r2,r2,1
   23174:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23178:	00000d06 	br	231b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2317c:	e0bffc17 	ldw	r2,-16(fp)
   23180:	10800217 	ldw	r2,8(r2)
   23184:	e0fffd17 	ldw	r3,-12(fp)
   23188:	180d883a 	mov	r6,r3
   2318c:	e17ffe17 	ldw	r5,-8(fp)
   23190:	1009883a 	mov	r4,r2
   23194:	00234440 	call	23444 <memcmp>
   23198:	1000021e 	bne	r2,zero,231a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2319c:	e0bffc17 	ldw	r2,-16(fp)
   231a0:	00000706 	br	231c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   231a4:	e0bffc17 	ldw	r2,-16(fp)
   231a8:	10800017 	ldw	r2,0(r2)
   231ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   231b0:	e0fffc17 	ldw	r3,-16(fp)
   231b4:	e0bfff17 	ldw	r2,-4(fp)
   231b8:	18bff01e 	bne	r3,r2,2317c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   231bc:	0005883a 	mov	r2,zero
}
   231c0:	e037883a 	mov	sp,fp
   231c4:	dfc00117 	ldw	ra,4(sp)
   231c8:	df000017 	ldw	fp,0(sp)
   231cc:	dec00204 	addi	sp,sp,8
   231d0:	f800283a 	ret

000231d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   231d4:	defffb04 	addi	sp,sp,-20
   231d8:	dfc00415 	stw	ra,16(sp)
   231dc:	df000315 	stw	fp,12(sp)
   231e0:	df000304 	addi	fp,sp,12
   231e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   231e8:	d0a00317 	ldw	r2,-32756(gp)
   231ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   231f0:	00003106 	br	232b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   231f4:	e0bffd17 	ldw	r2,-12(fp)
   231f8:	10800217 	ldw	r2,8(r2)
   231fc:	1009883a 	mov	r4,r2
   23200:	0020dc80 	call	20dc8 <strlen>
   23204:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23208:	e0bffd17 	ldw	r2,-12(fp)
   2320c:	10c00217 	ldw	r3,8(r2)
   23210:	e0bffe17 	ldw	r2,-8(fp)
   23214:	10bfffc4 	addi	r2,r2,-1
   23218:	1885883a 	add	r2,r3,r2
   2321c:	10800003 	ldbu	r2,0(r2)
   23220:	10803fcc 	andi	r2,r2,255
   23224:	1080201c 	xori	r2,r2,128
   23228:	10bfe004 	addi	r2,r2,-128
   2322c:	10800bd8 	cmpnei	r2,r2,47
   23230:	1000031e 	bne	r2,zero,23240 <alt_find_file+0x6c>
    {
      len -= 1;
   23234:	e0bffe17 	ldw	r2,-8(fp)
   23238:	10bfffc4 	addi	r2,r2,-1
   2323c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23240:	e0bffe17 	ldw	r2,-8(fp)
   23244:	e0ffff17 	ldw	r3,-4(fp)
   23248:	1885883a 	add	r2,r3,r2
   2324c:	10800003 	ldbu	r2,0(r2)
   23250:	10803fcc 	andi	r2,r2,255
   23254:	1080201c 	xori	r2,r2,128
   23258:	10bfe004 	addi	r2,r2,-128
   2325c:	10800be0 	cmpeqi	r2,r2,47
   23260:	1000081e 	bne	r2,zero,23284 <alt_find_file+0xb0>
   23264:	e0bffe17 	ldw	r2,-8(fp)
   23268:	e0ffff17 	ldw	r3,-4(fp)
   2326c:	1885883a 	add	r2,r3,r2
   23270:	10800003 	ldbu	r2,0(r2)
   23274:	10803fcc 	andi	r2,r2,255
   23278:	1080201c 	xori	r2,r2,128
   2327c:	10bfe004 	addi	r2,r2,-128
   23280:	10000a1e 	bne	r2,zero,232ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   23284:	e0bffd17 	ldw	r2,-12(fp)
   23288:	10800217 	ldw	r2,8(r2)
   2328c:	e0fffe17 	ldw	r3,-8(fp)
   23290:	180d883a 	mov	r6,r3
   23294:	e17fff17 	ldw	r5,-4(fp)
   23298:	1009883a 	mov	r4,r2
   2329c:	00234440 	call	23444 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   232a0:	1000021e 	bne	r2,zero,232ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   232a4:	e0bffd17 	ldw	r2,-12(fp)
   232a8:	00000706 	br	232c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   232ac:	e0bffd17 	ldw	r2,-12(fp)
   232b0:	10800017 	ldw	r2,0(r2)
   232b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   232b8:	e0fffd17 	ldw	r3,-12(fp)
   232bc:	d0a00304 	addi	r2,gp,-32756
   232c0:	18bfcc1e 	bne	r3,r2,231f4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   232c4:	0005883a 	mov	r2,zero
}
   232c8:	e037883a 	mov	sp,fp
   232cc:	dfc00117 	ldw	ra,4(sp)
   232d0:	df000017 	ldw	fp,0(sp)
   232d4:	dec00204 	addi	sp,sp,8
   232d8:	f800283a 	ret

000232dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   232dc:	defffc04 	addi	sp,sp,-16
   232e0:	df000315 	stw	fp,12(sp)
   232e4:	df000304 	addi	fp,sp,12
   232e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   232ec:	00bffa04 	movi	r2,-24
   232f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   232f4:	e03ffd15 	stw	zero,-12(fp)
   232f8:	00001906 	br	23360 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   232fc:	008000b4 	movhi	r2,2
   23300:	108fea04 	addi	r2,r2,16296
   23304:	e0fffd17 	ldw	r3,-12(fp)
   23308:	18c00324 	muli	r3,r3,12
   2330c:	10c5883a 	add	r2,r2,r3
   23310:	10800017 	ldw	r2,0(r2)
   23314:	10000f1e 	bne	r2,zero,23354 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   23318:	008000b4 	movhi	r2,2
   2331c:	108fea04 	addi	r2,r2,16296
   23320:	e0fffd17 	ldw	r3,-12(fp)
   23324:	18c00324 	muli	r3,r3,12
   23328:	10c5883a 	add	r2,r2,r3
   2332c:	e0ffff17 	ldw	r3,-4(fp)
   23330:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   23334:	d0e00717 	ldw	r3,-32740(gp)
   23338:	e0bffd17 	ldw	r2,-12(fp)
   2333c:	1880020e 	bge	r3,r2,23348 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   23340:	e0bffd17 	ldw	r2,-12(fp)
   23344:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   23348:	e0bffd17 	ldw	r2,-12(fp)
   2334c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   23350:	00000606 	br	2336c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23354:	e0bffd17 	ldw	r2,-12(fp)
   23358:	10800044 	addi	r2,r2,1
   2335c:	e0bffd15 	stw	r2,-12(fp)
   23360:	e0bffd17 	ldw	r2,-12(fp)
   23364:	10800810 	cmplti	r2,r2,32
   23368:	103fe41e 	bne	r2,zero,232fc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2336c:	e0bffe17 	ldw	r2,-8(fp)
}
   23370:	e037883a 	mov	sp,fp
   23374:	df000017 	ldw	fp,0(sp)
   23378:	dec00104 	addi	sp,sp,4
   2337c:	f800283a 	ret

00023380 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   23380:	defffb04 	addi	sp,sp,-20
   23384:	df000415 	stw	fp,16(sp)
   23388:	df000404 	addi	fp,sp,16
   2338c:	e13ffe15 	stw	r4,-8(fp)
   23390:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   23394:	e0bfff17 	ldw	r2,-4(fp)
   23398:	10820070 	cmpltui	r2,r2,2049
   2339c:	1000021e 	bne	r2,zero,233a8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   233a0:	00820004 	movi	r2,2048
   233a4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   233a8:	e0fffe17 	ldw	r3,-8(fp)
   233ac:	e0bfff17 	ldw	r2,-4(fp)
   233b0:	1885883a 	add	r2,r3,r2
   233b4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   233b8:	e0bffe17 	ldw	r2,-8(fp)
   233bc:	e0bffc15 	stw	r2,-16(fp)
   233c0:	00000506 	br	233d8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   233c4:	e0bffc17 	ldw	r2,-16(fp)
   233c8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   233cc:	e0bffc17 	ldw	r2,-16(fp)
   233d0:	10800804 	addi	r2,r2,32
   233d4:	e0bffc15 	stw	r2,-16(fp)
   233d8:	e0fffc17 	ldw	r3,-16(fp)
   233dc:	e0bffd17 	ldw	r2,-12(fp)
   233e0:	18bff836 	bltu	r3,r2,233c4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   233e4:	e0bffe17 	ldw	r2,-8(fp)
   233e8:	108007cc 	andi	r2,r2,31
   233ec:	10000226 	beq	r2,zero,233f8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   233f0:	e0bffc17 	ldw	r2,-16(fp)
   233f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   233f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   233fc:	0001883a 	nop
   23400:	e037883a 	mov	sp,fp
   23404:	df000017 	ldw	fp,0(sp)
   23408:	dec00104 	addi	sp,sp,4
   2340c:	f800283a 	ret

00023410 <atexit>:
   23410:	200b883a 	mov	r5,r4
   23414:	000f883a 	mov	r7,zero
   23418:	000d883a 	mov	r6,zero
   2341c:	0009883a 	mov	r4,zero
   23420:	00234741 	jmpi	23474 <__register_exitproc>

00023424 <exit>:
   23424:	defffe04 	addi	sp,sp,-8
   23428:	000b883a 	mov	r5,zero
   2342c:	dc000015 	stw	r16,0(sp)
   23430:	dfc00115 	stw	ra,4(sp)
   23434:	2021883a 	mov	r16,r4
   23438:	00235cc0 	call	235cc <__call_exitprocs>
   2343c:	8009883a 	mov	r4,r16
   23440:	002375c0 	call	2375c <_exit>

00023444 <memcmp>:
   23444:	218d883a 	add	r6,r4,r6
   23448:	21800826 	beq	r4,r6,2346c <memcmp+0x28>
   2344c:	20800003 	ldbu	r2,0(r4)
   23450:	28c00003 	ldbu	r3,0(r5)
   23454:	10c00226 	beq	r2,r3,23460 <memcmp+0x1c>
   23458:	10c5c83a 	sub	r2,r2,r3
   2345c:	f800283a 	ret
   23460:	21000044 	addi	r4,r4,1
   23464:	29400044 	addi	r5,r5,1
   23468:	003ff706 	br	23448 <memcmp+0x4>
   2346c:	0005883a 	mov	r2,zero
   23470:	f800283a 	ret

00023474 <__register_exitproc>:
   23474:	008000b4 	movhi	r2,2
   23478:	10904a04 	addi	r2,r2,16680
   2347c:	10c00017 	ldw	r3,0(r2)
   23480:	defff904 	addi	sp,sp,-28
   23484:	dc000015 	stw	r16,0(sp)
   23488:	1c000c17 	ldw	r16,48(r3)
   2348c:	dd400515 	stw	r21,20(sp)
   23490:	dd000415 	stw	r20,16(sp)
   23494:	dcc00315 	stw	r19,12(sp)
   23498:	dc800215 	stw	r18,8(sp)
   2349c:	dc400115 	stw	r17,4(sp)
   234a0:	dfc00615 	stw	ra,24(sp)
   234a4:	202b883a 	mov	r21,r4
   234a8:	2823883a 	mov	r17,r5
   234ac:	3027883a 	mov	r19,r6
   234b0:	3825883a 	mov	r18,r7
   234b4:	1029883a 	mov	r20,r2
   234b8:	8000021e 	bne	r16,zero,234c4 <__register_exitproc+0x50>
   234bc:	1c000d04 	addi	r16,r3,52
   234c0:	1c000c15 	stw	r16,48(r3)
   234c4:	80800117 	ldw	r2,4(r16)
   234c8:	00c007c4 	movi	r3,31
   234cc:	1880110e 	bge	r3,r2,23514 <__register_exitproc+0xa0>
   234d0:	00800034 	movhi	r2,0
   234d4:	10800004 	addi	r2,r2,0
   234d8:	1000021e 	bne	r2,zero,234e4 <__register_exitproc+0x70>
   234dc:	00bfffc4 	movi	r2,-1
   234e0:	00003106 	br	235a8 <__register_exitproc+0x134>
   234e4:	01002304 	movi	r4,140
   234e8:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>
   234ec:	1021883a 	mov	r16,r2
   234f0:	103ffa26 	beq	r2,zero,234dc <__register_exitproc+0x68>
   234f4:	10000115 	stw	zero,4(r2)
   234f8:	a0800017 	ldw	r2,0(r20)
   234fc:	10c00c17 	ldw	r3,48(r2)
   23500:	80c00015 	stw	r3,0(r16)
   23504:	14000c15 	stw	r16,48(r2)
   23508:	80002215 	stw	zero,136(r16)
   2350c:	a8001d26 	beq	r21,zero,23584 <__register_exitproc+0x110>
   23510:	00000606 	br	2352c <__register_exitproc+0xb8>
   23514:	a8001b26 	beq	r21,zero,23584 <__register_exitproc+0x110>
   23518:	80802217 	ldw	r2,136(r16)
   2351c:	1000091e 	bne	r2,zero,23544 <__register_exitproc+0xd0>
   23520:	00800034 	movhi	r2,0
   23524:	10800004 	addi	r2,r2,0
   23528:	103fec26 	beq	r2,zero,234dc <__register_exitproc+0x68>
   2352c:	01004204 	movi	r4,264
   23530:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>
   23534:	103fe926 	beq	r2,zero,234dc <__register_exitproc+0x68>
   23538:	10004015 	stw	zero,256(r2)
   2353c:	10004115 	stw	zero,260(r2)
   23540:	80802215 	stw	r2,136(r16)
   23544:	81400117 	ldw	r5,4(r16)
   23548:	01000044 	movi	r4,1
   2354c:	2947883a 	add	r3,r5,r5
   23550:	18c7883a 	add	r3,r3,r3
   23554:	10c7883a 	add	r3,r2,r3
   23558:	1cc00015 	stw	r19,0(r3)
   2355c:	2148983a 	sll	r4,r4,r5
   23560:	11404017 	ldw	r5,256(r2)
   23564:	290ab03a 	or	r5,r5,r4
   23568:	11404015 	stw	r5,256(r2)
   2356c:	1c802015 	stw	r18,128(r3)
   23570:	00c00084 	movi	r3,2
   23574:	a8c0031e 	bne	r21,r3,23584 <__register_exitproc+0x110>
   23578:	10c04117 	ldw	r3,260(r2)
   2357c:	1908b03a 	or	r4,r3,r4
   23580:	11004115 	stw	r4,260(r2)
   23584:	80800117 	ldw	r2,4(r16)
   23588:	10c00044 	addi	r3,r2,1
   2358c:	10800084 	addi	r2,r2,2
   23590:	1085883a 	add	r2,r2,r2
   23594:	1085883a 	add	r2,r2,r2
   23598:	80c00115 	stw	r3,4(r16)
   2359c:	80a1883a 	add	r16,r16,r2
   235a0:	84400015 	stw	r17,0(r16)
   235a4:	0005883a 	mov	r2,zero
   235a8:	dfc00617 	ldw	ra,24(sp)
   235ac:	dd400517 	ldw	r21,20(sp)
   235b0:	dd000417 	ldw	r20,16(sp)
   235b4:	dcc00317 	ldw	r19,12(sp)
   235b8:	dc800217 	ldw	r18,8(sp)
   235bc:	dc400117 	ldw	r17,4(sp)
   235c0:	dc000017 	ldw	r16,0(sp)
   235c4:	dec00704 	addi	sp,sp,28
   235c8:	f800283a 	ret

000235cc <__call_exitprocs>:
   235cc:	defff504 	addi	sp,sp,-44
   235d0:	dd000515 	stw	r20,20(sp)
   235d4:	050000b4 	movhi	r20,2
   235d8:	dc800315 	stw	r18,12(sp)
   235dc:	dfc00a15 	stw	ra,40(sp)
   235e0:	df000915 	stw	fp,36(sp)
   235e4:	ddc00815 	stw	r23,32(sp)
   235e8:	dd800715 	stw	r22,28(sp)
   235ec:	dd400615 	stw	r21,24(sp)
   235f0:	dcc00415 	stw	r19,16(sp)
   235f4:	dc400215 	stw	r17,8(sp)
   235f8:	dc000115 	stw	r16,4(sp)
   235fc:	d9000015 	stw	r4,0(sp)
   23600:	2825883a 	mov	r18,r5
   23604:	a5104a04 	addi	r20,r20,16680
   23608:	a4400017 	ldw	r17,0(r20)
   2360c:	8cc00c17 	ldw	r19,48(r17)
   23610:	8c400c04 	addi	r17,r17,48
   23614:	98004526 	beq	r19,zero,2372c <__call_exitprocs+0x160>
   23618:	9c000117 	ldw	r16,4(r19)
   2361c:	00900034 	movhi	r2,16384
   23620:	10bfffc4 	addi	r2,r2,-1
   23624:	9d402217 	ldw	r21,136(r19)
   23628:	85bfffc4 	addi	r22,r16,-1
   2362c:	80a1883a 	add	r16,r16,r2
   23630:	8421883a 	add	r16,r16,r16
   23634:	8421883a 	add	r16,r16,r16
   23638:	ac2f883a 	add	r23,r21,r16
   2363c:	84000204 	addi	r16,r16,8
   23640:	9c21883a 	add	r16,r19,r16
   23644:	b0002716 	blt	r22,zero,236e4 <__call_exitprocs+0x118>
   23648:	90000726 	beq	r18,zero,23668 <__call_exitprocs+0x9c>
   2364c:	a800041e 	bne	r21,zero,23660 <__call_exitprocs+0x94>
   23650:	b5bfffc4 	addi	r22,r22,-1
   23654:	bdffff04 	addi	r23,r23,-4
   23658:	843fff04 	addi	r16,r16,-4
   2365c:	003ff906 	br	23644 <__call_exitprocs+0x78>
   23660:	b9002017 	ldw	r4,128(r23)
   23664:	913ffa1e 	bne	r18,r4,23650 <__call_exitprocs+0x84>
   23668:	99000117 	ldw	r4,4(r19)
   2366c:	82000017 	ldw	r8,0(r16)
   23670:	213fffc4 	addi	r4,r4,-1
   23674:	b100021e 	bne	r22,r4,23680 <__call_exitprocs+0xb4>
   23678:	9d800115 	stw	r22,4(r19)
   2367c:	00000106 	br	23684 <__call_exitprocs+0xb8>
   23680:	80000015 	stw	zero,0(r16)
   23684:	403ff226 	beq	r8,zero,23650 <__call_exitprocs+0x84>
   23688:	9f000117 	ldw	fp,4(r19)
   2368c:	a8000526 	beq	r21,zero,236a4 <__call_exitprocs+0xd8>
   23690:	00800044 	movi	r2,1
   23694:	1592983a 	sll	r9,r2,r22
   23698:	a9404017 	ldw	r5,256(r21)
   2369c:	494a703a 	and	r5,r9,r5
   236a0:	2800021e 	bne	r5,zero,236ac <__call_exitprocs+0xe0>
   236a4:	403ee83a 	callr	r8
   236a8:	00000906 	br	236d0 <__call_exitprocs+0x104>
   236ac:	a9004117 	ldw	r4,260(r21)
   236b0:	4908703a 	and	r4,r9,r4
   236b4:	2000041e 	bne	r4,zero,236c8 <__call_exitprocs+0xfc>
   236b8:	b9400017 	ldw	r5,0(r23)
   236bc:	d9000017 	ldw	r4,0(sp)
   236c0:	403ee83a 	callr	r8
   236c4:	00000206 	br	236d0 <__call_exitprocs+0x104>
   236c8:	b9000017 	ldw	r4,0(r23)
   236cc:	403ee83a 	callr	r8
   236d0:	99000117 	ldw	r4,4(r19)
   236d4:	e13fcc1e 	bne	fp,r4,23608 <__call_exitprocs+0x3c>
   236d8:	89000017 	ldw	r4,0(r17)
   236dc:	993fdc26 	beq	r19,r4,23650 <__call_exitprocs+0x84>
   236e0:	003fc906 	br	23608 <__call_exitprocs+0x3c>
   236e4:	00800034 	movhi	r2,0
   236e8:	10800004 	addi	r2,r2,0
   236ec:	10000f26 	beq	r2,zero,2372c <__call_exitprocs+0x160>
   236f0:	99400117 	ldw	r5,4(r19)
   236f4:	99000017 	ldw	r4,0(r19)
   236f8:	2800091e 	bne	r5,zero,23720 <__call_exitprocs+0x154>
   236fc:	20000826 	beq	r4,zero,23720 <__call_exitprocs+0x154>
   23700:	89000015 	stw	r4,0(r17)
   23704:	a8000226 	beq	r21,zero,23710 <__call_exitprocs+0x144>
   23708:	a809883a 	mov	r4,r21
   2370c:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>
   23710:	9809883a 	mov	r4,r19
   23714:	00000000 	call	0 <__alt_mem_MEMOIRE_ONCHIP-0x20000>
   23718:	8cc00017 	ldw	r19,0(r17)
   2371c:	003fbd06 	br	23614 <__call_exitprocs+0x48>
   23720:	9823883a 	mov	r17,r19
   23724:	2027883a 	mov	r19,r4
   23728:	003fba06 	br	23614 <__call_exitprocs+0x48>
   2372c:	dfc00a17 	ldw	ra,40(sp)
   23730:	df000917 	ldw	fp,36(sp)
   23734:	ddc00817 	ldw	r23,32(sp)
   23738:	dd800717 	ldw	r22,28(sp)
   2373c:	dd400617 	ldw	r21,24(sp)
   23740:	dd000517 	ldw	r20,20(sp)
   23744:	dcc00417 	ldw	r19,16(sp)
   23748:	dc800317 	ldw	r18,12(sp)
   2374c:	dc400217 	ldw	r17,8(sp)
   23750:	dc000117 	ldw	r16,4(sp)
   23754:	dec00b04 	addi	sp,sp,44
   23758:	f800283a 	ret

0002375c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2375c:	defffd04 	addi	sp,sp,-12
   23760:	df000215 	stw	fp,8(sp)
   23764:	df000204 	addi	fp,sp,8
   23768:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2376c:	0001883a 	nop
   23770:	e0bfff17 	ldw	r2,-4(fp)
   23774:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23778:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2377c:	10000226 	beq	r2,zero,23788 <_exit+0x2c>
    ALT_SIM_FAIL();
   23780:	002af070 	cmpltui	zero,zero,43969
   23784:	00000106 	br	2378c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   23788:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2378c:	003fff06 	br	2378c <_exit+0x30>
